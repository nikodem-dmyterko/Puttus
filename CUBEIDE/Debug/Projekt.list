
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006204  08006204  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800620c  0800620c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  2000000c  08006220  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  08006220  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016091  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df5  00000000  00000000  000360cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00038ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d1c  00000000  00000000  0003b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e66  00000000  00000000  00062d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c92  00000000  00000000  00079be2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c874  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  0016c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080061d4 	.word	0x080061d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080061d4 	.word	0x080061d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <controller_init>:
#include "controller.h"

void controller_init(struct Controller* controller, float MAX_CONTROL_SIGNAL, float MIN_CONTROL_SIGNAL, float START_CONTROL_SIGNAL, float MIN_ERROR, float MAX_ERROR)
{
 800050c:	b480      	push	{r7}
 800050e:	b087      	sub	sp, #28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6178      	str	r0, [r7, #20]
 8000514:	ed87 0a04 	vstr	s0, [r7, #16]
 8000518:	edc7 0a03 	vstr	s1, [r7, #12]
 800051c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000520:	edc7 1a01 	vstr	s3, [r7, #4]
 8000524:	ed87 2a00 	vstr	s4, [r7]
	controller->MAX_CONTROL_SIGNAL = MAX_CONTROL_SIGNAL;
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	693a      	ldr	r2, [r7, #16]
 800052c:	601a      	str	r2, [r3, #0]
	controller->MIN_CONTROL_SIGNAL = MIN_CONTROL_SIGNAL;
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	605a      	str	r2, [r3, #4]
	controller->START_CONTROL_SIGNAL = START_CONTROL_SIGNAL;
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	60da      	str	r2, [r3, #12]
	controller->MAX_ERROR = MAX_ERROR;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	611a      	str	r2, [r3, #16]
	controller->previous_error = 0;
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	f04f 0200 	mov.w	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
}
 800054e:	bf00      	nop
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <controller_control_signal>:

float controller_control_signal(struct Controller* controller, float error)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	ed87 0a00 	vstr	s0, [r7]
	//float dot_error = error-controller->previous_error;
	controller->previous_error = error;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	615a      	str	r2, [r3, #20]
	if(error < -controller->MAX_ERROR)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	edd3 7a04 	vldr	s15, [r3, #16]
 8000574:	eef1 7a67 	vneg.f32	s15, s15
 8000578:	ed97 7a00 	vldr	s14, [r7]
 800057c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000584:	d503      	bpl.n	800058e <controller_control_signal+0x32>
	{
		return controller->MAX_CONTROL_SIGNAL;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	edd3 7a00 	vldr	s15, [r3]
 800058c:	e04f      	b.n	800062e <controller_control_signal+0xd2>
	}
	else if(error < -controller->MIN_ERROR)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	edd3 7a03 	vldr	s15, [r3, #12]
 8000594:	eef1 7a67 	vneg.f32	s15, s15
 8000598:	ed97 7a00 	vldr	s14, [r7]
 800059c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a4:	d513      	bpl.n	80005ce <controller_control_signal+0x72>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error + controller->START_CONTROL_SIGNAL;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	edd3 6a00 	vldr	s13, [r3]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80005b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80005b6:	edd7 7a00 	vldr	s15, [r7]
 80005ba:	eef1 7a67 	vneg.f32	s15, s15
 80005be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80005c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005cc:	e02f      	b.n	800062e <controller_control_signal+0xd2>
	}
	else if(error < controller->MIN_ERROR)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80005d4:	ed97 7a00 	vldr	s14, [r7]
 80005d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e0:	d502      	bpl.n	80005e8 <controller_control_signal+0x8c>
	{
		return 0;
 80005e2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800063c <controller_control_signal+0xe0>
 80005e6:	e022      	b.n	800062e <controller_control_signal+0xd2>
	}
	else if(error < controller->MAX_ERROR)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80005ee:	ed97 7a00 	vldr	s14, [r7]
 80005f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005fa:	d513      	bpl.n	8000624 <controller_control_signal+0xc8>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error - controller->START_CONTROL_SIGNAL;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	edd3 6a00 	vldr	s13, [r3]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	edd3 7a04 	vldr	s15, [r3, #16]
 8000608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800060c:	edd7 7a00 	vldr	s15, [r7]
 8000610:	eef1 7a67 	vneg.f32	s15, s15
 8000614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	edd3 7a02 	vldr	s15, [r3, #8]
 800061e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000622:	e004      	b.n	800062e <controller_control_signal+0xd2>
	}
	else
	{
		return -controller->MAX_CONTROL_SIGNAL;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	edd3 7a00 	vldr	s15, [r3]
 800062a:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 800062e:	eeb0 0a67 	vmov.f32	s0, s15
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	00000000 	.word	0x00000000

08000640 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b77      	ldr	r3, [pc, #476]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a76      	ldr	r2, [pc, #472]	; (8000834 <MX_GPIO_Init+0x1f4>)
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b74      	ldr	r3, [pc, #464]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0304 	and.w	r3, r3, #4
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066e:	4b71      	ldr	r3, [pc, #452]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a70      	ldr	r2, [pc, #448]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b6e      	ldr	r3, [pc, #440]	; (8000834 <MX_GPIO_Init+0x1f4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b6b      	ldr	r3, [pc, #428]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a6a      	ldr	r2, [pc, #424]	; (8000834 <MX_GPIO_Init+0x1f4>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b68      	ldr	r3, [pc, #416]	; (8000834 <MX_GPIO_Init+0x1f4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b65      	ldr	r3, [pc, #404]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a64      	ldr	r2, [pc, #400]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b62      	ldr	r3, [pc, #392]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b6:	4b5f      	ldr	r3, [pc, #380]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a5e      	ldr	r2, [pc, #376]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006bc:	f043 0310 	orr.w	r3, r3, #16
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0310 	and.w	r3, r3, #16
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ce:	4b59      	ldr	r3, [pc, #356]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a58      	ldr	r2, [pc, #352]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006d4:	f043 0308 	orr.w	r3, r3, #8
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b56      	ldr	r3, [pc, #344]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a52      	ldr	r2, [pc, #328]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <MX_GPIO_Init+0x1f4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2130      	movs	r1, #48	; 0x30
 8000702:	484d      	ldr	r0, [pc, #308]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000704:	f001 fd8e 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|BACKWARD_MOTOR_2_Pin|FORWARD_MOTOR_2_Pin|LD3_Pin
 8000708:	2200      	movs	r2, #0
 800070a:	f244 0187 	movw	r1, #16519	; 0x4087
 800070e:	484b      	ldr	r0, [pc, #300]	; (800083c <MX_GPIO_Init+0x1fc>)
 8000710:	f001 fd88 	bl	8002224 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4849      	ldr	r0, [pc, #292]	; (8000840 <MX_GPIO_Init+0x200>)
 800071a:	f001 fd83 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	4843      	ldr	r0, [pc, #268]	; (8000844 <MX_GPIO_Init+0x204>)
 8000736:	f001 fbc9 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800073a:	2332      	movs	r3, #50	; 0x32
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800074a:	230b      	movs	r3, #11
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	483b      	ldr	r0, [pc, #236]	; (8000844 <MX_GPIO_Init+0x204>)
 8000756:	f001 fbb9 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800075a:	2386      	movs	r3, #134	; 0x86
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800076a:	230b      	movs	r3, #11
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4830      	ldr	r0, [pc, #192]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000776:	f001 fba9 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin;
 800077a:	2330      	movs	r3, #48	; 0x30
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4829      	ldr	r0, [pc, #164]	; (8000838 <MX_GPIO_Init+0x1f8>)
 8000792:	f001 fb9b 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|BACKWARD_MOTOR_2_Pin|FORWARD_MOTOR_2_Pin|LD3_Pin
 8000796:	f244 0387 	movw	r3, #16519	; 0x4087
 800079a:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <MX_GPIO_Init+0x1fc>)
 80007b0:	f001 fb8c 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c6:	230b      	movs	r3, #11
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <MX_GPIO_Init+0x1fc>)
 80007d2:	f001 fb7b 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_GPIO_Init+0x200>)
 80007ee:	f001 fb6d 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007f2:	2380      	movs	r3, #128	; 0x80
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	480e      	ldr	r0, [pc, #56]	; (8000840 <MX_GPIO_Init+0x200>)
 8000806:	f001 fb61 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800080a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081c:	230b      	movs	r3, #11
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_GPIO_Init+0x200>)
 8000828:	f001 fb50 	bl	8001ecc <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	; 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020000 	.word	0x40020000
 800083c:	40020400 	.word	0x40020400
 8000840:	40021800 	.word	0x40021800
 8000844:	40020800 	.word	0x40020800

08000848 <hc_sr04_init>:
#include "hcsr04.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2104      	movs	r1, #4
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f988 	bl	8003b84 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4619      	mov	r1, r3
 800087e:	4610      	mov	r0, r2
 8000880:	f003 f824 	bl	80038cc <HAL_TIM_PWM_Start>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(float distance_us)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	ed87 0a01 	vstr	s0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8000896:	edd7 7a01 	vldr	s15, [r7, #4]
 800089a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80008b4 <hc_sr04_convert_us_to_cm+0x28>
 800089e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80008a2:	eef0 7a66 	vmov.f32	s15, s13
}
 80008a6:	eeb0 0a67 	vmov.f32	s0, s15
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	42680000 	.word	0x42680000

080008b8 <HAL_TIM_IC_CaptureCallback>:
struct Motor left_motor;
struct Motor right_motor;
struct Robot robot;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <HAL_TIM_IC_CaptureCallback+0x54>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d11c      	bne.n	8000904 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008ca:	2104      	movs	r1, #4
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f003 fe85 	bl	80045dc <HAL_TIM_ReadCapturedValue>
 80008d2:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008de:	eeb0 0a67 	vmov.f32	s0, s15
 80008e2:	f7ff ffd3 	bl	800088c <hc_sr04_convert_us_to_cm>
 80008e6:	eef0 7a40 	vmov.f32	s15, s0
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x58>)
 80008ec:	edc3 7a03 	vstr	s15, [r3, #12]
		robot_linear_update(&robot, distance_sensor.distance_cm, 1/16);
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x58>)
 80008f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80008f6:	eddf 0a07 	vldr	s1, [pc, #28]	; 8000914 <HAL_TIM_IC_CaptureCallback+0x5c>
 80008fa:	eeb0 0a67 	vmov.f32	s0, s15
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000900:	f000 fc42 	bl	8001188 <robot_linear_update>
	}
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40010000 	.word	0x40010000
 8000910:	20000028 	.word	0x20000028
 8000914:	00000000 	.word	0x00000000
 8000918:	20000080 	.word	0x20000080

0800091c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(TIM4 == htim->Instance)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d11c      	bne.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		float error = robot_error(&robot);
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000930:	f000 fc5d 	bl	80011ee <robot_error>
 8000934:	ed87 0a03 	vstr	s0, [r7, #12]
		motor_move(&left_motor, controller_control_signal(&controller, error));
 8000938:	ed97 0a03 	vldr	s0, [r7, #12]
 800093c:	480e      	ldr	r0, [pc, #56]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800093e:	f7ff fe0d 	bl	800055c <controller_control_signal>
 8000942:	eef0 7a40 	vmov.f32	s15, s0
 8000946:	eeb0 0a67 	vmov.f32	s0, s15
 800094a:	480c      	ldr	r0, [pc, #48]	; (800097c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800094c:	f000 f9a2 	bl	8000c94 <motor_move>
		motor_move(&right_motor, controller_control_signal(&controller, error));
 8000950:	ed97 0a03 	vldr	s0, [r7, #12]
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000956:	f7ff fe01 	bl	800055c <controller_control_signal>
 800095a:	eef0 7a40 	vmov.f32	s15, s0
 800095e:	eeb0 0a67 	vmov.f32	s0, s15
 8000962:	4807      	ldr	r0, [pc, #28]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000964:	f000 f996 	bl	8000c94 <motor_move>
	}
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40000800 	.word	0x40000800
 8000974:	20000080 	.word	0x20000080
 8000978:	20000038 	.word	0x20000038
 800097c:	20000050 	.word	0x20000050
 8000980:	20000068 	.word	0x20000068

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f001 f90c 	bl	8001ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f86d 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f7ff fe55 	bl	8000640 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000996:	f000 ffa5 	bl	80018e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800099a:	f001 f833 	bl	8001a04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800099e:	f000 fcb7 	bl	8001310 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009a2:	f000 fd59 	bl	8001458 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009a6:	f000 fdb1 	bl	800150c <MX_TIM3_Init>
  MX_TIM4_Init();
 80009aa:	f000 fe31 	bl	8001610 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // HC-SR04 init
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80009ae:	2308      	movs	r3, #8
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <main+0xa8>)
 80009b2:	491f      	ldr	r1, [pc, #124]	; (8000a30 <main+0xac>)
 80009b4:	481f      	ldr	r0, [pc, #124]	; (8000a34 <main+0xb0>)
 80009b6:	f7ff ff47 	bl	8000848 <hc_sr04_init>

  // Robot init
  robot_init(&robot, distance_sensor.distance_cm, 0);
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <main+0xb0>)
 80009bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80009c0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8000a38 <main+0xb4>
 80009c4:	eeb0 0a67 	vmov.f32	s0, s15
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <main+0xb8>)
 80009ca:	f000 fbbb 	bl	8001144 <robot_init>

  // Set end position
  robot_set_end_position(&robot, 15.0f);
 80009ce:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80009d2:	481a      	ldr	r0, [pc, #104]	; (8000a3c <main+0xb8>)
 80009d4:	f000 fbfc 	bl	80011d0 <robot_set_end_position>

  // Controller init
  controller_init(&controller, MAX_PWM, 300, MIN_PWM, MIN_ERROR, MAX_ERROR);
 80009d8:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8000a40 <main+0xbc>
 80009dc:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 80009e0:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000a44 <main+0xc0>
 80009e4:	eddf 0a18 	vldr	s1, [pc, #96]	; 8000a48 <main+0xc4>
 80009e8:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8000a4c <main+0xc8>
 80009ec:	4818      	ldr	r0, [pc, #96]	; (8000a50 <main+0xcc>)
 80009ee:	f7ff fd8d 	bl	800050c <controller_init>

  // Left motor init
  motor_init(&left_motor, &htim3, TIM_CHANNEL_1, FORWARD_MOTOR_1_GPIO_Port, BACKWARD_MOTOR_1_GPIO_Port, FORWARD_MOTOR_1_Pin, BACKWARD_MOTOR_1_Pin);
 80009f2:	2320      	movs	r3, #32
 80009f4:	9302      	str	r3, [sp, #8]
 80009f6:	2310      	movs	r3, #16
 80009f8:	9301      	str	r3, [sp, #4]
 80009fa:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <main+0xd0>)
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <main+0xd0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	4915      	ldr	r1, [pc, #84]	; (8000a58 <main+0xd4>)
 8000a04:	4815      	ldr	r0, [pc, #84]	; (8000a5c <main+0xd8>)
 8000a06:	f000 f89e 	bl	8000b46 <motor_init>

  // Right motor init
  motor_init(&right_motor, &htim3, TIM_CHANNEL_2, FORWARD_MOTOR_2_GPIO_Port, BACKWARD_MOTOR_2_GPIO_Port, FORWARD_MOTOR_2_Pin, BACKWARD_MOTOR_2_Pin);
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	9302      	str	r3, [sp, #8]
 8000a0e:	2304      	movs	r3, #4
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <main+0xdc>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <main+0xdc>)
 8000a18:	2204      	movs	r2, #4
 8000a1a:	490f      	ldr	r1, [pc, #60]	; (8000a58 <main+0xd4>)
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <main+0xe0>)
 8000a1e:	f000 f892 	bl	8000b46 <motor_init>

  // Timer 4 start with interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <main+0xe4>)
 8000a24:	f002 fe82 	bl	800372c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0xa4>
 8000a2a:	bf00      	nop
 8000a2c:	200000e8 	.word	0x200000e8
 8000a30:	2000009c 	.word	0x2000009c
 8000a34:	20000028 	.word	0x20000028
 8000a38:	00000000 	.word	0x00000000
 8000a3c:	20000080 	.word	0x20000080
 8000a40:	42480000 	.word	0x42480000
 8000a44:	43fa0000 	.word	0x43fa0000
 8000a48:	43960000 	.word	0x43960000
 8000a4c:	447a0000 	.word	0x447a0000
 8000a50:	20000038 	.word	0x20000038
 8000a54:	40020000 	.word	0x40020000
 8000a58:	20000134 	.word	0x20000134
 8000a5c:	20000050 	.word	0x20000050
 8000a60:	40020400 	.word	0x40020400
 8000a64:	20000068 	.word	0x20000068
 8000a68:	20000180 	.word	0x20000180

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b094      	sub	sp, #80	; 0x50
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	2230      	movs	r2, #48	; 0x30
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 fba2 	bl	80061c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a90:	f001 fd2a 	bl	80024e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <SystemClock_Config+0xc8>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <SystemClock_Config+0xc8>)
 8000a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <SystemClock_Config+0xc8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <SystemClock_Config+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <SystemClock_Config+0xcc>)
 8000ab6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <SystemClock_Config+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000acc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ad6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000adc:	2304      	movs	r3, #4
 8000ade:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ae0:	2348      	movs	r3, #72	; 0x48
 8000ae2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fd09 	bl	8002508 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000afc:	f000 f81e 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b00:	230f      	movs	r3, #15
 8000b02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2302      	movs	r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 ff97 	bl	8002a50 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b28:	f000 f808 	bl	8000b3c <Error_Handler>
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3750      	adds	r7, #80	; 0x50
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>

08000b46 <motor_init>:
#include "motor.h"

void motor_init(struct Motor* motor,TIM_HandleTypeDef* htim, uint32_t PWM_CHANNEL, GPIO_TypeDef* FORWARD_PORT, GPIO_TypeDef* BACKWARD_PORT, uint16_t FORWARD_PIN, uint16_t BACKWARD_PIN){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	60f8      	str	r0, [r7, #12]
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	603b      	str	r3, [r7, #0]
	static _Bool tim = 0;
	motor->duty = 0;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
	motor->htim = htim;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	605a      	str	r2, [r3, #4]
	motor->FORWARD_PORT = FORWARD_PORT;
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	609a      	str	r2, [r3, #8]
	motor->BACKWARD_PORT = BACKWARD_PORT;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	60da      	str	r2, [r3, #12]
	motor->FORWARD_PIN = FORWARD_PIN;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	8bba      	ldrh	r2, [r7, #28]
 8000b78:	821a      	strh	r2, [r3, #16]
	motor->BACKWARD_PIN = BACKWARD_PIN;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	8c3a      	ldrh	r2, [r7, #32]
 8000b7e:	825a      	strh	r2, [r3, #18]
//	{
//		HAL_TIM_Base_Start_IT(motor->htim);
//		tim = !tim;
//	}

	HAL_TIM_PWM_Start(motor->htim, PWM_CHANNEL);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fea0 	bl	80038cc <HAL_TIM_PWM_Start>

	motor_stop(motor);
 8000b8c:	68f8      	ldr	r0, [r7, #12]
 8000b8e:	f000 f832 	bl	8000bf6 <motor_stop>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <motor_set_direction>:
	motor->duty = duty;
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, abs(duty));
}

void motor_set_direction(struct Motor* motor, _Bool direction)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	70fb      	strb	r3, [r7, #3]
	if(direction)
 8000ba6:	78fb      	ldrb	r3, [r7, #3]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d010      	beq.n	8000bce <motor_set_direction+0x34>
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6898      	ldr	r0, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	8a1b      	ldrh	r3, [r3, #16]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 fb34 	bl	8002224 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 1);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68d8      	ldr	r0, [r3, #12]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	8a5b      	ldrh	r3, [r3, #18]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f001 fb2c 	bl	8002224 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 1);
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
	}
}
 8000bcc:	e00f      	b.n	8000bee <motor_set_direction+0x54>
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6898      	ldr	r0, [r3, #8]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	8a1b      	ldrh	r3, [r3, #16]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f001 fb23 	bl	8002224 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	68d8      	ldr	r0, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	8a5b      	ldrh	r3, [r3, #18]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f001 fb1b 	bl	8002224 <HAL_GPIO_WritePin>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <motor_stop>:

void motor_stop(struct Motor* motor)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6898      	ldr	r0, [r3, #8]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	8a1b      	ldrh	r3, [r3, #16]
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f001 fb0b 	bl	8002224 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68d8      	ldr	r0, [r3, #12]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8a5b      	ldrh	r3, [r3, #18]
 8000c16:	2200      	movs	r2, #0
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f001 fb03 	bl	8002224 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d105      	bne.n	8000c32 <motor_stop+0x3c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c30:	e02c      	b.n	8000c8c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d105      	bne.n	8000c46 <motor_stop+0x50>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2300      	movs	r3, #0
 8000c42:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c44:	e022      	b.n	8000c8c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d105      	bne.n	8000c5a <motor_stop+0x64>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2300      	movs	r3, #0
 8000c56:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000c58:	e018      	b.n	8000c8c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b0c      	cmp	r3, #12
 8000c60:	d105      	bne.n	8000c6e <motor_stop+0x78>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c6c:	e00e      	b.n	8000c8c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d105      	bne.n	8000c82 <motor_stop+0x8c>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c80:	e004      	b.n	8000c8c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <motor_move>:

void motor_move(struct Motor* motor[], float duty)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	ed87 0a00 	vstr	s0, [r7]
	for(int i = 0; i < sizeof(motor)/sizeof(motor[0]); i++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	e245      	b.n	8001132 <motor_move+0x49e>
	{
		motor[i]->duty = duty;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	615a      	str	r2, [r3, #20]
		if(motor[i]->duty < 0)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	f140 80c6 	bpl.w	8000e5a <motor_move+0x1c6>
		{
			motor_set_direction(motor[i], 1);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff5d 	bl	8000b9a <motor_set_direction>
			__HAL_TIM_SET_COMPARE(motor[i]->htim, motor[i]->PWM_CHANNEL, abs(motor[i]->duty));
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d118      	bne.n	8000d22 <motor_move+0x8e>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	edd3 7a05 	vldr	s15, [r3, #20]
 8000cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d02:	ee17 3a90 	vmov	r3, s15
 8000d06:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000d0a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d20:	e09b      	b.n	8000e5a <motor_move+0x1c6>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d118      	bne.n	8000d64 <motor_move+0xd0>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d44:	ee17 3a90 	vmov	r3, s15
 8000d48:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000d4c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	4413      	add	r3, r2
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	6393      	str	r3, [r2, #56]	; 0x38
 8000d62:	e07a      	b.n	8000e5a <motor_move+0x1c6>
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d118      	bne.n	8000da6 <motor_move+0x112>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d86:	ee17 3a90 	vmov	r3, s15
 8000d8a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000d8e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	460b      	mov	r3, r1
 8000da2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000da4:	e059      	b.n	8000e5a <motor_move+0x1c6>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b0c      	cmp	r3, #12
 8000db4:	d118      	bne.n	8000de8 <motor_move+0x154>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc8:	ee17 3a90 	vmov	r3, s15
 8000dcc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000dd0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	460b      	mov	r3, r1
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	e038      	b.n	8000e5a <motor_move+0x1c6>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b10      	cmp	r3, #16
 8000df6:	d118      	bne.n	8000e2a <motor_move+0x196>
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0a:	ee17 3a90 	vmov	r3, s15
 8000e0e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e12:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	460b      	mov	r3, r1
 8000e26:	6593      	str	r3, [r2, #88]	; 0x58
 8000e28:	e017      	b.n	8000e5a <motor_move+0x1c6>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 3a90 	vmov	r3, s15
 8000e40:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8000e44:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4413      	add	r3, r2
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	460b      	mov	r3, r1
 8000e58:	65d3      	str	r3, [r2, #92]	; 0x5c
		}
		if(motor[i]->duty > 0)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e70:	f340 80a8 	ble.w	8000fc4 <motor_move+0x330>
		{
			motor_set_direction(motor[i], 0);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe8a 	bl	8000b9a <motor_set_direction>
			__HAL_TIM_SET_COMPARE(motor[i]->htim, motor[i]->PWM_CHANNEL, motor[i]->duty);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d113      	bne.n	8000ebe <motor_move+0x22a>
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eb6:	ee17 2a90 	vmov	r2, s15
 8000eba:	635a      	str	r2, [r3, #52]	; 0x34
 8000ebc:	e082      	b.n	8000fc4 <motor_move+0x330>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d113      	bne.n	8000ef6 <motor_move+0x262>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	ee17 3a90 	vmov	r3, s15
 8000ef2:	6393      	str	r3, [r2, #56]	; 0x38
 8000ef4:	e066      	b.n	8000fc4 <motor_move+0x330>
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d113      	bne.n	8000f2e <motor_move+0x29a>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000f2c:	e04a      	b.n	8000fc4 <motor_move+0x330>
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b0c      	cmp	r3, #12
 8000f3c:	d113      	bne.n	8000f66 <motor_move+0x2d2>
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5e:	ee17 3a90 	vmov	r3, s15
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	e02e      	b.n	8000fc4 <motor_move+0x330>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d113      	bne.n	8000f9e <motor_move+0x30a>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f96:	ee17 3a90 	vmov	r3, s15
 8000f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9c:	e012      	b.n	8000fc4 <motor_move+0x330>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	65d3      	str	r3, [r2, #92]	; 0x5c
		}
		if(motor[i]->duty == 0)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	f040 80a7 	bne.w	800112c <motor_move+0x498>
		{
			motor_stop(motor[i]);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe04 	bl	8000bf6 <motor_stop>
			__HAL_TIM_SET_COMPARE(motor[i]->htim, motor[i]->PWM_CHANNEL, motor[i]->duty);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d113      	bne.n	8001026 <motor_move+0x392>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	edd3 7a05 	vldr	s15, [r3, #20]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4413      	add	r3, r2
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101e:	ee17 2a90 	vmov	r2, s15
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
 8001024:	e082      	b.n	800112c <motor_move+0x498>
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d113      	bne.n	800105e <motor_move+0x3ca>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	edd3 7a05 	vldr	s15, [r3, #20]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001056:	ee17 3a90 	vmov	r3, s15
 800105a:	6393      	str	r3, [r2, #56]	; 0x38
 800105c:	e066      	b.n	800112c <motor_move+0x498>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b08      	cmp	r3, #8
 800106c:	d113      	bne.n	8001096 <motor_move+0x402>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	edd3 7a05 	vldr	s15, [r3, #20]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108e:	ee17 3a90 	vmov	r3, s15
 8001092:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001094:	e04a      	b.n	800112c <motor_move+0x498>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d113      	bne.n	80010ce <motor_move+0x43a>
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	e02e      	b.n	800112c <motor_move+0x498>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b10      	cmp	r3, #16
 80010dc:	d113      	bne.n	8001106 <motor_move+0x472>
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010fe:	ee17 3a90 	vmov	r3, s15
 8001102:	6593      	str	r3, [r2, #88]	; 0x58
 8001104:	e012      	b.n	800112c <motor_move+0x498>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	edd3 7a05 	vldr	s15, [r3, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	ee17 3a90 	vmov	r3, s15
 800112a:	65d3      	str	r3, [r2, #92]	; 0x5c
	for(int i = 0; i < sizeof(motor)/sizeof(motor[0]); i++)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	f43f adb6 	beq.w	8000ca6 <motor_move+0x12>
		}
	}
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <robot_init>:
#include "robot.h"

void robot_init(struct Robot* robot, float position, float orientation){
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001150:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->previous_position = position;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	605a      	str	r2, [r3, #4]
	robot->position = position;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	601a      	str	r2, [r3, #0]
	robot->orientation = orientation;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	609a      	str	r2, [r3, #8]
	robot->previous_orientation = orientation;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	60da      	str	r2, [r3, #12]
	robot->linear_velocity = 0;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
	robot->angular_velocity = 0;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <robot_linear_update>:

void robot_linear_update(struct Robot* robot, float measurement, float time){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	ed87 0a02 	vstr	s0, [r7, #8]
 8001194:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->position = measurement;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	601a      	str	r2, [r3, #0]
	robot->linear_velocity = (robot->position - robot->previous_position )/time;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	ed93 7a00 	vldr	s14, [r3]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80011aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80011b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	edc3 7a04 	vstr	s15, [r3, #16]
	robot->previous_position = robot->position;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	605a      	str	r2, [r3, #4]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <robot_set_end_position>:
	robot->angular_velocity = (robot->previous_orientation - robot->orientation)/time;
	robot->previous_orientation = robot->orientation;
}

void robot_set_end_position(struct Robot* robot, float end_position)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	ed87 0a00 	vstr	s0, [r7]
	robot->end_position = end_position;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <robot_error>:

float robot_error(struct Robot* robot)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
	return robot->end_position - robot->position;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	ed93 7a06 	vldr	s14, [r3, #24]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x44>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_MspInit+0x44>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_MspInit+0x44>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x44>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x44>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x44>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 fcba 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <TIM1_CC_IRQHandler+0x10>)
 80012b6:	f002 fdb5 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000009c 	.word	0x2000009c

080012c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <TIM3_IRQHandler+0x10>)
 80012ca:	f002 fdab 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000134 	.word	0x20000134

080012d8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <TIM4_IRQHandler+0x10>)
 80012de:	f002 fda1 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000180 	.word	0x20000180

080012ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <SystemInit+0x20>)
 80012f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <SystemInit+0x20>)
 80012f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b090      	sub	sp, #64	; 0x40
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <MX_TIM1_Init+0x140>)
 800134e:	4a41      	ldr	r2, [pc, #260]	; (8001454 <MX_TIM1_Init+0x144>)
 8001350:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <MX_TIM1_Init+0x140>)
 8001354:	2247      	movs	r2, #71	; 0x47
 8001356:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <MX_TIM1_Init+0x140>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800135e:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <MX_TIM1_Init+0x140>)
 8001360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001364:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <MX_TIM1_Init+0x140>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_TIM1_Init+0x140>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001372:	4b37      	ldr	r3, [pc, #220]	; (8001450 <MX_TIM1_Init+0x140>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001378:	4835      	ldr	r0, [pc, #212]	; (8001450 <MX_TIM1_Init+0x140>)
 800137a:	f002 f97f 	bl	800367c <HAL_TIM_Base_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001384:	f7ff fbda 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800138e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001392:	4619      	mov	r1, r3
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <MX_TIM1_Init+0x140>)
 8001396:	f003 f815 	bl	80043c4 <HAL_TIM_ConfigClockSource>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013a0:	f7ff fbcc 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <MX_TIM1_Init+0x140>)
 80013a6:	f002 fb8b 	bl	8003ac0 <HAL_TIM_IC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80013b0:	f7ff fbc4 	bl	8000b3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80013b4:	2304      	movs	r3, #4
 80013b6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80013b8:	2350      	movs	r3, #80	; 0x50
 80013ba:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4820      	ldr	r0, [pc, #128]	; (8001450 <MX_TIM1_Init+0x140>)
 80013d0:	f003 f8c2 	bl	8004558 <HAL_TIM_SlaveConfigSynchro>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80013da:	f7ff fbaf 	bl	8000b3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013e2:	2301      	movs	r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4816      	ldr	r0, [pc, #88]	; (8001450 <MX_TIM1_Init+0x140>)
 80013f8:	f002 fe33 	bl	8004062 <HAL_TIM_IC_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001402:	f7ff fb9b 	bl	8000b3c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001406:	2302      	movs	r3, #2
 8001408:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800140a:	2302      	movs	r3, #2
 800140c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2204      	movs	r2, #4
 8001414:	4619      	mov	r1, r3
 8001416:	480e      	ldr	r0, [pc, #56]	; (8001450 <MX_TIM1_Init+0x140>)
 8001418:	f002 fe23 	bl	8004062 <HAL_TIM_IC_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001422:	f7ff fb8b 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001432:	463b      	mov	r3, r7
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_TIM1_Init+0x140>)
 8001438:	f003 feae 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001442:	f7ff fb7b 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3740      	adds	r7, #64	; 0x40
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000009c 	.word	0x2000009c
 8001454:	40010000 	.word	0x40010000

08001458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	463b      	mov	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_TIM2_Init+0xb0>)
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MX_TIM2_Init+0xb0>)
 8001486:	2247      	movs	r2, #71	; 0x47
 8001488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_TIM2_Init+0xb0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_TIM2_Init+0xb0>)
 8001492:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_TIM2_Init+0xb0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM2_Init+0xb0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <MX_TIM2_Init+0xb0>)
 80014a6:	f002 f9b9 	bl	800381c <HAL_TIM_PWM_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f7ff fb44 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_TIM2_Init+0xb0>)
 80014c4:	f003 fe68 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80014ce:	f7ff fb35 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80014d6:	230a      	movs	r3, #10
 80014d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014e2:	463b      	mov	r3, r7
 80014e4:	2208      	movs	r2, #8
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM2_Init+0xb0>)
 80014ea:	f002 fe57 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80014f4:	f7ff fb22 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM2_Init+0xb0>)
 80014fa:	f000 f979 	bl	80017f0 <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3728      	adds	r7, #40	; 0x28
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200000e8 	.word	0x200000e8

0800150c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
 8001538:	611a      	str	r2, [r3, #16]
 800153a:	615a      	str	r2, [r3, #20]
 800153c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800153e:	4b32      	ldr	r3, [pc, #200]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001540:	4a32      	ldr	r2, [pc, #200]	; (800160c <MX_TIM3_Init+0x100>)
 8001542:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001546:	2247      	movs	r2, #71	; 0x47
 8001548:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <MX_TIM3_Init+0xfc>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001550:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001552:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <MX_TIM3_Init+0xfc>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001564:	4828      	ldr	r0, [pc, #160]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001566:	f002 f889 	bl	800367c <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001570:	f7ff fae4 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4619      	mov	r1, r3
 8001580:	4821      	ldr	r0, [pc, #132]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001582:	f002 ff1f 	bl	80043c4 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800158c:	f7ff fad6 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <MX_TIM3_Init+0xfc>)
 8001592:	f002 f943 	bl	800381c <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800159c:	f7ff face 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4816      	ldr	r0, [pc, #88]	; (8001608 <MX_TIM3_Init+0xfc>)
 80015b0:	f003 fdf2 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015ba:	f7ff fabf 	bl	8000b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015be:	2360      	movs	r3, #96	; 0x60
 80015c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM3_Init+0xfc>)
 80015d6:	f002 fde1 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80015e0:	f7ff faac 	bl	8000b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	2204      	movs	r2, #4
 80015e8:	4619      	mov	r1, r3
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM3_Init+0xfc>)
 80015ec:	f002 fdd6 	bl	800419c <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80015f6:	f7ff faa1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015fa:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM3_Init+0xfc>)
 80015fc:	f000 f8f8 	bl	80017f0 <HAL_TIM_MspPostInit>

}
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000134 	.word	0x20000134
 800160c:	40000400 	.word	0x40000400

08001610 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <MX_TIM4_Init+0x98>)
 8001632:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001636:	2247      	movs	r2, #71	; 0x47
 8001638:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM4_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001640:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001642:	f242 720f 	movw	r2, #9999	; 0x270f
 8001646:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <MX_TIM4_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001654:	4813      	ldr	r0, [pc, #76]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001656:	f002 f811 	bl	800367c <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001660:	f7ff fa6c 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_TIM4_Init+0x94>)
 8001672:	f002 fea7 	bl	80043c4 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800167c:	f7ff fa5e 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	; (80016a4 <MX_TIM4_Init+0x94>)
 800168e:	f003 fd83 	bl	8005198 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001698:	f7ff fa50 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000180 	.word	0x20000180
 80016a8:	40000800 	.word	0x40000800

080016ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08c      	sub	sp, #48	; 0x30
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a35      	ldr	r2, [pc, #212]	; (80017a0 <HAL_TIM_Base_MspInit+0xf4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d131      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
 80016e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016ec:	f043 0310 	orr.w	r3, r3, #16
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0310 	and.w	r3, r3, #16
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001710:	2301      	movs	r3, #1
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4823      	ldr	r0, [pc, #140]	; (80017a8 <HAL_TIM_Base_MspInit+0xfc>)
 800171c:	f000 fbd6 	bl	8001ecc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	201b      	movs	r0, #27
 8001726:	f000 fb9a 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800172a:	201b      	movs	r0, #27
 800172c:	f000 fbb3 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001730:	e032      	b.n	8001798 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a1d      	ldr	r2, [pc, #116]	; (80017ac <HAL_TIM_Base_MspInit+0x100>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d114      	bne.n	8001766 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	201d      	movs	r0, #29
 800175a:	f000 fb80 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800175e:	201d      	movs	r0, #29
 8001760:	f000 fb99 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001764:	e018      	b.n	8001798 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM4)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_TIM_Base_MspInit+0x104>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d113      	bne.n	8001798 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6413      	str	r3, [r2, #64]	; 0x40
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_TIM_Base_MspInit+0xf8>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	2100      	movs	r1, #0
 800178c:	201e      	movs	r0, #30
 800178e:	f000 fb66 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001792:	201e      	movs	r0, #30
 8001794:	f000 fb7f 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 8001798:	bf00      	nop
 800179a:	3730      	adds	r7, #48	; 0x30
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40000400 	.word	0x40000400
 80017b0:	40000800 	.word	0x40000800

080017b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d10b      	bne.n	80017de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_PWM_MspInit+0x38>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_TIM_PWM_MspInit+0x38>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6413      	str	r3, [r2, #64]	; 0x40
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_TIM_PWM_MspInit+0x38>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001810:	d11d      	bne.n	800184e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800182a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800183c:	2301      	movs	r3, #1
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4823      	ldr	r0, [pc, #140]	; (80018d4 <HAL_TIM_MspPostInit+0xe4>)
 8001848:	f000 fb40 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800184c:	e03c      	b.n	80018c8 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_TIM_MspPostInit+0xe8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d137      	bne.n	80018c8 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001858:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a1c      	ldr	r2, [pc, #112]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_TIM_MspPostInit+0xe0>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001898:	2302      	movs	r3, #2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	480e      	ldr	r0, [pc, #56]	; (80018dc <HAL_TIM_MspPostInit+0xec>)
 80018a4:	f000 fb12 	bl	8001ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b8:	2302      	movs	r3, #2
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	; (80018e0 <HAL_TIM_MspPostInit+0xf0>)
 80018c4:	f000 fb02 	bl	8001ecc <HAL_GPIO_Init>
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020800 	.word	0x40020800

080018e4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <MX_USART3_UART_Init+0x5c>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_USART3_UART_Init+0x58>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_USART3_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001928:	f003 fce2 	bl	80052f0 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001932:	f7ff f903 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200001cc 	.word	0x200001cc
 8001940:	40004800 	.word	0x40004800

08001944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0aa      	sub	sp, #168	; 0xa8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	2284      	movs	r2, #132	; 0x84
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f004 fc2d 	bl	80061c4 <memset>
  if(uartHandle->Instance==USART3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a22      	ldr	r2, [pc, #136]	; (80019f8 <HAL_UART_MspInit+0xb4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d13c      	bne.n	80019ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001978:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800197a:	2300      	movs	r3, #0
 800197c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fa8a 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800198e:	f7ff f8d5 	bl	8000b3c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HAL_UART_MspInit+0xb8>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a19      	ldr	r2, [pc, #100]	; (80019fc <HAL_UART_MspInit+0xb8>)
 8001998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <HAL_UART_MspInit+0xb8>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_UART_MspInit+0xb8>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a13      	ldr	r2, [pc, #76]	; (80019fc <HAL_UART_MspInit+0xb8>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <HAL_UART_MspInit+0xb8>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80019c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019dc:	2307      	movs	r3, #7
 80019de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <HAL_UART_MspInit+0xbc>)
 80019ea:	f000 fa6f 	bl	8001ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019ee:	bf00      	nop
 80019f0:	37a8      	adds	r7, #168	; 0xa8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40004800 	.word	0x40004800
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40020c00 	.word	0x40020c00

08001a04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a12:	2206      	movs	r2, #6
 8001a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a18:	2202      	movs	r2, #2
 8001a1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a24:	2202      	movs	r2, #2
 8001a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a48:	f000 fc05 	bl	8002256 <HAL_PCD_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a52:	f7ff f873 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000254 	.word	0x20000254

08001a60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0ac      	sub	sp, #176	; 0xb0
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0318 	add.w	r3, r7, #24
 8001a7c:	2284      	movs	r2, #132	; 0x84
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f004 fb9f 	bl	80061c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d159      	bne.n	8001b44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 f9fb 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001aac:	f7ff f846 	bl	8000b3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a25      	ldr	r2, [pc, #148]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ac8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4818      	ldr	r0, [pc, #96]	; (8001b50 <HAL_PCD_MspInit+0xf0>)
 8001af0:	f000 f9ec 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <HAL_PCD_MspInit+0xf0>)
 8001b10:	f000 f9dc 	bl	8001ecc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1e:	6353      	str	r3, [r2, #52]	; 0x34
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b36:	6453      	str	r3, [r2, #68]	; 0x44
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_PCD_MspInit+0xec>)
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b44:	bf00      	nop
 8001b46:	37b0      	adds	r7, #176	; 0xb0
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff fbb5 	bl	80012ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 fafb 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7fe fefd 	bl	8000984 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b98:	08006214 	.word	0x08006214
  ldr r2, =_sbss
 8001b9c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ba0:	20000760 	.word	0x20000760

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>

08001ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f000 f94c 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f000 f805 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fb2d 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f967 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f000 f92f 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	20000004 	.word	0x20000004

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008
 8001c44:	2000075c 	.word	0x2000075c

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000075c 	.word	0x2000075c

08001c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c68:	f7ff ffee 	bl	8001c48 <HAL_GetTick>
 8001c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c78:	d005      	beq.n	8001c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_Delay+0x44>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c86:	bf00      	nop
 8001c88:	f7ff ffde 	bl	8001c48 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d8f7      	bhi.n	8001c88 <HAL_Delay+0x28>
  {
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	05fa0000 	.word	0x05fa0000

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	; (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff29 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff3e 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff8e 	bl	8001d9c <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5d 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff31 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	e175      	b.n	80021d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	f040 8164 	bne.w	80021d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d005      	beq.n	8001f22 <HAL_GPIO_Init+0x56>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d130      	bne.n	8001f84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	091b      	lsrs	r3, r3, #4
 8001f6e:	f003 0201 	and.w	r2, r3, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d017      	beq.n	8001fc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d123      	bne.n	8002014 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	08da      	lsrs	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3208      	adds	r2, #8
 8001fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	08da      	lsrs	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3208      	adds	r2, #8
 800200e:	69b9      	ldr	r1, [r7, #24]
 8002010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80be 	beq.w	80021d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002056:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a65      	ldr	r2, [pc, #404]	; (80021f0 <HAL_GPIO_Init+0x324>)
 800205c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b63      	ldr	r3, [pc, #396]	; (80021f0 <HAL_GPIO_Init+0x324>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800206e:	4a61      	ldr	r2, [pc, #388]	; (80021f4 <HAL_GPIO_Init+0x328>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_GPIO_Init+0x32c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d037      	beq.n	800210a <HAL_GPIO_Init+0x23e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_GPIO_Init+0x330>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_GPIO_Init+0x23a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a56      	ldr	r2, [pc, #344]	; (8002200 <HAL_GPIO_Init+0x334>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <HAL_GPIO_Init+0x236>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a55      	ldr	r2, [pc, #340]	; (8002204 <HAL_GPIO_Init+0x338>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x232>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a54      	ldr	r2, [pc, #336]	; (8002208 <HAL_GPIO_Init+0x33c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x22e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a53      	ldr	r2, [pc, #332]	; (800220c <HAL_GPIO_Init+0x340>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x22a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a52      	ldr	r2, [pc, #328]	; (8002210 <HAL_GPIO_Init+0x344>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x226>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x348>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x222>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x34c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x21e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x350>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x21a>
 80020e2:	2309      	movs	r3, #9
 80020e4:	e012      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020e6:	230a      	movs	r3, #10
 80020e8:	e010      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e00e      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x240>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x240>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x240>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800211c:	4935      	ldr	r1, [pc, #212]	; (80021f4 <HAL_GPIO_Init+0x328>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_GPIO_Init+0x354>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800214e:	4a34      	ldr	r2, [pc, #208]	; (8002220 <HAL_GPIO_Init+0x354>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002154:	4b32      	ldr	r3, [pc, #200]	; (8002220 <HAL_GPIO_Init+0x354>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002178:	4a29      	ldr	r2, [pc, #164]	; (8002220 <HAL_GPIO_Init+0x354>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_GPIO_Init+0x354>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_GPIO_Init+0x354>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_GPIO_Init+0x354>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_GPIO_Init+0x354>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae86 	bls.w	8001eec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40013800 	.word	0x40013800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020400 	.word	0x40020400
 8002200:	40020800 	.word	0x40020800
 8002204:	40020c00 	.word	0x40020c00
 8002208:	40021000 	.word	0x40021000
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800
 8002214:	40021c00 	.word	0x40021c00
 8002218:	40022000 	.word	0x40022000
 800221c:	40022400 	.word	0x40022400
 8002220:	40013c00 	.word	0x40013c00

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002258:	b08f      	sub	sp, #60	; 0x3c
 800225a:	af0a      	add	r7, sp, #40	; 0x28
 800225c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e116      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fbec 	bl	8001a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fccc 	bl	8005c44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	687e      	ldr	r6, [r7, #4]
 80022b4:	466d      	mov	r5, sp
 80022b6:	f106 0410 	add.w	r4, r6, #16
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ca:	1d33      	adds	r3, r6, #4
 80022cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ce:	6838      	ldr	r0, [r7, #0]
 80022d0:	f003 fc60 	bl	8005b94 <USB_CoreInit>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2202      	movs	r2, #2
 80022de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0d7      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fcba 	bl	8005c66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	e04a      	b.n	800238e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	333c      	adds	r3, #60	; 0x3c
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b298      	uxth	r0, r3
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	3344      	adds	r3, #68	; 0x44
 8002334:	4602      	mov	r2, r0
 8002336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	3340      	adds	r3, #64	; 0x40
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3348      	adds	r3, #72	; 0x48
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334c      	adds	r3, #76	; 0x4c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3354      	adds	r3, #84	; 0x54
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3af      	bcc.n	80022f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e044      	b.n	8002428 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b5      	bcc.n	800239e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	687e      	ldr	r6, [r7, #4]
 800243a:	466d      	mov	r5, sp
 800243c:	f106 0410 	add.w	r4, r6, #16
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002448:	e894 0003 	ldmia.w	r4, {r0, r1}
 800244c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002450:	1d33      	adds	r3, r6, #4
 8002452:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f003 fc53 	bl	8005d00 <USB_DevInit>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e014      	b.n	8002496 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f80b 	bl	80024a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fe11 	bl	80060b6 <USB_DevDisconnect>

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080024a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	10000003 	.word	0x10000003

080024e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ec:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e291      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8087 	beq.w	800263a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800252c:	4b96      	ldr	r3, [pc, #600]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d112      	bne.n	800256a <HAL_RCC_OscConfig+0x62>
 8002544:	4b90      	ldr	r3, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	4b8d      	ldr	r3, [pc, #564]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06c      	beq.n	8002638 <HAL_RCC_OscConfig+0x130>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d168      	bne.n	8002638 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e26b      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x7a>
 8002574:	4b84      	ldr	r3, [pc, #528]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a83      	ldr	r2, [pc, #524]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e02e      	b.n	80025e0 <HAL_RCC_OscConfig+0xd8>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x9c>
 800258a:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7e      	ldr	r2, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7b      	ldr	r2, [pc, #492]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xd8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0xc0>
 80025ae:	4b76      	ldr	r3, [pc, #472]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a75      	ldr	r2, [pc, #468]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b73      	ldr	r3, [pc, #460]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a72      	ldr	r2, [pc, #456]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xd8>
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6e      	ldr	r2, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6b      	ldr	r2, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7ff fb2e 	bl	8001c48 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff fb2a 	bl	8001c48 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e21f      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b61      	ldr	r3, [pc, #388]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe8>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7ff fb1a 	bl	8001c48 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7ff fb16 	bl	8001c48 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e20b      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b57      	ldr	r3, [pc, #348]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x110>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d069      	beq.n	800271a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002652:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x190>
 800265e:	4b4a      	ldr	r3, [pc, #296]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x17a>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1df      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	493d      	ldr	r1, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e040      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d023      	beq.n	80026e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a38      	ldr	r2, [pc, #224]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026a6:	f043 0301 	orr.w	r3, r3, #1
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff facc 	bl	8001c48 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7ff fac8 	bl	8001c48 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1bd      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4929      	ldr	r1, [pc, #164]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
 80026e6:	e018      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a26      	ldr	r2, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7ff faa8 	bl	8001c48 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7ff faa4 	bl	8001c48 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e199      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d038      	beq.n	8002798 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7ff fa85 	bl	8001c48 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002742:	f7ff fa81 	bl	8001c48 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e176      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x23a>
 8002760:	e01a      	b.n	8002798 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_RCC_OscConfig+0x280>)
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7ff fa6b 	bl	8001c48 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002776:	f7ff fa67 	bl	8001c48 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d903      	bls.n	800278c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e15c      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
 8002788:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278c:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ee      	bne.n	8002776 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80a4 	beq.w	80028ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fa2f 	bl	8001c48 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7ff fa2b 	bl	8001c48 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e120      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x31a>
 8002814:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	; 0x70
 8002820:	e02d      	b.n	800287e <HAL_RCC_OscConfig+0x376>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x33c>
 800282a:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	e01c      	b.n	800287e <HAL_RCC_OscConfig+0x376>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_OscConfig+0x35e>
 800284c:	4b61      	ldr	r3, [pc, #388]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800284e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002850:	4a60      	ldr	r2, [pc, #384]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6713      	str	r3, [r2, #112]	; 0x70
 8002858:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a5d      	ldr	r2, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
 8002864:	e00b      	b.n	800287e <HAL_RCC_OscConfig+0x376>
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	4a5a      	ldr	r2, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6713      	str	r3, [r2, #112]	; 0x70
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d015      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7ff f9df 	bl	8001c48 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7ff f9db 	bl	8001c48 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0ce      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ee      	beq.n	800288e <HAL_RCC_OscConfig+0x386>
 80028b0:	e014      	b.n	80028dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7ff f9c9 	bl	8001c48 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7ff f9c5 	bl	8001c48 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ee      	bne.n	80028ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80a4 	beq.w	8002a40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d06b      	beq.n	80029dc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d149      	bne.n	80029a0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7ff f996 	bl	8001c48 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f992 	bl	8001c48 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e087      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	085b      	lsrs	r3, r3, #1
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4313      	orrs	r3, r2
 8002964:	4a1b      	ldr	r2, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800296a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7ff f966 	bl	8001c48 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7ff f962 	bl	8001c48 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e057      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x478>
 800299e:	e04f      	b.n	8002a40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0b      	ldr	r2, [pc, #44]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff f94c 	bl	8001c48 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f948 	bl	8001c48 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e03d      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_OscConfig+0x4cc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4ac>
 80029d2:	e035      	b.n	8002a40 <HAL_RCC_OscConfig+0x538>
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_RCC_OscConfig+0x544>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d028      	beq.n	8002a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d121      	bne.n	8002a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d11a      	bne.n	8002a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d111      	bne.n	8002a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d0      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d910      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a76:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 020f 	bic.w	r2, r3, #15
 8002a7e:	4965      	ldr	r1, [pc, #404]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0b8      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab0:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	494d      	ldr	r1, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d040      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d115      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e073      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b22:	4b3d      	ldr	r3, [pc, #244]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e06b      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f023 0203 	bic.w	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	4936      	ldr	r1, [pc, #216]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7ff f880 	bl	8001c48 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f7ff f87c 	bl	8001c48 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e053      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 020c 	and.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1eb      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b74:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 030f 	and.w	r3, r3, #15
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d210      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 020f 	bic.w	r2, r3, #15
 8002b8a:	4922      	ldr	r1, [pc, #136]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e032      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4916      	ldr	r1, [pc, #88]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be2:	f000 f821 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	490a      	ldr	r1, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x1cc>)
 8002bf4:	5ccb      	ldrb	r3, [r1, r3]
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1d0>)
 8002bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1d4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe ffdc 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	080061ec 	.word	0x080061ec
 8002c20:	20000000 	.word	0x20000000
 8002c24:	20000004 	.word	0x20000004

08002c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b094      	sub	sp, #80	; 0x50
 8002c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	647b      	str	r3, [r7, #68]	; 0x44
 8002c34:	2300      	movs	r3, #0
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c38:	2300      	movs	r3, #0
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c40:	4b79      	ldr	r3, [pc, #484]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d00d      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0x40>
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	f200 80e1 	bhi.w	8002e14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x34>
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c5a:	e0db      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c60:	e0db      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c62:	4b73      	ldr	r3, [pc, #460]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c66:	e0d8      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c68:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c70:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c72:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d063      	beq.n	8002d46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7e:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	2200      	movs	r2, #0
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 8002c92:	2300      	movs	r3, #0
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
 8002c96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	0159      	lsls	r1, r3, #5
 8002ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cac:	0150      	lsls	r0, r2, #5
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	1a51      	subs	r1, r2, r1
 8002cb6:	6139      	str	r1, [r7, #16]
 8002cb8:	4629      	mov	r1, r5
 8002cba:	eb63 0301 	sbc.w	r3, r3, r1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ccc:	4659      	mov	r1, fp
 8002cce:	018b      	lsls	r3, r1, #6
 8002cd0:	4651      	mov	r1, sl
 8002cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cd6:	4651      	mov	r1, sl
 8002cd8:	018a      	lsls	r2, r1, #6
 8002cda:	4651      	mov	r1, sl
 8002cdc:	ebb2 0801 	subs.w	r8, r2, r1
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cfa:	4690      	mov	r8, r2
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	eb18 0303 	adds.w	r3, r8, r3
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	462b      	mov	r3, r5
 8002d08:	eb49 0303 	adc.w	r3, r9, r3
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d1a:	4629      	mov	r1, r5
 8002d1c:	024b      	lsls	r3, r1, #9
 8002d1e:	4621      	mov	r1, r4
 8002d20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d24:	4621      	mov	r1, r4
 8002d26:	024a      	lsls	r2, r1, #9
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2e:	2200      	movs	r2, #0
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d38:	f7fd fa66 	bl	8000208 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4613      	mov	r3, r2
 8002d42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d44:	e058      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d46:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	099b      	lsrs	r3, r3, #6
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	4611      	mov	r1, r2
 8002d52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d60:	4642      	mov	r2, r8
 8002d62:	464b      	mov	r3, r9
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	0159      	lsls	r1, r3, #5
 8002d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d72:	0150      	lsls	r0, r2, #5
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d7e:	4649      	mov	r1, r9
 8002d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d98:	ebb2 040a 	subs.w	r4, r2, sl
 8002d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	00eb      	lsls	r3, r5, #3
 8002daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dae:	00e2      	lsls	r2, r4, #3
 8002db0:	4614      	mov	r4, r2
 8002db2:	461d      	mov	r5, r3
 8002db4:	4643      	mov	r3, r8
 8002db6:	18e3      	adds	r3, r4, r3
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	464b      	mov	r3, r9
 8002dbc:	eb45 0303 	adc.w	r3, r5, r3
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	028b      	lsls	r3, r1, #10
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd8:	4621      	mov	r1, r4
 8002dda:	028a      	lsls	r2, r1, #10
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	61fa      	str	r2, [r7, #28]
 8002de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dec:	f7fd fa0c 	bl	8000208 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e12:	e002      	b.n	8002e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3750      	adds	r7, #80	; 0x50
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	007a1200 	.word	0x007a1200

08002e34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000000 	.word	0x20000000

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a9b      	lsrs	r3, r3, #10
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	080061fc 	.word	0x080061fc

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e78:	f7ff ffdc 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0b5b      	lsrs	r3, r3, #13
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4903      	ldr	r1, [pc, #12]	; (8002e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40023800 	.word	0x40023800
 8002e98:	080061fc 	.word	0x080061fc

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec4:	4b69      	ldr	r3, [pc, #420]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	4a68      	ldr	r2, [pc, #416]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ece:	6093      	str	r3, [r2, #8]
 8002ed0:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed8:	4964      	ldr	r1, [pc, #400]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d017      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	4959      	ldr	r1, [pc, #356]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f14:	d101      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	494a      	ldr	r1, [pc, #296]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 808b 	beq.w	8003096 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fe50 	bl	8001c48 <HAL_GetTick>
 8002fa8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fac:	f7fe fe4c 	bl	8001c48 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e357      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d035      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d02e      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fe8:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003008:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800300a:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d114      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fe14 	bl	8001c48 <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fe10 	bl	8001c48 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e319      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003052:	d111      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003062:	400b      	ands	r3, r1
 8003064:	4901      	ldr	r1, [pc, #4]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
 800306a:	e00b      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
 8003074:	0ffffcff 	.word	0x0ffffcff
 8003078:	4baa      	ldr	r3, [pc, #680]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4aa9      	ldr	r2, [pc, #676]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800307e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003082:	6093      	str	r3, [r2, #8]
 8003084:	4ba7      	ldr	r3, [pc, #668]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003086:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	49a4      	ldr	r1, [pc, #656]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003092:	4313      	orrs	r3, r2
 8003094:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030a2:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	4a9e      	ldr	r2, [pc, #632]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030b2:	4b9c      	ldr	r3, [pc, #624]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	4999      	ldr	r1, [pc, #612]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030d0:	4b94      	ldr	r3, [pc, #592]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030de:	4991      	ldr	r1, [pc, #580]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030f2:	4b8c      	ldr	r3, [pc, #560]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	4988      	ldr	r1, [pc, #544]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003114:	4b83      	ldr	r3, [pc, #524]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	4980      	ldr	r1, [pc, #512]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003136:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4977      	ldr	r1, [pc, #476]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003158:	4b72      	ldr	r3, [pc, #456]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	496f      	ldr	r1, [pc, #444]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f023 020c 	bic.w	r2, r3, #12
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	4966      	ldr	r1, [pc, #408]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800319c:	4b61      	ldr	r3, [pc, #388]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	495e      	ldr	r1, [pc, #376]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031be:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031cc:	4955      	ldr	r1, [pc, #340]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031e0:	4b50      	ldr	r3, [pc, #320]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	494d      	ldr	r1, [pc, #308]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003202:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003208:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003210:	4944      	ldr	r1, [pc, #272]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003224:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003232:	493c      	ldr	r1, [pc, #240]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003254:	4933      	ldr	r1, [pc, #204]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003276:	492b      	ldr	r1, [pc, #172]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d011      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003290:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003298:	4922      	ldr	r1, [pc, #136]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032a8:	d101      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ca:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	4912      	ldr	r1, [pc, #72]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fc:	4909      	ldr	r1, [pc, #36]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d006      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 80d9 	beq.w	80034ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003318:	4b02      	ldr	r3, [pc, #8]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a01      	ldr	r2, [pc, #4]	; (8003324 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003322:	e001      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003324:	40023800 	.word	0x40023800
 8003328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332a:	f7fe fc8d 	bl	8001c48 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003332:	f7fe fc89 	bl	8001c48 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e194      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003344:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f0      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d021      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11d      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003364:	4b64      	ldr	r3, [pc, #400]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	0c1b      	lsrs	r3, r3, #16
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003372:	4b61      	ldr	r3, [pc, #388]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003378:	0e1b      	lsrs	r3, r3, #24
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	019a      	lsls	r2, r3, #6
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	041b      	lsls	r3, r3, #16
 800338a:	431a      	orrs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	061b      	lsls	r3, r3, #24
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	071b      	lsls	r3, r3, #28
 8003398:	4957      	ldr	r1, [pc, #348]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b4:	d00a      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d02e      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ca:	d129      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033cc:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e0:	0f1b      	lsrs	r3, r3, #28
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	019a      	lsls	r2, r3, #6
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	041b      	lsls	r3, r3, #16
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	061b      	lsls	r3, r3, #24
 80033fa:	431a      	orrs	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	071b      	lsls	r3, r3, #28
 8003400:	493d      	ldr	r1, [pc, #244]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003408:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800340a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340e:	f023 021f 	bic.w	r2, r3, #31
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	3b01      	subs	r3, #1
 8003418:	4937      	ldr	r1, [pc, #220]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01d      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	0e1b      	lsrs	r3, r3, #24
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800343a:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003440:	0f1b      	lsrs	r3, r3, #28
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	019a      	lsls	r2, r3, #6
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	431a      	orrs	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	071b      	lsls	r3, r3, #28
 8003460:	4925      	ldr	r1, [pc, #148]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d011      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	019a      	lsls	r2, r3, #6
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	071b      	lsls	r3, r3, #28
 8003490:	4919      	ldr	r1, [pc, #100]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034a4:	f7fe fbd0 	bl	8001c48 <HAL_GetTick>
 80034a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ac:	f7fe fbcc 	bl	8001c48 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b64      	cmp	r3, #100	; 0x64
 80034b8:	d901      	bls.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0d7      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034be:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	f040 80cd 	bne.w	800366c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034de:	f7fe fbb3 	bl	8001c48 <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034e6:	f7fe fbaf 	bl	8001c48 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d903      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0ba      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034fc:	4b5e      	ldr	r3, [pc, #376]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003508:	d0ed      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02e      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d12a      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003532:	4b51      	ldr	r3, [pc, #324]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003540:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	0f1b      	lsrs	r3, r3, #28
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	4944      	ldr	r1, [pc, #272]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800356e:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	3b01      	subs	r3, #1
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	493d      	ldr	r1, [pc, #244]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d022      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359c:	d11d      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	0e1b      	lsrs	r3, r3, #24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	0f1b      	lsrs	r3, r3, #28
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	019a      	lsls	r2, r3, #6
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	061b      	lsls	r3, r3, #24
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	071b      	lsls	r3, r3, #28
 80035d2:	4929      	ldr	r1, [pc, #164]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d028      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035e6:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035f4:	4b20      	ldr	r3, [pc, #128]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	019a      	lsls	r2, r3, #6
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	4917      	ldr	r1, [pc, #92]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	4911      	ldr	r1, [pc, #68]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003638:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800363e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fe fb00 	bl	8001c48 <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800364a:	e008      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800364c:	f7fe fafc 	bl	8001c48 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e007      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800366a:	d1ef      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e049      	b.n	8003722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe f802 	bl	80016ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f000 fff0 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d001      	beq.n	8003744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e054      	b.n	80037ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <HAL_TIM_Base_Start_IT+0xd0>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d022      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d01d      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a22      	ldr	r2, [pc, #136]	; (8003800 <HAL_TIM_Base_Start_IT+0xd4>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d018      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a21      	ldr	r2, [pc, #132]	; (8003804 <HAL_TIM_Base_Start_IT+0xd8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d013      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <HAL_TIM_Base_Start_IT+0xdc>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1e      	ldr	r2, [pc, #120]	; (800380c <HAL_TIM_Base_Start_IT+0xe0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d009      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_TIM_Base_Start_IT+0xe4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d004      	beq.n	80037ac <HAL_TIM_Base_Start_IT+0x80>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_TIM_Base_Start_IT+0xe8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d115      	bne.n	80037d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	4b19      	ldr	r3, [pc, #100]	; (8003818 <HAL_TIM_Base_Start_IT+0xec>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b06      	cmp	r3, #6
 80037bc:	d015      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c4:	d011      	beq.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d6:	e008      	b.n	80037ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e000      	b.n	80037ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3714      	adds	r7, #20
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40000c00 	.word	0x40000c00
 800380c:	40010400 	.word	0x40010400
 8003810:	40014000 	.word	0x40014000
 8003814:	40001800 	.word	0x40001800
 8003818:	00010007 	.word	0x00010007

0800381c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e049      	b.n	80038c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd ffb6 	bl	80017b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 ff20 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d109      	bne.n	80038f0 <HAL_TIM_PWM_Start+0x24>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	e03c      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	d109      	bne.n	800390a <HAL_TIM_PWM_Start+0x3e>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b01      	cmp	r3, #1
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	e02f      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d109      	bne.n	8003924 <HAL_TIM_PWM_Start+0x58>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	bf14      	ite	ne
 800391c:	2301      	movne	r3, #1
 800391e:	2300      	moveq	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e022      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d109      	bne.n	800393e <HAL_TIM_PWM_Start+0x72>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b01      	cmp	r3, #1
 8003934:	bf14      	ite	ne
 8003936:	2301      	movne	r3, #1
 8003938:	2300      	moveq	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	e015      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b10      	cmp	r3, #16
 8003942:	d109      	bne.n	8003958 <HAL_TIM_PWM_Start+0x8c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	e008      	b.n	800396a <HAL_TIM_PWM_Start+0x9e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e092      	b.n	8003a98 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Start+0xb6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	e023      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start+0xc6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	e01b      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_PWM_Start+0xd6>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a0:	e013      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_PWM_Start+0xe6>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039b0:	e00b      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d104      	bne.n	80039c2 <HAL_TIM_PWM_Start+0xf6>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c0:	e003      	b.n	80039ca <HAL_TIM_PWM_Start+0xfe>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	6839      	ldr	r1, [r7, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fbba 	bl	800514c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_TIM_PWM_Start+0x1d4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_TIM_PWM_Start+0x120>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <HAL_TIM_PWM_Start+0x1d8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d101      	bne.n	80039f0 <HAL_TIM_PWM_Start+0x124>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_PWM_Start+0x126>
 80039f0:	2300      	movs	r3, #0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a25      	ldr	r2, [pc, #148]	; (8003aa0 <HAL_TIM_PWM_Start+0x1d4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d01d      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_TIM_PWM_Start+0x1dc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <HAL_TIM_PWM_Start+0x1e0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_TIM_PWM_Start+0x1e4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_TIM_PWM_Start+0x1d8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1b      	ldr	r2, [pc, #108]	; (8003ab4 <HAL_TIM_PWM_Start+0x1e8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start+0x18a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <HAL_TIM_PWM_Start+0x1ec>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d115      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <HAL_TIM_PWM_Start+0x1f0>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d015      	beq.n	8003a94 <HAL_TIM_PWM_Start+0x1c8>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d011      	beq.n	8003a94 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	e008      	b.n	8003a94 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e000      	b.n	8003a96 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40001800 	.word	0x40001800
 8003abc:	00010007 	.word	0x00010007

08003ac0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e049      	b.n	8003b66 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f841 	bl	8003b6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fdce 	bl	80046a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_IC_Start_IT+0x1e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	e023      	b.n	8003bea <HAL_TIM_IC_Start_IT+0x66>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_IC_Start_IT+0x2e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e01b      	b.n	8003bea <HAL_TIM_IC_Start_IT+0x66>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_IC_Start_IT+0x3e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e013      	b.n	8003bea <HAL_TIM_IC_Start_IT+0x66>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b0c      	cmp	r3, #12
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_IC_Start_IT+0x4e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	e00b      	b.n	8003bea <HAL_TIM_IC_Start_IT+0x66>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_IC_Start_IT+0x5e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	e003      	b.n	8003bea <HAL_TIM_IC_Start_IT+0x66>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_TIM_IC_Start_IT+0x78>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	e013      	b.n	8003c24 <HAL_TIM_IC_Start_IT+0xa0>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d104      	bne.n	8003c0c <HAL_TIM_IC_Start_IT+0x88>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	e00b      	b.n	8003c24 <HAL_TIM_IC_Start_IT+0xa0>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d104      	bne.n	8003c1c <HAL_TIM_IC_Start_IT+0x98>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e003      	b.n	8003c24 <HAL_TIM_IC_Start_IT+0xa0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d102      	bne.n	8003c32 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c2c:	7b7b      	ldrb	r3, [r7, #13]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e2      	b.n	8003dfc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d104      	bne.n	8003c46 <HAL_TIM_IC_Start_IT+0xc2>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c44:	e023      	b.n	8003c8e <HAL_TIM_IC_Start_IT+0x10a>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_IC_Start_IT+0xd2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	e01b      	b.n	8003c8e <HAL_TIM_IC_Start_IT+0x10a>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_IC_Start_IT+0xe2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	e013      	b.n	8003c8e <HAL_TIM_IC_Start_IT+0x10a>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_IC_Start_IT+0xf2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c74:	e00b      	b.n	8003c8e <HAL_TIM_IC_Start_IT+0x10a>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b10      	cmp	r3, #16
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_IC_Start_IT+0x102>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c84:	e003      	b.n	8003c8e <HAL_TIM_IC_Start_IT+0x10a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_IC_Start_IT+0x11a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9c:	e013      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x142>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d104      	bne.n	8003cae <HAL_TIM_IC_Start_IT+0x12a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cac:	e00b      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x142>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_IC_Start_IT+0x13a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cbc:	e003      	b.n	8003cc6 <HAL_TIM_IC_Start_IT+0x142>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0c      	cmp	r3, #12
 8003cca:	d841      	bhi.n	8003d50 <HAL_TIM_IC_Start_IT+0x1cc>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_TIM_IC_Start_IT+0x150>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d09 	.word	0x08003d09
 8003cd8:	08003d51 	.word	0x08003d51
 8003cdc:	08003d51 	.word	0x08003d51
 8003ce0:	08003d51 	.word	0x08003d51
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d51 	.word	0x08003d51
 8003cf0:	08003d51 	.word	0x08003d51
 8003cf4:	08003d2d 	.word	0x08003d2d
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d3f 	.word	0x08003d3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0202 	orr.w	r2, r2, #2
 8003d16:	60da      	str	r2, [r3, #12]
      break;
 8003d18:	e01d      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0204 	orr.w	r2, r2, #4
 8003d28:	60da      	str	r2, [r3, #12]
      break;
 8003d2a:	e014      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	60da      	str	r2, [r3, #12]
      break;
 8003d3c:	e00b      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0210 	orr.w	r2, r2, #16
 8003d4c:	60da      	str	r2, [r3, #12]
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      break;
 8003d54:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d14e      	bne.n	8003dfa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2201      	movs	r2, #1
 8003d62:	6839      	ldr	r1, [r7, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f9f1 	bl	800514c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_TIM_IC_Start_IT+0x280>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d01d      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <HAL_TIM_IC_Start_IT+0x284>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <HAL_TIM_IC_Start_IT+0x288>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <HAL_TIM_IC_Start_IT+0x28c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <HAL_TIM_IC_Start_IT+0x290>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1b      	ldr	r2, [pc, #108]	; (8003e18 <HAL_TIM_IC_Start_IT+0x294>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x236>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a19      	ldr	r2, [pc, #100]	; (8003e1c <HAL_TIM_IC_Start_IT+0x298>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d115      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_TIM_IC_Start_IT+0x29c>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d015      	beq.n	8003df8 <HAL_TIM_IC_Start_IT+0x274>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd2:	d011      	beq.n	8003df8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	e008      	b.n	8003df8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e000      	b.n	8003dfa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40000400 	.word	0x40000400
 8003e0c:	40000800 	.word	0x40000800
 8003e10:	40000c00 	.word	0x40000c00
 8003e14:	40010400 	.word	0x40010400
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40001800 	.word	0x40001800
 8003e20:	00010007 	.word	0x00010007

08003e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0202 	mvn.w	r2, #2
 8003e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fd26 	bl	80008b8 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fbf8 	bl	8004664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fbff 	bl	8004678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d122      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0204 	mvn.w	r2, #4
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fc fcfc 	bl	80008b8 <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fbce 	bl	8004664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fbd5 	bl	8004678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0208 	mvn.w	r2, #8
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fc fcd2 	bl	80008b8 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fba4 	bl	8004664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fbab 	bl	8004678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0210 	mvn.w	r2, #16
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2208      	movs	r2, #8
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fc fca8 	bl	80008b8 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fb7a 	bl	8004664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fb81 	bl	8004678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10e      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0201 	mvn.w	r2, #1
 8003fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fc fcba 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f001 f97a 	bl	80052c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe2:	d10e      	bne.n	8004002 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fee:	2b80      	cmp	r3, #128	; 0x80
 8003ff0:	d107      	bne.n	8004002 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f96d 	bl	80052dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d10e      	bne.n	800402e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d107      	bne.n	800402e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb2f 	bl	800468c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b20      	cmp	r3, #32
 800403a:	d10e      	bne.n	800405a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b20      	cmp	r3, #32
 8004048:	d107      	bne.n	800405a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f06f 0220 	mvn.w	r2, #32
 8004052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f001 f92d 	bl	80052b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	60f8      	str	r0, [r7, #12]
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_TIM_IC_ConfigChannel+0x1e>
 800407c:	2302      	movs	r3, #2
 800407e:	e088      	b.n	8004192 <HAL_TIM_IC_ConfigChannel+0x130>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11b      	bne.n	80040c6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f000 fe91 	bl	8004dc4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699a      	ldr	r2, [r3, #24]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 020c 	bic.w	r2, r2, #12
 80040b0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6999      	ldr	r1, [r3, #24]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
 80040c4:	e060      	b.n	8004188 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d11c      	bne.n	8004106 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f000 ff15 	bl	8004f0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6999      	ldr	r1, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	619a      	str	r2, [r3, #24]
 8004104:	e040      	b.n	8004188 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d11b      	bne.n	8004144 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f000 ff62 	bl	8004fe4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 020c 	bic.w	r2, r2, #12
 800412e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69d9      	ldr	r1, [r3, #28]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	61da      	str	r2, [r3, #28]
 8004142:	e021      	b.n	8004188 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	d11c      	bne.n	8004184 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f000 ff7f 	bl	800505c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	69da      	ldr	r2, [r3, #28]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800416c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69d9      	ldr	r1, [r3, #28]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	61da      	str	r2, [r3, #28]
 8004182:	e001      	b.n	8004188 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e0ff      	b.n	80043ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b14      	cmp	r3, #20
 80041c6:	f200 80f0 	bhi.w	80043aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041ca:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d0:	08004225 	.word	0x08004225
 80041d4:	080043ab 	.word	0x080043ab
 80041d8:	080043ab 	.word	0x080043ab
 80041dc:	080043ab 	.word	0x080043ab
 80041e0:	08004265 	.word	0x08004265
 80041e4:	080043ab 	.word	0x080043ab
 80041e8:	080043ab 	.word	0x080043ab
 80041ec:	080043ab 	.word	0x080043ab
 80041f0:	080042a7 	.word	0x080042a7
 80041f4:	080043ab 	.word	0x080043ab
 80041f8:	080043ab 	.word	0x080043ab
 80041fc:	080043ab 	.word	0x080043ab
 8004200:	080042e7 	.word	0x080042e7
 8004204:	080043ab 	.word	0x080043ab
 8004208:	080043ab 	.word	0x080043ab
 800420c:	080043ab 	.word	0x080043ab
 8004210:	08004329 	.word	0x08004329
 8004214:	080043ab 	.word	0x080043ab
 8004218:	080043ab 	.word	0x080043ab
 800421c:	080043ab 	.word	0x080043ab
 8004220:	08004369 	.word	0x08004369
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fad8 	bl	80047e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0208 	orr.w	r2, r2, #8
 800423e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0204 	bic.w	r2, r2, #4
 800424e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6999      	ldr	r1, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	619a      	str	r2, [r3, #24]
      break;
 8004262:	e0a5      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb2a 	bl	80048c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800427e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800428e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6999      	ldr	r1, [r3, #24]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	021a      	lsls	r2, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	619a      	str	r2, [r3, #24]
      break;
 80042a4:	e084      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb81 	bl	80049b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0208 	orr.w	r2, r2, #8
 80042c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0204 	bic.w	r2, r2, #4
 80042d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69d9      	ldr	r1, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	61da      	str	r2, [r3, #28]
      break;
 80042e4:	e064      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fbd7 	bl	8004aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69da      	ldr	r2, [r3, #28]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69d9      	ldr	r1, [r3, #28]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	021a      	lsls	r2, r3, #8
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	61da      	str	r2, [r3, #28]
      break;
 8004326:	e043      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fc0e 	bl	8004b50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0208 	orr.w	r2, r2, #8
 8004342:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0204 	bic.w	r2, r2, #4
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004366:	e023      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fc40 	bl	8004bf4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004382:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	021a      	lsls	r2, r3, #8
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	430a      	orrs	r2, r1
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043a8:	e002      	b.n	80043b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_TIM_ConfigClockSource+0x1c>
 80043dc:	2302      	movs	r3, #2
 80043de:	e0b4      	b.n	800454a <HAL_TIM_ConfigClockSource+0x186>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_TIM_ConfigClockSource+0x190>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004406:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004418:	d03e      	beq.n	8004498 <HAL_TIM_ConfigClockSource+0xd4>
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800441e:	f200 8087 	bhi.w	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004426:	f000 8086 	beq.w	8004536 <HAL_TIM_ConfigClockSource+0x172>
 800442a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442e:	d87f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d01a      	beq.n	800446a <HAL_TIM_ConfigClockSource+0xa6>
 8004434:	2b70      	cmp	r3, #112	; 0x70
 8004436:	d87b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004438:	2b60      	cmp	r3, #96	; 0x60
 800443a:	d050      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x11a>
 800443c:	2b60      	cmp	r3, #96	; 0x60
 800443e:	d877      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004440:	2b50      	cmp	r3, #80	; 0x50
 8004442:	d03c      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xfa>
 8004444:	2b50      	cmp	r3, #80	; 0x50
 8004446:	d873      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d058      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0x13a>
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d86f      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004450:	2b30      	cmp	r3, #48	; 0x30
 8004452:	d064      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004454:	2b30      	cmp	r3, #48	; 0x30
 8004456:	d86b      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004458:	2b20      	cmp	r3, #32
 800445a:	d060      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d867      	bhi.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05c      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004464:	2b10      	cmp	r3, #16
 8004466:	d05a      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x15a>
 8004468:	e062      	b.n	8004530 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6899      	ldr	r1, [r3, #8]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f000 fe47 	bl	800510c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800448c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
      break;
 8004496:	e04f      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6818      	ldr	r0, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f000 fe30 	bl	800510c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044ba:	609a      	str	r2, [r3, #8]
      break;
 80044bc:	e03c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fcee 	bl	8004eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2150      	movs	r1, #80	; 0x50
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fdfd 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e02c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6859      	ldr	r1, [r3, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f000 fd4a 	bl	8004f84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2160      	movs	r1, #96	; 0x60
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fded 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 80044fc:	e01c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fcce 	bl	8004eac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2140      	movs	r1, #64	; 0x40
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fddd 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 800451c:	e00c      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4619      	mov	r1, r3
 8004528:	4610      	mov	r0, r2
 800452a:	f000 fdd4 	bl	80050d6 <TIM_ITRx_SetConfig>
      break;
 800452e:	e003      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e000      	b.n	8004538 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004536:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004548:	7bfb      	ldrb	r3, [r7, #15]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	fffeff88 	.word	0xfffeff88

08004558 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIM_SlaveConfigSynchro+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e031      	b.n	80045d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fb8a 	bl	8004c9c <TIM_SlaveTimer_SetConfig>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e018      	b.n	80045d4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045c0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d831      	bhi.n	8004654 <HAL_TIM_ReadCapturedValue+0x78>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800462d 	.word	0x0800462d
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004655 	.word	0x08004655
 8004604:	08004655 	.word	0x08004655
 8004608:	08004637 	.word	0x08004637
 800460c:	08004655 	.word	0x08004655
 8004610:	08004655 	.word	0x08004655
 8004614:	08004655 	.word	0x08004655
 8004618:	08004641 	.word	0x08004641
 800461c:	08004655 	.word	0x08004655
 8004620:	08004655 	.word	0x08004655
 8004624:	08004655 	.word	0x08004655
 8004628:	0800464b 	.word	0x0800464b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004632:	60fb      	str	r3, [r7, #12]

      break;
 8004634:	e00f      	b.n	8004656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	60fb      	str	r3, [r7, #12]

      break;
 800463e:	e00a      	b.n	8004656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	60fb      	str	r3, [r7, #12]

      break;
 8004648:	e005      	b.n	8004656 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	60fb      	str	r3, [r7, #12]

      break;
 8004652:	e000      	b.n	8004656 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004654:	bf00      	nop
  }

  return tmpreg;
 8004656:	68fb      	ldr	r3, [r7, #12]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d00f      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	; (80047b8 <TIM_Base_SetConfig+0x118>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3c      	ldr	r2, [pc, #240]	; (80047bc <TIM_Base_SetConfig+0x11c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3b      	ldr	r2, [pc, #236]	; (80047c0 <TIM_Base_SetConfig+0x120>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3a      	ldr	r2, [pc, #232]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d108      	bne.n	80046f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2f      	ldr	r2, [pc, #188]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004700:	d027      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2c      	ldr	r2, [pc, #176]	; (80047b8 <TIM_Base_SetConfig+0x118>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d023      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <TIM_Base_SetConfig+0x11c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01f      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <TIM_Base_SetConfig+0x120>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d017      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <TIM_Base_SetConfig+0x128>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d013      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a27      	ldr	r2, [pc, #156]	; (80047cc <TIM_Base_SetConfig+0x12c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00f      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <TIM_Base_SetConfig+0x130>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00b      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a25      	ldr	r2, [pc, #148]	; (80047d4 <TIM_Base_SetConfig+0x134>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d007      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <TIM_Base_SetConfig+0x138>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a23      	ldr	r2, [pc, #140]	; (80047dc <TIM_Base_SetConfig+0x13c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d108      	bne.n	8004764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <TIM_Base_SetConfig+0x114>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d003      	beq.n	8004798 <TIM_Base_SetConfig+0xf8>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0c      	ldr	r2, [pc, #48]	; (80047c4 <TIM_Base_SetConfig+0x124>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d103      	bne.n	80047a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	615a      	str	r2, [r3, #20]
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40001800 	.word	0x40001800
 80047d8:	40001c00 	.word	0x40001c00
 80047dc:	40002000 	.word	0x40002000

080047e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	f023 0201 	bic.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <TIM_OC1_SetConfig+0xd8>)
 800480c:	4013      	ands	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 0302 	bic.w	r3, r3, #2
 8004828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a21      	ldr	r2, [pc, #132]	; (80048bc <TIM_OC1_SetConfig+0xdc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d003      	beq.n	8004844 <TIM_OC1_SetConfig+0x64>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <TIM_OC1_SetConfig+0xe0>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10c      	bne.n	800485e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0308 	bic.w	r3, r3, #8
 800484a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a16      	ldr	r2, [pc, #88]	; (80048bc <TIM_OC1_SetConfig+0xdc>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_OC1_SetConfig+0x8e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC1_SetConfig+0xe0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d111      	bne.n	8004892 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800487c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4313      	orrs	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	621a      	str	r2, [r3, #32]
}
 80048ac:	bf00      	nop
 80048ae:	371c      	adds	r7, #28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	fffeff8f 	.word	0xfffeff8f
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40010400 	.word	0x40010400

080048c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f023 0210 	bic.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <TIM_OC2_SetConfig+0xe4>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	021b      	lsls	r3, r3, #8
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f023 0320 	bic.w	r3, r3, #32
 800490e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	011b      	lsls	r3, r3, #4
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a23      	ldr	r2, [pc, #140]	; (80049ac <TIM_OC2_SetConfig+0xe8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC2_SetConfig+0x68>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a22      	ldr	r2, [pc, #136]	; (80049b0 <TIM_OC2_SetConfig+0xec>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d10d      	bne.n	8004948 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004946:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a18      	ldr	r2, [pc, #96]	; (80049ac <TIM_OC2_SetConfig+0xe8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d003      	beq.n	8004958 <TIM_OC2_SetConfig+0x94>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <TIM_OC2_SetConfig+0xec>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d113      	bne.n	8004980 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	621a      	str	r2, [r3, #32]
}
 800499a:	bf00      	nop
 800499c:	371c      	adds	r7, #28
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	feff8fff 	.word	0xfeff8fff
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <TIM_OC3_SetConfig+0xe0>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x66>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a21      	ldr	r2, [pc, #132]	; (8004a9c <TIM_OC3_SetConfig+0xe8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10d      	bne.n	8004a36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a17      	ldr	r2, [pc, #92]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC3_SetConfig+0x92>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <TIM_OC3_SetConfig+0xe8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d113      	bne.n	8004a6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	fffeff8f 	.word	0xfffeff8f
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40010400 	.word	0x40010400

08004aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <TIM_OC4_SetConfig+0xa4>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <TIM_OC4_SetConfig+0xa8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC4_SetConfig+0x68>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <TIM_OC4_SetConfig+0xac>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d109      	bne.n	8004b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	019b      	lsls	r3, r3, #6
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	feff8fff 	.word	0xfeff8fff
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40010400 	.word	0x40010400

08004b50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <TIM_OC5_SetConfig+0x98>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <TIM_OC5_SetConfig+0x9c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d003      	beq.n	8004bae <TIM_OC5_SetConfig+0x5e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <TIM_OC5_SetConfig+0xa0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d109      	bne.n	8004bc2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	621a      	str	r2, [r3, #32]
}
 8004bdc:	bf00      	nop
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	fffeff8f 	.word	0xfffeff8f
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <TIM_OC6_SetConfig+0x9c>)
 8004c20:	4013      	ands	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	021b      	lsls	r3, r3, #8
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	051b      	lsls	r3, r3, #20
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <TIM_OC6_SetConfig+0xa0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d003      	beq.n	8004c54 <TIM_OC6_SetConfig+0x60>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a12      	ldr	r2, [pc, #72]	; (8004c98 <TIM_OC6_SetConfig+0xa4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d109      	bne.n	8004c68 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	feff8fff 	.word	0xfeff8fff
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400

08004c9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <TIM_SlaveTimer_SetConfig+0x124>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b70      	cmp	r3, #112	; 0x70
 8004ce4:	d01a      	beq.n	8004d1c <TIM_SlaveTimer_SetConfig+0x80>
 8004ce6:	2b70      	cmp	r3, #112	; 0x70
 8004ce8:	d860      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004cea:	2b60      	cmp	r3, #96	; 0x60
 8004cec:	d054      	beq.n	8004d98 <TIM_SlaveTimer_SetConfig+0xfc>
 8004cee:	2b60      	cmp	r3, #96	; 0x60
 8004cf0:	d85c      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004cf2:	2b50      	cmp	r3, #80	; 0x50
 8004cf4:	d046      	beq.n	8004d84 <TIM_SlaveTimer_SetConfig+0xe8>
 8004cf6:	2b50      	cmp	r3, #80	; 0x50
 8004cf8:	d858      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d019      	beq.n	8004d32 <TIM_SlaveTimer_SetConfig+0x96>
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d854      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004d02:	2b30      	cmp	r3, #48	; 0x30
 8004d04:	d055      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x116>
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	d850      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d051      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x116>
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d84c      	bhi.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04d      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x116>
 8004d16:	2b10      	cmp	r3, #16
 8004d18:	d04b      	beq.n	8004db2 <TIM_SlaveTimer_SetConfig+0x116>
 8004d1a:	e047      	b.n	8004dac <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68d9      	ldr	r1, [r3, #12]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f000 f9ee 	bl	800510c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004d30:	e040      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d101      	bne.n	8004d3e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e03b      	b.n	8004db6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d64:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
      break;
 8004d82:	e017      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	461a      	mov	r2, r3
 8004d92:	f000 f88b 	bl	8004eac <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d96:	e00d      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6899      	ldr	r1, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f000 f8ed 	bl	8004f84 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004daa:	e003      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	e000      	b.n	8004db4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004db2:	bf00      	nop
  }

  return status;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	fffefff8 	.word	0xfffefff8

08004dc4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0201 	bic.w	r2, r3, #1
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a28      	ldr	r2, [pc, #160]	; (8004e90 <TIM_TI1_SetConfig+0xcc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d01b      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df8:	d017      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a25      	ldr	r2, [pc, #148]	; (8004e94 <TIM_TI1_SetConfig+0xd0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a24      	ldr	r2, [pc, #144]	; (8004e98 <TIM_TI1_SetConfig+0xd4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00f      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4a23      	ldr	r2, [pc, #140]	; (8004e9c <TIM_TI1_SetConfig+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d00b      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <TIM_TI1_SetConfig+0xdc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d007      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <TIM_TI1_SetConfig+0xe0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d003      	beq.n	8004e2a <TIM_TI1_SetConfig+0x66>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a20      	ldr	r2, [pc, #128]	; (8004ea8 <TIM_TI1_SetConfig+0xe4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <TIM_TI1_SetConfig+0x6a>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <TIM_TI1_SetConfig+0x6c>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0303 	bic.w	r3, r3, #3
 8004e3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e003      	b.n	8004e4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f023 030a 	bic.w	r3, r3, #10
 8004e68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f003 030a 	and.w	r3, r3, #10
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	621a      	str	r2, [r3, #32]
}
 8004e82:	bf00      	nop
 8004e84:	371c      	adds	r7, #28
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40000400 	.word	0x40000400
 8004e98:	40000800 	.word	0x40000800
 8004e9c:	40000c00 	.word	0x40000c00
 8004ea0:	40010400 	.word	0x40010400
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40001800 	.word	0x40001800

08004eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f023 0201 	bic.w	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f023 030a 	bic.w	r3, r3, #10
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f023 0210 	bic.w	r2, r3, #16
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	031b      	lsls	r3, r3, #12
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f023 0210 	bic.w	r2, r3, #16
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	031b      	lsls	r3, r3, #12
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	621a      	str	r2, [r3, #32]
}
 8004fd8:	bf00      	nop
 8004fda:	371c      	adds	r7, #28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f023 0303 	bic.w	r3, r3, #3
 8005010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005020:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	b2db      	uxtb	r3, r3
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005034:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	621a      	str	r2, [r3, #32]
}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005088:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800509a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	031b      	lsls	r3, r3, #12
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	031b      	lsls	r3, r3, #12
 80050b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b085      	sub	sp, #20
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f043 0307 	orr.w	r3, r3, #7
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005126:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	431a      	orrs	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2201      	movs	r2, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a1a      	ldr	r2, [r3, #32]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	43db      	mvns	r3, r3
 800516e:	401a      	ands	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1a      	ldr	r2, [r3, #32]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	fa01 f303 	lsl.w	r3, r1, r3
 8005184:	431a      	orrs	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e06d      	b.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a30      	ldr	r2, [pc, #192]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a2f      	ldr	r2, [pc, #188]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005222:	d01d      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1c      	ldr	r2, [pc, #112]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10c      	bne.n	800527a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4313      	orrs	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40010000 	.word	0x40010000
 800529c:	40010400 	.word	0x40010400
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40000800 	.word	0x40000800
 80052a8:	40000c00 	.word	0x40000c00
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40001800 	.word	0x40001800

080052b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e040      	b.n	8005384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc fb16 	bl	8001944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2224      	movs	r2, #36	; 0x24
 800531c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82c 	bl	800538c <UART_SetConfig>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e022      	b.n	8005384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa84 	bl	8005854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800535a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800536a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0201 	orr.w	r2, r2, #1
 800537a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fb0b 	bl	8005998 <UART_CheckIdleState>
 8005382:	4603      	mov	r3, r0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4ba6      	ldr	r3, [pc, #664]	; (8005650 <UART_SetConfig+0x2c4>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	430b      	orrs	r3, r1
 80053c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a94      	ldr	r2, [pc, #592]	; (8005654 <UART_SetConfig+0x2c8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d120      	bne.n	800544a <UART_SetConfig+0xbe>
 8005408:	4b93      	ldr	r3, [pc, #588]	; (8005658 <UART_SetConfig+0x2cc>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d816      	bhi.n	8005444 <UART_SetConfig+0xb8>
 8005416:	a201      	add	r2, pc, #4	; (adr r2, 800541c <UART_SetConfig+0x90>)
 8005418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541c:	0800542d 	.word	0x0800542d
 8005420:	08005439 	.word	0x08005439
 8005424:	08005433 	.word	0x08005433
 8005428:	0800543f 	.word	0x0800543f
 800542c:	2301      	movs	r3, #1
 800542e:	77fb      	strb	r3, [r7, #31]
 8005430:	e150      	b.n	80056d4 <UART_SetConfig+0x348>
 8005432:	2302      	movs	r3, #2
 8005434:	77fb      	strb	r3, [r7, #31]
 8005436:	e14d      	b.n	80056d4 <UART_SetConfig+0x348>
 8005438:	2304      	movs	r3, #4
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e14a      	b.n	80056d4 <UART_SetConfig+0x348>
 800543e:	2308      	movs	r3, #8
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e147      	b.n	80056d4 <UART_SetConfig+0x348>
 8005444:	2310      	movs	r3, #16
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e144      	b.n	80056d4 <UART_SetConfig+0x348>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a83      	ldr	r2, [pc, #524]	; (800565c <UART_SetConfig+0x2d0>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d132      	bne.n	80054ba <UART_SetConfig+0x12e>
 8005454:	4b80      	ldr	r3, [pc, #512]	; (8005658 <UART_SetConfig+0x2cc>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d828      	bhi.n	80054b4 <UART_SetConfig+0x128>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <UART_SetConfig+0xdc>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	0800549d 	.word	0x0800549d
 800546c:	080054b5 	.word	0x080054b5
 8005470:	080054b5 	.word	0x080054b5
 8005474:	080054b5 	.word	0x080054b5
 8005478:	080054a9 	.word	0x080054a9
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080054b5 	.word	0x080054b5
 8005488:	080054a3 	.word	0x080054a3
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054b5 	.word	0x080054b5
 8005498:	080054af 	.word	0x080054af
 800549c:	2300      	movs	r3, #0
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e118      	b.n	80056d4 <UART_SetConfig+0x348>
 80054a2:	2302      	movs	r3, #2
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e115      	b.n	80056d4 <UART_SetConfig+0x348>
 80054a8:	2304      	movs	r3, #4
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e112      	b.n	80056d4 <UART_SetConfig+0x348>
 80054ae:	2308      	movs	r3, #8
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e10f      	b.n	80056d4 <UART_SetConfig+0x348>
 80054b4:	2310      	movs	r3, #16
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e10c      	b.n	80056d4 <UART_SetConfig+0x348>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a68      	ldr	r2, [pc, #416]	; (8005660 <UART_SetConfig+0x2d4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d120      	bne.n	8005506 <UART_SetConfig+0x17a>
 80054c4:	4b64      	ldr	r3, [pc, #400]	; (8005658 <UART_SetConfig+0x2cc>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054ce:	2b30      	cmp	r3, #48	; 0x30
 80054d0:	d013      	beq.n	80054fa <UART_SetConfig+0x16e>
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d814      	bhi.n	8005500 <UART_SetConfig+0x174>
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d009      	beq.n	80054ee <UART_SetConfig+0x162>
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d810      	bhi.n	8005500 <UART_SetConfig+0x174>
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <UART_SetConfig+0x15c>
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d006      	beq.n	80054f4 <UART_SetConfig+0x168>
 80054e6:	e00b      	b.n	8005500 <UART_SetConfig+0x174>
 80054e8:	2300      	movs	r3, #0
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e0f2      	b.n	80056d4 <UART_SetConfig+0x348>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e0ef      	b.n	80056d4 <UART_SetConfig+0x348>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e0ec      	b.n	80056d4 <UART_SetConfig+0x348>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e0e9      	b.n	80056d4 <UART_SetConfig+0x348>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e0e6      	b.n	80056d4 <UART_SetConfig+0x348>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a56      	ldr	r2, [pc, #344]	; (8005664 <UART_SetConfig+0x2d8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d120      	bne.n	8005552 <UART_SetConfig+0x1c6>
 8005510:	4b51      	ldr	r3, [pc, #324]	; (8005658 <UART_SetConfig+0x2cc>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800551a:	2bc0      	cmp	r3, #192	; 0xc0
 800551c:	d013      	beq.n	8005546 <UART_SetConfig+0x1ba>
 800551e:	2bc0      	cmp	r3, #192	; 0xc0
 8005520:	d814      	bhi.n	800554c <UART_SetConfig+0x1c0>
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d009      	beq.n	800553a <UART_SetConfig+0x1ae>
 8005526:	2b80      	cmp	r3, #128	; 0x80
 8005528:	d810      	bhi.n	800554c <UART_SetConfig+0x1c0>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <UART_SetConfig+0x1a8>
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d006      	beq.n	8005540 <UART_SetConfig+0x1b4>
 8005532:	e00b      	b.n	800554c <UART_SetConfig+0x1c0>
 8005534:	2300      	movs	r3, #0
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e0cc      	b.n	80056d4 <UART_SetConfig+0x348>
 800553a:	2302      	movs	r3, #2
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	e0c9      	b.n	80056d4 <UART_SetConfig+0x348>
 8005540:	2304      	movs	r3, #4
 8005542:	77fb      	strb	r3, [r7, #31]
 8005544:	e0c6      	b.n	80056d4 <UART_SetConfig+0x348>
 8005546:	2308      	movs	r3, #8
 8005548:	77fb      	strb	r3, [r7, #31]
 800554a:	e0c3      	b.n	80056d4 <UART_SetConfig+0x348>
 800554c:	2310      	movs	r3, #16
 800554e:	77fb      	strb	r3, [r7, #31]
 8005550:	e0c0      	b.n	80056d4 <UART_SetConfig+0x348>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a44      	ldr	r2, [pc, #272]	; (8005668 <UART_SetConfig+0x2dc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d125      	bne.n	80055a8 <UART_SetConfig+0x21c>
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <UART_SetConfig+0x2cc>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800556a:	d017      	beq.n	800559c <UART_SetConfig+0x210>
 800556c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005570:	d817      	bhi.n	80055a2 <UART_SetConfig+0x216>
 8005572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005576:	d00b      	beq.n	8005590 <UART_SetConfig+0x204>
 8005578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800557c:	d811      	bhi.n	80055a2 <UART_SetConfig+0x216>
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <UART_SetConfig+0x1fe>
 8005582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005586:	d006      	beq.n	8005596 <UART_SetConfig+0x20a>
 8005588:	e00b      	b.n	80055a2 <UART_SetConfig+0x216>
 800558a:	2300      	movs	r3, #0
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e0a1      	b.n	80056d4 <UART_SetConfig+0x348>
 8005590:	2302      	movs	r3, #2
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e09e      	b.n	80056d4 <UART_SetConfig+0x348>
 8005596:	2304      	movs	r3, #4
 8005598:	77fb      	strb	r3, [r7, #31]
 800559a:	e09b      	b.n	80056d4 <UART_SetConfig+0x348>
 800559c:	2308      	movs	r3, #8
 800559e:	77fb      	strb	r3, [r7, #31]
 80055a0:	e098      	b.n	80056d4 <UART_SetConfig+0x348>
 80055a2:	2310      	movs	r3, #16
 80055a4:	77fb      	strb	r3, [r7, #31]
 80055a6:	e095      	b.n	80056d4 <UART_SetConfig+0x348>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2f      	ldr	r2, [pc, #188]	; (800566c <UART_SetConfig+0x2e0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d125      	bne.n	80055fe <UART_SetConfig+0x272>
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <UART_SetConfig+0x2cc>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c0:	d017      	beq.n	80055f2 <UART_SetConfig+0x266>
 80055c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055c6:	d817      	bhi.n	80055f8 <UART_SetConfig+0x26c>
 80055c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055cc:	d00b      	beq.n	80055e6 <UART_SetConfig+0x25a>
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d2:	d811      	bhi.n	80055f8 <UART_SetConfig+0x26c>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <UART_SetConfig+0x254>
 80055d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055dc:	d006      	beq.n	80055ec <UART_SetConfig+0x260>
 80055de:	e00b      	b.n	80055f8 <UART_SetConfig+0x26c>
 80055e0:	2301      	movs	r3, #1
 80055e2:	77fb      	strb	r3, [r7, #31]
 80055e4:	e076      	b.n	80056d4 <UART_SetConfig+0x348>
 80055e6:	2302      	movs	r3, #2
 80055e8:	77fb      	strb	r3, [r7, #31]
 80055ea:	e073      	b.n	80056d4 <UART_SetConfig+0x348>
 80055ec:	2304      	movs	r3, #4
 80055ee:	77fb      	strb	r3, [r7, #31]
 80055f0:	e070      	b.n	80056d4 <UART_SetConfig+0x348>
 80055f2:	2308      	movs	r3, #8
 80055f4:	77fb      	strb	r3, [r7, #31]
 80055f6:	e06d      	b.n	80056d4 <UART_SetConfig+0x348>
 80055f8:	2310      	movs	r3, #16
 80055fa:	77fb      	strb	r3, [r7, #31]
 80055fc:	e06a      	b.n	80056d4 <UART_SetConfig+0x348>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1b      	ldr	r2, [pc, #108]	; (8005670 <UART_SetConfig+0x2e4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d138      	bne.n	800567a <UART_SetConfig+0x2ee>
 8005608:	4b13      	ldr	r3, [pc, #76]	; (8005658 <UART_SetConfig+0x2cc>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005612:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005616:	d017      	beq.n	8005648 <UART_SetConfig+0x2bc>
 8005618:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800561c:	d82a      	bhi.n	8005674 <UART_SetConfig+0x2e8>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005622:	d00b      	beq.n	800563c <UART_SetConfig+0x2b0>
 8005624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005628:	d824      	bhi.n	8005674 <UART_SetConfig+0x2e8>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <UART_SetConfig+0x2aa>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005632:	d006      	beq.n	8005642 <UART_SetConfig+0x2b6>
 8005634:	e01e      	b.n	8005674 <UART_SetConfig+0x2e8>
 8005636:	2300      	movs	r3, #0
 8005638:	77fb      	strb	r3, [r7, #31]
 800563a:	e04b      	b.n	80056d4 <UART_SetConfig+0x348>
 800563c:	2302      	movs	r3, #2
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e048      	b.n	80056d4 <UART_SetConfig+0x348>
 8005642:	2304      	movs	r3, #4
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e045      	b.n	80056d4 <UART_SetConfig+0x348>
 8005648:	2308      	movs	r3, #8
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e042      	b.n	80056d4 <UART_SetConfig+0x348>
 800564e:	bf00      	nop
 8005650:	efff69f3 	.word	0xefff69f3
 8005654:	40011000 	.word	0x40011000
 8005658:	40023800 	.word	0x40023800
 800565c:	40004400 	.word	0x40004400
 8005660:	40004800 	.word	0x40004800
 8005664:	40004c00 	.word	0x40004c00
 8005668:	40005000 	.word	0x40005000
 800566c:	40011400 	.word	0x40011400
 8005670:	40007800 	.word	0x40007800
 8005674:	2310      	movs	r3, #16
 8005676:	77fb      	strb	r3, [r7, #31]
 8005678:	e02c      	b.n	80056d4 <UART_SetConfig+0x348>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a72      	ldr	r2, [pc, #456]	; (8005848 <UART_SetConfig+0x4bc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d125      	bne.n	80056d0 <UART_SetConfig+0x344>
 8005684:	4b71      	ldr	r3, [pc, #452]	; (800584c <UART_SetConfig+0x4c0>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800568e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005692:	d017      	beq.n	80056c4 <UART_SetConfig+0x338>
 8005694:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005698:	d817      	bhi.n	80056ca <UART_SetConfig+0x33e>
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d00b      	beq.n	80056b8 <UART_SetConfig+0x32c>
 80056a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a4:	d811      	bhi.n	80056ca <UART_SetConfig+0x33e>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <UART_SetConfig+0x326>
 80056aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ae:	d006      	beq.n	80056be <UART_SetConfig+0x332>
 80056b0:	e00b      	b.n	80056ca <UART_SetConfig+0x33e>
 80056b2:	2300      	movs	r3, #0
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e00d      	b.n	80056d4 <UART_SetConfig+0x348>
 80056b8:	2302      	movs	r3, #2
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e00a      	b.n	80056d4 <UART_SetConfig+0x348>
 80056be:	2304      	movs	r3, #4
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e007      	b.n	80056d4 <UART_SetConfig+0x348>
 80056c4:	2308      	movs	r3, #8
 80056c6:	77fb      	strb	r3, [r7, #31]
 80056c8:	e004      	b.n	80056d4 <UART_SetConfig+0x348>
 80056ca:	2310      	movs	r3, #16
 80056cc:	77fb      	strb	r3, [r7, #31]
 80056ce:	e001      	b.n	80056d4 <UART_SetConfig+0x348>
 80056d0:	2310      	movs	r3, #16
 80056d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056dc:	d15b      	bne.n	8005796 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056de:	7ffb      	ldrb	r3, [r7, #31]
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d828      	bhi.n	8005736 <UART_SetConfig+0x3aa>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x360>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005711 	.word	0x08005711
 80056f0:	08005719 	.word	0x08005719
 80056f4:	08005721 	.word	0x08005721
 80056f8:	08005737 	.word	0x08005737
 80056fc:	08005727 	.word	0x08005727
 8005700:	08005737 	.word	0x08005737
 8005704:	08005737 	.word	0x08005737
 8005708:	08005737 	.word	0x08005737
 800570c:	0800572f 	.word	0x0800572f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fd fb9c 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8005714:	61b8      	str	r0, [r7, #24]
        break;
 8005716:	e013      	b.n	8005740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005718:	f7fd fbac 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 800571c:	61b8      	str	r0, [r7, #24]
        break;
 800571e:	e00f      	b.n	8005740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005720:	4b4b      	ldr	r3, [pc, #300]	; (8005850 <UART_SetConfig+0x4c4>)
 8005722:	61bb      	str	r3, [r7, #24]
        break;
 8005724:	e00c      	b.n	8005740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005726:	f7fd fa7f 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 800572a:	61b8      	str	r0, [r7, #24]
        break;
 800572c:	e008      	b.n	8005740 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	61bb      	str	r3, [r7, #24]
        break;
 8005734:	e004      	b.n	8005740 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	77bb      	strb	r3, [r7, #30]
        break;
 800573e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d074      	beq.n	8005830 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	005a      	lsls	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	441a      	add	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	fbb2 f3f3 	udiv	r3, r2, r3
 800575a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b0f      	cmp	r3, #15
 8005760:	d916      	bls.n	8005790 <UART_SetConfig+0x404>
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005768:	d212      	bcs.n	8005790 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f023 030f 	bic.w	r3, r3, #15
 8005772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	b29b      	uxth	r3, r3
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	b29a      	uxth	r2, r3
 8005780:	89fb      	ldrh	r3, [r7, #14]
 8005782:	4313      	orrs	r3, r2
 8005784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	89fa      	ldrh	r2, [r7, #14]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e04f      	b.n	8005830 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	77bb      	strb	r3, [r7, #30]
 8005794:	e04c      	b.n	8005830 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005796:	7ffb      	ldrb	r3, [r7, #31]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d828      	bhi.n	80057ee <UART_SetConfig+0x462>
 800579c:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <UART_SetConfig+0x418>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	080057c9 	.word	0x080057c9
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d9 	.word	0x080057d9
 80057b0:	080057ef 	.word	0x080057ef
 80057b4:	080057df 	.word	0x080057df
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	080057ef 	.word	0x080057ef
 80057c0:	080057ef 	.word	0x080057ef
 80057c4:	080057e7 	.word	0x080057e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057c8:	f7fd fb40 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 80057cc:	61b8      	str	r0, [r7, #24]
        break;
 80057ce:	e013      	b.n	80057f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d0:	f7fd fb50 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 80057d4:	61b8      	str	r0, [r7, #24]
        break;
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <UART_SetConfig+0x4c4>)
 80057da:	61bb      	str	r3, [r7, #24]
        break;
 80057dc:	e00c      	b.n	80057f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057de:	f7fd fa23 	bl	8002c28 <HAL_RCC_GetSysClockFreq>
 80057e2:	61b8      	str	r0, [r7, #24]
        break;
 80057e4:	e008      	b.n	80057f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ea:	61bb      	str	r3, [r7, #24]
        break;
 80057ec:	e004      	b.n	80057f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	77bb      	strb	r3, [r7, #30]
        break;
 80057f6:	bf00      	nop
    }

    if (pclk != 0U)
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d018      	beq.n	8005830 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	085a      	lsrs	r2, r3, #1
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	441a      	add	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005810:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b0f      	cmp	r3, #15
 8005816:	d909      	bls.n	800582c <UART_SetConfig+0x4a0>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581e:	d205      	bcs.n	800582c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	b29a      	uxth	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	e001      	b.n	8005830 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800583c:	7fbb      	ldrb	r3, [r7, #30]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40007c00 	.word	0x40007c00
 800584c:	40023800 	.word	0x40023800
 8005850:	00f42400 	.word	0x00f42400

08005854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01a      	beq.n	800596a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005952:	d10a      	bne.n	800596a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af02      	add	r7, sp, #8
 800599e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a8:	f7fc f94e 	bl	8001c48 <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d10e      	bne.n	80059da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f81b 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e011      	b.n	80059fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2220      	movs	r2, #32
 80059de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	e0a7      	b.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	f000 80a3 	beq.w	8005b68 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc f911 	bl	8001c48 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d13f      	bne.n	8005ab8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e068      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0304 	and.w	r3, r3, #4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d050      	beq.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	d148      	bne.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ade:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e6      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	613b      	str	r3, [r7, #16]
   return(result);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f023 0301 	bic.w	r3, r3, #1
 8005b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b32:	623a      	str	r2, [r7, #32]
 8005b34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	69f9      	ldr	r1, [r7, #28]
 8005b38:	6a3a      	ldr	r2, [r7, #32]
 8005b3a:	e841 2300 	strex	r3, r2, [r1]
 8005b3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1e5      	bne.n	8005b12 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e010      	b.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69da      	ldr	r2, [r3, #28]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	f43f af48 	beq.w	8005a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3770      	adds	r7, #112	; 0x70
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
	...

08005b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b94:	b084      	sub	sp, #16
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	f107 001c 	add.w	r0, r7, #28
 8005ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d120      	bne.n	8005bee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <USB_CoreInit+0xac>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d105      	bne.n	8005be2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa96 	bl	8006114 <USB_CoreReset>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
 8005bec:	e010      	b.n	8005c10 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa8a 	bl	8006114 <USB_CoreReset>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10b      	bne.n	8005c2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f043 0206 	orr.w	r2, r3, #6
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3a:	b004      	add	sp, #16
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	ffbdffbf 	.word	0xffbdffbf

08005c44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f023 0201 	bic.w	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d115      	bne.n	8005cb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7fb ffe3 	bl	8001c60 <HAL_Delay>
      ms++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa29 	bl	80060f8 <USB_GetMode>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d01e      	beq.n	8005cea <USB_SetCurrentMode+0x84>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b31      	cmp	r3, #49	; 0x31
 8005cb0:	d9f0      	bls.n	8005c94 <USB_SetCurrentMode+0x2e>
 8005cb2:	e01a      	b.n	8005cea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	f7fb ffca 	bl	8001c60 <HAL_Delay>
      ms++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa10 	bl	80060f8 <USB_GetMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <USB_SetCurrentMode+0x84>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b31      	cmp	r3, #49	; 0x31
 8005ce2:	d9f0      	bls.n	8005cc6 <USB_SetCurrentMode+0x60>
 8005ce4:	e001      	b.n	8005cea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e005      	b.n	8005cf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b32      	cmp	r3, #50	; 0x32
 8005cee:	d101      	bne.n	8005cf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d00:	b084      	sub	sp, #16
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e009      	b.n	8005d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3340      	adds	r3, #64	; 0x40
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b0e      	cmp	r3, #14
 8005d38:	d9f2      	bls.n	8005d20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11c      	bne.n	8005d7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4e:	f043 0302 	orr.w	r3, r3, #2
 8005d52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e005      	b.n	8005d86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d98:	4619      	mov	r1, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	461a      	mov	r2, r3
 8005da2:	680b      	ldr	r3, [r1, #0]
 8005da4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10c      	bne.n	8005dc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005db2:	2100      	movs	r1, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f965 	bl	8006084 <USB_SetDevSpeed>
 8005dba:	e008      	b.n	8005dce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f960 	bl	8006084 <USB_SetDevSpeed>
 8005dc4:	e003      	b.n	8005dce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dc6:	2103      	movs	r1, #3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f95b 	bl	8006084 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dce:	2110      	movs	r1, #16
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f8f3 	bl	8005fbc <USB_FlushTxFifo>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f91f 	bl	8006024 <USB_FlushRxFifo>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df6:	461a      	mov	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	461a      	mov	r2, r3
 8005e04:	2300      	movs	r3, #0
 8005e06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	e043      	b.n	8005ea2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e30:	d118      	bne.n	8005e64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	461a      	mov	r2, r3
 8005e46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	e013      	b.n	8005e76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e008      	b.n	8005e76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	461a      	mov	r2, r3
 8005e84:	2300      	movs	r3, #0
 8005e86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	461a      	mov	r2, r3
 8005e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d3b7      	bcc.n	8005e1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	e043      	b.n	8005f38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec6:	d118      	bne.n	8005efa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eda:	461a      	mov	r2, r3
 8005edc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	e013      	b.n	8005f0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e008      	b.n	8005f0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	461a      	mov	r2, r3
 8005f08:	2300      	movs	r3, #0
 8005f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	3301      	adds	r3, #1
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d3b7      	bcc.n	8005eb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f043 0210 	orr.w	r2, r3, #16
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	4b0e      	ldr	r3, [pc, #56]	; (8005fb4 <USB_DevInit+0x2b4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d005      	beq.n	8005f92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f043 0208 	orr.w	r2, r3, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699a      	ldr	r2, [r3, #24]
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <USB_DevInit+0x2b8>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3718      	adds	r7, #24
 8005faa:	46bd      	mov	sp, r7
 8005fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb0:	b004      	add	sp, #16
 8005fb2:	4770      	bx	lr
 8005fb4:	803c3800 	.word	0x803c3800
 8005fb8:	40000004 	.word	0x40000004

08005fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <USB_FlushTxFifo+0x64>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e01b      	b.n	8006014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	daf2      	bge.n	8005fca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	019b      	lsls	r3, r3, #6
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a08      	ldr	r2, [pc, #32]	; (8006020 <USB_FlushTxFifo+0x64>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d0f0      	beq.n	8005ff4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	00030d40 	.word	0x00030d40

08006024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a11      	ldr	r2, [pc, #68]	; (8006080 <USB_FlushRxFifo+0x5c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e018      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	daf2      	bge.n	8006030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2210      	movs	r2, #16
 8006052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a08      	ldr	r2, [pc, #32]	; (8006080 <USB_FlushRxFifo+0x5c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e006      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b10      	cmp	r3, #16
 8006070:	d0f0      	beq.n	8006054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	00030d40 	.word	0x00030d40

08006084 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060d0:	f023 0303 	bic.w	r3, r3, #3
 80060d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0301 	and.w	r3, r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <USB_CoreReset+0x64>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e01b      	b.n	800616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	daf2      	bge.n	8006120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a09      	ldr	r2, [pc, #36]	; (8006178 <USB_CoreReset+0x64>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e006      	b.n	800616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d0f0      	beq.n	800614a <USB_CoreReset+0x36>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	00030d40 	.word	0x00030d40

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	; (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	; (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	; (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	; (80061c0 <__libc_init_array+0x44>)
 8006190:	f000 f820 	bl	80061d4 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	0800620c 	.word	0x0800620c
 80061b8:	0800620c 	.word	0x0800620c
 80061bc:	0800620c 	.word	0x0800620c
 80061c0:	08006210 	.word	0x08006210

080061c4 <memset>:
 80061c4:	4402      	add	r2, r0
 80061c6:	4603      	mov	r3, r0
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d100      	bne.n	80061ce <memset+0xa>
 80061cc:	4770      	bx	lr
 80061ce:	f803 1b01 	strb.w	r1, [r3], #1
 80061d2:	e7f9      	b.n	80061c8 <memset+0x4>

080061d4 <_init>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr

080061e0 <_fini>:
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e2:	bf00      	nop
 80061e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e6:	bc08      	pop	{r3}
 80061e8:	469e      	mov	lr, r3
 80061ea:	4770      	bx	lr
