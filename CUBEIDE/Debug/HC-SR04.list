
HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009028  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  080091f8  080091f8  000191f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080094e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000070  08009558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  08009558  00020798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c36  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ab  00000000  00000000  00036cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00039d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287e4  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001774e  00000000  00000000  00064854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f434d  00000000  00000000  0007bfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001702ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b5c  00000000  00000000  00170340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080091e0 	.word	0x080091e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080091e0 	.word	0x080091e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <controller_init>:
#include "controller.h"

void controller_init(struct Controller* controller, float MAX_CONTROL_SIGNAL, float MIN_CONTROL_SIGNAL, float START_CONTROL_SIGNAL, float MIN_ERROR, float MAX_ERROR)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b087      	sub	sp, #28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6178      	str	r0, [r7, #20]
 8000ec8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ecc:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ed0:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ed4:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ed8:	ed87 2a00 	vstr	s4, [r7]
	controller->MAX_CONTROL_SIGNAL = MAX_CONTROL_SIGNAL;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]
	controller->MIN_CONTROL_SIGNAL = MIN_CONTROL_SIGNAL;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	605a      	str	r2, [r3, #4]
	controller->START_CONTROL_SIGNAL = START_CONTROL_SIGNAL;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	60da      	str	r2, [r3, #12]
	controller->MAX_ERROR = MAX_ERROR;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	683a      	ldr	r2, [r7, #0]
 8000ef8:	611a      	str	r2, [r3, #16]
	controller->previous_error = 0;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
}
 8000f02:	bf00      	nop
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <controller_control_signal>:

float controller_control_signal(struct Controller* controller, float error)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	ed87 0a00 	vstr	s0, [r7]
	//float dot_error = error-controller->previous_error;
	controller->previous_error = error;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	615a      	str	r2, [r3, #20]
	if(error < -controller->MAX_ERROR/4)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f28:	eeb1 7a67 	vneg.f32	s14, s15
 8000f2c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f34:	ed97 7a00 	vldr	s14, [r7]
 8000f38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f40:	d503      	bpl.n	8000f4a <controller_control_signal+0x3a>
	{
		return controller->MAX_CONTROL_SIGNAL;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	e053      	b.n	8000ff2 <controller_control_signal+0xe2>
	}
	else if(error < -controller->MIN_ERROR)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f50:	eef1 7a67 	vneg.f32	s15, s15
 8000f54:	ed97 7a00 	vldr	s14, [r7]
 8000f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d513      	bpl.n	8000f8a <controller_control_signal+0x7a>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error + controller->START_CONTROL_SIGNAL;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	edd3 6a00 	vldr	s13, [r3]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f72:	edd7 7a00 	vldr	s15, [r7]
 8000f76:	eef1 7a67 	vneg.f32	s15, s15
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	e033      	b.n	8000ff2 <controller_control_signal+0xe2>
	}
	else if(error < controller->MIN_ERROR)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f90:	ed97 7a00 	vldr	s14, [r7]
 8000f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d502      	bpl.n	8000fa4 <controller_control_signal+0x94>
	{
		return 0;
 8000f9e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001000 <controller_control_signal+0xf0>
 8000fa2:	e026      	b.n	8000ff2 <controller_control_signal+0xe2>
	}
	else if(error < controller->MAX_ERROR/4)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	ed93 7a04 	vldr	s14, [r3, #16]
 8000faa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000fae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb2:	ed97 7a00 	vldr	s14, [r7]
 8000fb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d513      	bpl.n	8000fe8 <controller_control_signal+0xd8>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error - controller->START_CONTROL_SIGNAL;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 6a00 	vldr	s13, [r3]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fd0:	edd7 7a00 	vldr	s15, [r7]
 8000fd4:	eef1 7a67 	vneg.f32	s15, s15
 8000fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe6:	e004      	b.n	8000ff2 <controller_control_signal+0xe2>
	}
	else
	{
		return -controller->MAX_CONTROL_SIGNAL;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 8000ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	00000000 	.word	0x00000000

08001004 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b77      	ldr	r3, [pc, #476]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a76      	ldr	r2, [pc, #472]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b74      	ldr	r3, [pc, #464]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	61bb      	str	r3, [r7, #24]
 8001030:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	4b71      	ldr	r3, [pc, #452]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a70      	ldr	r2, [pc, #448]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b6e      	ldr	r3, [pc, #440]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b6b      	ldr	r3, [pc, #428]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a6a      	ldr	r2, [pc, #424]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	4b65      	ldr	r3, [pc, #404]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001080:	f043 0310 	orr.w	r3, r3, #16
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001092:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b56      	ldr	r3, [pc, #344]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0308 	and.w	r3, r3, #8
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <MX_GPIO_Init+0x1f4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2130      	movs	r1, #48	; 0x30
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <MX_GPIO_Init+0x1f8>)
 80010c8:	f001 fc84 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FORWARD_MOTOR_2_Pin|BACKWARD_MOTOR_2_Pin|LD3_Pin
 80010cc:	2200      	movs	r2, #0
 80010ce:	f244 0187 	movw	r1, #16519	; 0x4087
 80010d2:	484b      	ldr	r0, [pc, #300]	; (8001200 <MX_GPIO_Init+0x1fc>)
 80010d4:	f001 fc7e 	bl	80029d4 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2140      	movs	r1, #64	; 0x40
 80010dc:	4849      	ldr	r0, [pc, #292]	; (8001204 <MX_GPIO_Init+0x200>)
 80010de:	f001 fc79 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4843      	ldr	r0, [pc, #268]	; (8001208 <MX_GPIO_Init+0x204>)
 80010fa:	f001 fabf 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010fe:	2332      	movs	r3, #50	; 0x32
 8001100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800110e:	230b      	movs	r3, #11
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	483b      	ldr	r0, [pc, #236]	; (8001208 <MX_GPIO_Init+0x204>)
 800111a:	f001 faaf 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800111e:	2386      	movs	r3, #134	; 0x86
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112e:	230b      	movs	r3, #11
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4830      	ldr	r0, [pc, #192]	; (80011fc <MX_GPIO_Init+0x1f8>)
 800113a:	f001 fa9f 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin;
 800113e:	2330      	movs	r3, #48	; 0x30
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4829      	ldr	r0, [pc, #164]	; (80011fc <MX_GPIO_Init+0x1f8>)
 8001156:	f001 fa91 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|FORWARD_MOTOR_2_Pin|BACKWARD_MOTOR_2_Pin|LD3_Pin
 800115a:	f244 0387 	movw	r3, #16519	; 0x4087
 800115e:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4823      	ldr	r0, [pc, #140]	; (8001200 <MX_GPIO_Init+0x1fc>)
 8001174:	f001 fa82 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118a:	230b      	movs	r3, #11
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	481a      	ldr	r0, [pc, #104]	; (8001200 <MX_GPIO_Init+0x1fc>)
 8001196:	f001 fa71 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800119a:	2340      	movs	r3, #64	; 0x40
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4814      	ldr	r0, [pc, #80]	; (8001204 <MX_GPIO_Init+0x200>)
 80011b2:	f001 fa63 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_GPIO_Init+0x200>)
 80011ca:	f001 fa57 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011e0:	230b      	movs	r3, #11
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_GPIO_Init+0x200>)
 80011ec:	f001 fa46 	bl	800267c <HAL_GPIO_Init>

}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40021800 	.word	0x40021800
 8001208:	40020800 	.word	0x40020800

0800120c <hc_sr04_init>:
#include "hcsr04.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2104      	movs	r1, #4
 8001232:	4618      	mov	r0, r3
 8001234:	f003 f87e 	bl	8004334 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4619      	mov	r1, r3
 8001242:	4610      	mov	r0, r2
 8001244:	f002 ff1a 	bl	800407c <HAL_TIM_PWM_Start>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(float distance_us)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	ed87 0a01 	vstr	s0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 800125a:	edd7 7a01 	vldr	s15, [r7, #4]
 800125e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001278 <hc_sr04_convert_us_to_cm+0x28>
 8001262:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001266:	eef0 7a66 	vmov.f32	s15, s13
}
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	42680000 	.word	0x42680000

0800127c <HAL_TIM_IC_CaptureCallback>:


char buff[10];

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_TIM_IC_CaptureCallback+0x40>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d112      	bne.n	80012b4 <HAL_TIM_IC_CaptureCallback+0x38>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800128e:	2104      	movs	r1, #4
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f003 fd7b 	bl	8004d8c <HAL_TIM_ReadCapturedValue>
 8001296:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	f7ff ffd3 	bl	8001250 <hc_sr04_convert_us_to_cm>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <HAL_TIM_IC_CaptureCallback+0x44>)
 80012b0:	edc3 7a03 	vstr	s15, [r3, #12]
	}
}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40010000 	.word	0x40010000
 80012c0:	2000008c 	.word	0x2000008c

080012c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	if(TIM3 == htim->Instance)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d14f      	bne.n	8001376 <HAL_TIM_PeriodElapsedCallback+0xb2>
	{
		robot_linear_update(&robot, distance_sensor.distance_cm, 1/16.6);
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012dc:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8001388 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	4829      	ldr	r0, [pc, #164]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012e6:	f000 fad5 	bl	8001894 <robot_linear_update>
		// motor_set_direction(&motor, 1);
		// motor_update_duty(&motor, controller_control_signal(&controller, robot_error(&robot)));
		motor_move(&left_motor, controller_control_signal(&controller, robot_error(&robot)));
 80012ea:	4828      	ldr	r0, [pc, #160]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80012ec:	f000 fb05 	bl	80018fa <robot_error>
 80012f0:	eef0 7a40 	vmov.f32	s15, s0
 80012f4:	eeb0 0a67 	vmov.f32	s0, s15
 80012f8:	4825      	ldr	r0, [pc, #148]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012fa:	f7ff fe09 	bl	8000f10 <controller_control_signal>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	4823      	ldr	r0, [pc, #140]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001308:	f000 fa48 	bl	800179c <motor_move>
		motor_move(&right_motor, controller_control_signal(&controller, robot_error(&robot)));
 800130c:	481f      	ldr	r0, [pc, #124]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800130e:	f000 faf4 	bl	80018fa <robot_error>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	481d      	ldr	r0, [pc, #116]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800131c:	f7ff fdf8 	bl	8000f10 <controller_control_signal>
 8001320:	eef0 7a40 	vmov.f32	s15, s0
 8001324:	eeb0 0a67 	vmov.f32	s0, s15
 8001328:	481b      	ldr	r0, [pc, #108]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800132a:	f000 fa37 	bl	800179c <motor_move>

		gcvt(left_motor.duty, 6, buff);
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff f928 	bl	8000588 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4917      	ldr	r1, [pc, #92]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800133e:	2006      	movs	r0, #6
 8001340:	ec43 2b10 	vmov	d0, r2, r3
 8001344:	f005 fb7a 	bl	8006a3c <gcvt>
		strcat(buff, "\r\n");
 8001348:	4814      	ldr	r0, [pc, #80]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800134a:	f7fe ff61 	bl	8000210 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001354:	4413      	add	r3, r2
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001358:	8811      	ldrh	r1, [r2, #0]
 800135a:	7892      	ldrb	r2, [r2, #2]
 800135c:	8019      	strh	r1, [r3, #0]
 800135e:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart3, (uint8_t*)buff, strlen(buff), 1000);
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001362:	f7fe ff55 	bl	8000210 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29a      	uxth	r2, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	490b      	ldr	r1, [pc, #44]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001372:	f004 fbe3 	bl	8005b3c <HAL_UART_Transmit>
	}
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40000400 	.word	0x40000400
 8001384:	2000008c 	.word	0x2000008c
 8001388:	3d76bf3b 	.word	0x3d76bf3b
 800138c:	200000e4 	.word	0x200000e4
 8001390:	2000009c 	.word	0x2000009c
 8001394:	200000b4 	.word	0x200000b4
 8001398:	200000cc 	.word	0x200000cc
 800139c:	20000100 	.word	0x20000100
 80013a0:	080091f8 	.word	0x080091f8
 80013a4:	200001f4 	.word	0x200001f4

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 ffd2 	bl	8002356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f863 	bl	800147c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f7ff fe25 	bl	8001004 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80013ba:	f000 fe6b 	bl	8002094 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013be:	f000 fef9 	bl	80021b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80013c2:	f000 fce5 	bl	8001d90 <MX_TIM3_Init>
  MX_TIM1_Init();
 80013c6:	f000 fbe5 	bl	8001b94 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013ca:	f000 fc87 	bl	8001cdc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 80013ce:	2308      	movs	r3, #8
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <main+0x9c>)
 80013d2:	491d      	ldr	r1, [pc, #116]	; (8001448 <main+0xa0>)
 80013d4:	481d      	ldr	r0, [pc, #116]	; (800144c <main+0xa4>)
 80013d6:	f7ff ff19 	bl	800120c <hc_sr04_init>
  robot_init(&robot, distance_sensor.distance_cm, INPUT_VALUE);
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <main+0xa4>)
 80013dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80013e0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001450 <main+0xa8>
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <main+0xac>)
 80013ea:	f000 fa31 	bl	8001850 <robot_init>
  robot_set_end_position(&robot, INPUT_VALUE);
 80013ee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8001450 <main+0xa8>
 80013f2:	4818      	ldr	r0, [pc, #96]	; (8001454 <main+0xac>)
 80013f4:	f000 fa72 	bl	80018dc <robot_set_end_position>
  controller_init(&controller, MAX_PWM, 300, MIN_PWM, MIN_ERROR, MAX_ERROR);
 80013f8:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8001450 <main+0xa8>
 80013fc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001400:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8001458 <main+0xb0>
 8001404:	eddf 0a15 	vldr	s1, [pc, #84]	; 800145c <main+0xb4>
 8001408:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001460 <main+0xb8>
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <main+0xbc>)
 800140e:	f7ff fd57 	bl	8000ec0 <controller_init>
  motor_init(&left_motor, &htim3, TIM_CHANNEL_1, FORWARD_MOTOR_1_GPIO_Port, BACKWARD_MOTOR_1_GPIO_Port, FORWARD_MOTOR_1_Pin, BACKWARD_MOTOR_1_Pin);
 8001412:	2320      	movs	r3, #32
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2310      	movs	r3, #16
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <main+0xc0>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <main+0xc0>)
 8001420:	2200      	movs	r2, #0
 8001422:	4912      	ldr	r1, [pc, #72]	; (800146c <main+0xc4>)
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <main+0xc8>)
 8001426:	f000 f896 	bl	8001556 <motor_init>
  motor_init(&right_motor, &htim3, TIM_CHANNEL_2, FORWARD_MOTOR_2_GPIO_Port, BACKWARD_MOTOR_2_GPIO_Port, FORWARD_MOTOR_2_Pin, BACKWARD_MOTOR_2_Pin);
 800142a:	2304      	movs	r3, #4
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2302      	movs	r3, #2
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <main+0xcc>)
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <main+0xcc>)
 8001438:	2204      	movs	r2, #4
 800143a:	490c      	ldr	r1, [pc, #48]	; (800146c <main+0xc4>)
 800143c:	480e      	ldr	r0, [pc, #56]	; (8001478 <main+0xd0>)
 800143e:	f000 f88a 	bl	8001556 <motor_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001442:	e7fe      	b.n	8001442 <main+0x9a>
 8001444:	2000015c 	.word	0x2000015c
 8001448:	20000110 	.word	0x20000110
 800144c:	2000008c 	.word	0x2000008c
 8001450:	42480000 	.word	0x42480000
 8001454:	200000e4 	.word	0x200000e4
 8001458:	43fa0000 	.word	0x43fa0000
 800145c:	43960000 	.word	0x43960000
 8001460:	447a0000 	.word	0x447a0000
 8001464:	2000009c 	.word	0x2000009c
 8001468:	40020000 	.word	0x40020000
 800146c:	200001a8 	.word	0x200001a8
 8001470:	200000b4 	.word	0x200000b4
 8001474:	40020400 	.word	0x40020400
 8001478:	200000cc 	.word	0x200000cc

0800147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	; 0x50
 8001480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2230      	movs	r2, #48	; 0x30
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f005 fb24 	bl	8006ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014a0:	f001 fbfa 	bl	8002c98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <SystemClock_Config+0xc8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a26      	ldr	r2, [pc, #152]	; (8001544 <SystemClock_Config+0xc8>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <SystemClock_Config+0xc8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <SystemClock_Config+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014c4:	4a20      	ldr	r2, [pc, #128]	; (8001548 <SystemClock_Config+0xcc>)
 80014c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <SystemClock_Config+0xcc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014f0:	2348      	movs	r3, #72	; 0x48
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014f8:	2303      	movs	r3, #3
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0320 	add.w	r3, r7, #32
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fbd9 	bl	8002cb8 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800150c:	f000 f81e 	bl	800154c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2302      	movs	r3, #2
 8001516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001526:	f107 030c 	add.w	r3, r7, #12
 800152a:	2102      	movs	r1, #2
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fe67 	bl	8003200 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001538:	f000 f808 	bl	800154c <Error_Handler>
  }
}
 800153c:	bf00      	nop
 800153e:	3750      	adds	r7, #80	; 0x50
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40007000 	.word	0x40007000

0800154c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001550:	b672      	cpsid	i
}
 8001552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001554:	e7fe      	b.n	8001554 <Error_Handler+0x8>

08001556 <motor_init>:
#include "motor.h"

void motor_init(struct Motor* motor,TIM_HandleTypeDef* htim, uint32_t PWM_CHANNEL, GPIO_TypeDef* FORWARD_PORT, GPIO_TypeDef* BACKWARD_PORT, uint16_t FORWARD_PIN, uint16_t BACKWARD_PIN){
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
 8001562:	603b      	str	r3, [r7, #0]
	motor->duty = 0;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
	motor->htim = htim;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]
	motor->FORWARD_PORT = FORWARD_PORT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	609a      	str	r2, [r3, #8]
	motor->BACKWARD_PORT = BACKWARD_PORT;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	60da      	str	r2, [r3, #12]
	motor->FORWARD_PIN = FORWARD_PIN;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8bba      	ldrh	r2, [r7, #28]
 8001588:	821a      	strh	r2, [r3, #16]
	motor->BACKWARD_PIN = BACKWARD_PIN;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8c3a      	ldrh	r2, [r7, #32]
 800158e:	825a      	strh	r2, [r3, #18]

	HAL_TIM_Base_Start_IT(motor->htim);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fca1 	bl	8003edc <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6898      	ldr	r0, [r3, #8]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8a1b      	ldrh	r3, [r3, #16]
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	f001 fa15 	bl	80029d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68d8      	ldr	r0, [r3, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8a5b      	ldrh	r3, [r3, #18]
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 fa0d 	bl	80029d4 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(motor->htim);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fc8c 	bl	8003edc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(motor->htim, PWM_CHANNEL);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fd56 	bl	800407c <HAL_TIM_PWM_Start>
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <motor_update_duty>:

void motor_update_duty(struct Motor* motor, float duty)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	ed87 0a00 	vstr	s0, [r7]
	motor->duty = duty;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10a      	bne.n	8001608 <motor_update_duty+0x30>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	edd7 7a00 	vldr	s15, [r7]
 80015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001600:	ee17 2a90 	vmov	r2, s15
 8001604:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001606:	e045      	b.n	8001694 <motor_update_duty+0xbc>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d10a      	bne.n	8001626 <motor_update_duty+0x4e>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	edd7 7a00 	vldr	s15, [r7]
 800161a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800161e:	ee17 3a90 	vmov	r3, s15
 8001622:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001624:	e036      	b.n	8001694 <motor_update_duty+0xbc>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d10a      	bne.n	8001644 <motor_update_duty+0x6c>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	edd7 7a00 	vldr	s15, [r7]
 8001638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800163c:	ee17 3a90 	vmov	r3, s15
 8001640:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001642:	e027      	b.n	8001694 <motor_update_duty+0xbc>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b0c      	cmp	r3, #12
 800164a:	d10a      	bne.n	8001662 <motor_update_duty+0x8a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	edd7 7a00 	vldr	s15, [r7]
 8001656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800165a:	ee17 3a90 	vmov	r3, s15
 800165e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001660:	e018      	b.n	8001694 <motor_update_duty+0xbc>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d10a      	bne.n	8001680 <motor_update_duty+0xa8>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	edd7 7a00 	vldr	s15, [r7]
 8001674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001678:	ee17 3a90 	vmov	r3, s15
 800167c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800167e:	e009      	b.n	8001694 <motor_update_duty+0xbc>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, duty);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	edd7 7a00 	vldr	s15, [r7]
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <motor_set_direction>:

void motor_set_direction(struct Motor* motor, _Bool direction)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
	if(direction)
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d010      	beq.n	80016d4 <motor_set_direction+0x34>
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6898      	ldr	r0, [r3, #8]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8a1b      	ldrh	r3, [r3, #16]
 80016ba:	2201      	movs	r2, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	f001 f989 	bl	80029d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68d8      	ldr	r0, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	8a5b      	ldrh	r3, [r3, #18]
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	f001 f981 	bl	80029d4 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 1);
	}
}
 80016d2:	e00f      	b.n	80016f4 <motor_set_direction+0x54>
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6898      	ldr	r0, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8a1b      	ldrh	r3, [r3, #16]
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	f001 f978 	bl	80029d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68d8      	ldr	r0, [r3, #12]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	8a5b      	ldrh	r3, [r3, #18]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	f001 f970 	bl	80029d4 <HAL_GPIO_WritePin>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <motor_stop>:

void motor_stop(struct Motor* motor)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	8a1b      	ldrh	r3, [r3, #16]
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	f001 f960 	bl	80029d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68d8      	ldr	r0, [r3, #12]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8a5b      	ldrh	r3, [r3, #18]
 800171c:	2200      	movs	r2, #0
 800171e:	4619      	mov	r1, r3
 8001720:	f001 f958 	bl	80029d4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d105      	bne.n	8001738 <motor_stop+0x3c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2200      	movs	r2, #0
 8001734:	635a      	str	r2, [r3, #52]	; 0x34
	//__HAL_TIM_SET_COMPARE(motor->htim, TIM_CHANNEL_2, 0);
}
 8001736:	e02c      	b.n	8001792 <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d105      	bne.n	800174c <motor_stop+0x50>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	6393      	str	r3, [r2, #56]	; 0x38
}
 800174a:	e022      	b.n	8001792 <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b08      	cmp	r3, #8
 8001752:	d105      	bne.n	8001760 <motor_stop+0x64>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800175e:	e018      	b.n	8001792 <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d105      	bne.n	8001774 <motor_stop+0x78>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001772:	e00e      	b.n	8001792 <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b10      	cmp	r3, #16
 800177a:	d105      	bne.n	8001788 <motor_stop+0x8c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2300      	movs	r3, #0
 8001784:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001786:	e004      	b.n	8001792 <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <motor_move>:

void motor_move(struct Motor* motor, float duty)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	ed87 0a00 	vstr	s0, [r7]
	if(motor->duty > 0)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	dd16      	ble.n	80017e6 <motor_move+0x4a>
	{
		motor_set_direction(motor, 1);
 80017b8:	2101      	movs	r1, #1
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ff70 	bl	80016a0 <motor_set_direction>
		motor_update_duty(motor, abs(duty));
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	f7fe fee1 	bl	8000588 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b10 	vmov	d0, r2, r3
 80017ce:	f005 f931 	bl	8006a34 <abs>
 80017d2:	ee07 0a90 	vmov	s15, r0
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fefa 	bl	80015d8 <motor_update_duty>
 80017e4:	e01d      	b.n	8001822 <motor_move+0x86>
	}
	else if(motor->duty < 0)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80017ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d515      	bpl.n	8001822 <motor_move+0x86>
	{
		motor_set_direction(motor, 0);
 80017f6:	2100      	movs	r1, #0
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff51 	bl	80016a0 <motor_set_direction>
		motor_update_duty(motor, abs(duty));
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7fe fec2 	bl	8000588 <__aeabi_f2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ec43 2b10 	vmov	d0, r2, r3
 800180c:	f005 f912 	bl	8006a34 <abs>
 8001810:	ee07 0a90 	vmov	s15, r0
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	eeb0 0a67 	vmov.f32	s0, s15
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff fedb 	bl	80015d8 <motor_update_duty>
	}
	if(motor->duty == 0)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edd3 7a05 	vldr	s15, [r3, #20]
 8001828:	eef5 7a40 	vcmp.f32	s15, #0.0
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d107      	bne.n	8001842 <motor_move+0xa6>
	{
		motor_stop(motor);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff62 	bl	80016fc <motor_stop>
		motor_update_duty(motor, 0);
 8001838:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800184c <motor_move+0xb0>
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fecb 	bl	80015d8 <motor_update_duty>
	}
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	00000000 	.word	0x00000000

08001850 <robot_init>:
#include "robot.h"

void robot_init(struct Robot* robot, float position, float orientation){
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	ed87 0a02 	vstr	s0, [r7, #8]
 800185c:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->previous_position = position;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	605a      	str	r2, [r3, #4]
	robot->position = position;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	601a      	str	r2, [r3, #0]
	robot->orientation = orientation;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
	robot->previous_orientation = orientation;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	60da      	str	r2, [r3, #12]
	robot->linear_velocity = 0;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
	robot->angular_velocity = 0;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <robot_linear_update>:

void robot_linear_update(struct Robot* robot, float measurement, float time){
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	ed87 0a02 	vstr	s0, [r7, #8]
 80018a0:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->position = measurement;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	601a      	str	r2, [r3, #0]
	robot->linear_velocity = (robot->position - robot->previous_position )/time;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	ed93 7a00 	vldr	s14, [r3]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80018b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80018be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	edc3 7a04 	vstr	s15, [r3, #16]
	robot->previous_position = robot->position;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <robot_set_end_position>:
	robot->angular_velocity = (robot->previous_orientation - robot->orientation)/time;
	robot->previous_orientation = robot->orientation;
}

void robot_set_end_position(struct Robot* robot, float end_position)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	ed87 0a00 	vstr	s0, [r7]
	robot->end_position = end_position;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <robot_error>:

float robot_error(struct Robot* robot)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	return robot->end_position - robot->position;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	ed93 7a06 	vldr	s14, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001912:	eeb0 0a67 	vmov.f32	s0, s15
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <HAL_MspInit+0x44>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_MspInit+0x44>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x44>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x44>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x44>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 fd0c 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <TIM1_CC_IRQHandler+0x10>)
 80019c2:	f002 fe07 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000110 	.word	0x20000110

080019d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM3_IRQHandler+0x10>)
 80019d6:	f002 fdfd 	bl	80045d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001a8 	.word	0x200001a8

080019e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
	return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_kill>:

int _kill(int pid, int sig)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019fe:	f005 f841 	bl	8006a84 <__errno>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2216      	movs	r2, #22
 8001a06:	601a      	str	r2, [r3, #0]
	return -1;
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_exit>:

void _exit (int status)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff ffe7 	bl	80019f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a26:	e7fe      	b.n	8001a26 <_exit+0x12>

08001a28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00a      	b.n	8001a50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a3a:	f3af 8000 	nop.w
 8001a3e:	4601      	mov	r1, r0
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	60ba      	str	r2, [r7, #8]
 8001a46:	b2ca      	uxtb	r2, r1
 8001a48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbf0      	blt.n	8001a3a <_read+0x12>
	}

return len;
 8001a58:	687b      	ldr	r3, [r7, #4]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e009      	b.n	8001a88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	60ba      	str	r2, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	3301      	adds	r3, #1
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	dbf1      	blt.n	8001a74 <_write+0x12>
	}
	return len;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <_close>:

int _close(int file)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
	return -1;
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_isatty>:

int _isatty(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
	return 1;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <_sbrk+0x5c>)
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <_sbrk+0x60>)
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b18:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d102      	bne.n	8001b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <_sbrk+0x64>)
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <_sbrk+0x68>)
 8001b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d207      	bcs.n	8001b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b34:	f004 ffa6 	bl	8006a84 <__errno>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	e009      	b.n	8001b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <_sbrk+0x64>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <_sbrk+0x64>)
 8001b54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b56:	68fb      	ldr	r3, [r7, #12]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20050000 	.word	0x20050000
 8001b64:	00000400 	.word	0x00000400
 8001b68:	2000010c 	.word	0x2000010c
 8001b6c:	20000798 	.word	0x20000798

08001b70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bd2:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <MX_TIM1_Init+0x144>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001bd6:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bd8:	2247      	movs	r2, #71	; 0x47
 8001bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bfc:	4835      	ldr	r0, [pc, #212]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001bfe:	f002 f915 	bl	8003e2c <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c08:	f7ff fca0 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c16:	4619      	mov	r1, r3
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001c1a:	f002 ffab 	bl	8004b74 <HAL_TIM_ConfigClockSource>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c24:	f7ff fc92 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c28:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001c2a:	f002 fb21 	bl	8004270 <HAL_TIM_IC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001c34:	f7ff fc8a 	bl	800154c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c3c:	2350      	movs	r3, #80	; 0x50
 8001c3e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001c54:	f003 f858 	bl	8004d08 <HAL_TIM_SlaveConfigSynchro>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8001c5e:	f7ff fc75 	bl	800154c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c66:	2301      	movs	r3, #1
 8001c68:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4816      	ldr	r0, [pc, #88]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001c7c:	f002 fdc9 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8001c86:	f7ff fc61 	bl	800154c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2204      	movs	r2, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001c9c:	f002 fdb9 	bl	8004812 <HAL_TIM_IC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001ca6:	f7ff fc51 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb6:	463b      	mov	r3, r7
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <MX_TIM1_Init+0x140>)
 8001cbc:	f003 fe44 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8001cc6:	f7ff fc41 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cca:	bf00      	nop
 8001ccc:	3740      	adds	r7, #64	; 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000110 	.word	0x20000110
 8001cd8:	40010000 	.word	0x40010000

08001cdc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d0a:	2247      	movs	r2, #71	; 0x47
 8001d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d16:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d2a:	f002 f94f 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001d34:	f7ff fc0a 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d48:	f003 fdfe 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001d52:	f7ff fbfb 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	; 0x60
 8001d58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d66:	463b      	mov	r3, r7
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d6e:	f002 fded 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d78:	f7ff fbe8 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <MX_TIM2_Init+0xb0>)
 8001d7e:	f000 f90f 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001d82:	bf00      	nop
 8001d84:	3728      	adds	r7, #40	; 0x28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000015c 	.word	0x2000015c

08001d90 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	; 0x38
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc2:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dc4:	4a32      	ldr	r2, [pc, #200]	; (8001e90 <MX_TIM3_Init+0x100>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dca:	2247      	movs	r2, #71	; 0x47
 8001dcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b2f      	ldr	r3, [pc, #188]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dd6:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001dda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de8:	4828      	ldr	r0, [pc, #160]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001dea:	f002 f81f 	bl	8003e2c <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001df4:	f7ff fbaa 	bl	800154c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e02:	4619      	mov	r1, r3
 8001e04:	4821      	ldr	r0, [pc, #132]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e06:	f002 feb5 	bl	8004b74 <HAL_TIM_ConfigClockSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001e10:	f7ff fb9c 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e14:	481d      	ldr	r0, [pc, #116]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e16:	f002 f8d9 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001e20:	f7ff fb94 	bl	800154c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4816      	ldr	r0, [pc, #88]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e34:	f003 fd88 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e3e:	f7ff fb85 	bl	800154c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e42:	2360      	movs	r3, #96	; 0x60
 8001e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	2200      	movs	r2, #0
 8001e56:	4619      	mov	r1, r3
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e5a:	f002 fd77 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e64:	f7ff fb72 	bl	800154c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e70:	f002 fd6c 	bl	800494c <HAL_TIM_PWM_ConfigChannel>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001e7a:	f7ff fb67 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e7e:	4803      	ldr	r0, [pc, #12]	; (8001e8c <MX_TIM3_Init+0xfc>)
 8001e80:	f000 f88e 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 8001e84:	bf00      	nop
 8001e86:	3738      	adds	r7, #56	; 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200001a8 	.word	0x200001a8
 8001e90:	40000400 	.word	0x40000400

08001e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a28      	ldr	r2, [pc, #160]	; (8001f54 <HAL_TIM_Base_MspInit+0xc0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d131      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	4a27      	ldr	r2, [pc, #156]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001ed4:	f043 0310 	orr.w	r3, r3, #16
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	4619      	mov	r1, r3
 8001f02:	4816      	ldr	r0, [pc, #88]	; (8001f5c <HAL_TIM_Base_MspInit+0xc8>)
 8001f04:	f000 fbba 	bl	800267c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	201b      	movs	r0, #27
 8001f0e:	f000 fb7e 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f12:	201b      	movs	r0, #27
 8001f14:	f000 fb97 	bl	8002646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f18:	e018      	b.n	8001f4c <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_TIM_Base_MspInit+0xcc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d113      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_TIM_Base_MspInit+0xc4>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	201d      	movs	r0, #29
 8001f42:	f000 fb64 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f46:	201d      	movs	r0, #29
 8001f48:	f000 fb7d 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40010000 	.word	0x40010000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40000400 	.word	0x40000400

08001f64 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f74:	d10b      	bne.n	8001f8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_TIM_PWM_MspInit+0x38>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_TIM_PWM_MspInit+0x38>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_TIM_PWM_MspInit+0x38>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	; 0x28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d11d      	bne.n	8001ffe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b2c      	ldr	r3, [pc, #176]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4823      	ldr	r0, [pc, #140]	; (8002084 <HAL_TIM_MspPostInit+0xe4>)
 8001ff8:	f000 fb40 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ffc:	e03c      	b.n	8002078 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <HAL_TIM_MspPostInit+0xe8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d137      	bne.n	8002078 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6313      	str	r3, [r2, #48]	; 0x30
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_TIM_MspPostInit+0xe0>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002038:	2340      	movs	r3, #64	; 0x40
 800203a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002048:	2302      	movs	r3, #2
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	480e      	ldr	r0, [pc, #56]	; (800208c <HAL_TIM_MspPostInit+0xec>)
 8002054:	f000 fb12 	bl	800267c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002068:	2302      	movs	r3, #2
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <HAL_TIM_MspPostInit+0xf0>)
 8002074:	f000 fb02 	bl	800267c <HAL_GPIO_Init>
}
 8002078:	bf00      	nop
 800207a:	3728      	adds	r7, #40	; 0x28
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	40020400 	.word	0x40020400
 8002088:	40000400 	.word	0x40000400
 800208c:	40020000 	.word	0x40020000
 8002090:	40020800 	.word	0x40020800

08002094 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_USART3_UART_Init+0x58>)
 800209a:	4a15      	ldr	r2, [pc, #84]	; (80020f0 <MX_USART3_UART_Init+0x5c>)
 800209c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020ba:	220c      	movs	r2, #12
 80020bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_USART3_UART_Init+0x58>)
 80020d8:	f003 fce2 	bl	8005aa0 <HAL_UART_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020e2:	f7ff fa33 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200001f4 	.word	0x200001f4
 80020f0:	40004800 	.word	0x40004800

080020f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0aa      	sub	sp, #168	; 0xa8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2284      	movs	r2, #132	; 0x84
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fcdf 	bl	8006ad8 <memset>
  if(uartHandle->Instance==USART3)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_UART_MspInit+0xb4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d13c      	bne.n	800219e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002128:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800212a:	2300      	movs	r3, #0
 800212c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800212e:	f107 0310 	add.w	r3, r7, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f001 fa8a 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800213e:	f7ff fa05 	bl	800154c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_UART_MspInit+0xb8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	4a19      	ldr	r2, [pc, #100]	; (80021ac <HAL_UART_MspInit+0xb8>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6413      	str	r3, [r2, #64]	; 0x40
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_UART_MspInit+0xb8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <HAL_UART_MspInit+0xb8>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a13      	ldr	r2, [pc, #76]	; (80021ac <HAL_UART_MspInit+0xb8>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_UART_MspInit+0xb8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800218c:	2307      	movs	r3, #7
 800218e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <HAL_UART_MspInit+0xbc>)
 800219a:	f000 fa6f 	bl	800267c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800219e:	bf00      	nop
 80021a0:	37a8      	adds	r7, #168	; 0xa8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40004800 	.word	0x40004800
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020c00 	.word	0x40020c00

080021b4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c2:	2206      	movs	r2, #6
 80021c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d4:	2202      	movs	r2, #2
 80021d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021da:	2201      	movs	r2, #1
 80021dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f8:	f000 fc05 	bl	8002a06 <HAL_PCD_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002202:	f7ff f9a3 	bl	800154c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000027c 	.word	0x2000027c

08002210 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0ac      	sub	sp, #176	; 0xb0
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	2284      	movs	r2, #132	; 0x84
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f004 fc51 	bl	8006ad8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223e:	d159      	bne.n	80022f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002244:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f9fb 	bl	800364c <HAL_RCCEx_PeriphCLKConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800225c:	f7ff f976 	bl	800154c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_PCD_MspInit+0xec>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_PCD_MspInit+0xec>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_PCD_MspInit+0xec>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800227c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002292:	230a      	movs	r3, #10
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229c:	4619      	mov	r1, r3
 800229e:	4818      	ldr	r0, [pc, #96]	; (8002300 <HAL_PCD_MspInit+0xf0>)
 80022a0:	f000 f9ec 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022bc:	4619      	mov	r1, r3
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <HAL_PCD_MspInit+0xf0>)
 80022c0:	f000 f9dc 	bl	800267c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	6353      	str	r3, [r2, #52]	; 0x34
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e6:	6453      	str	r3, [r2, #68]	; 0x44
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80022f4:	bf00      	nop
 80022f6:	37b0      	adds	r7, #176	; 0xb0
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002308:	480d      	ldr	r0, [pc, #52]	; (8002340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800230a:	490e      	ldr	r1, [pc, #56]	; (8002344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800230e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002310:	e002      	b.n	8002318 <LoopCopyDataInit>

08002312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002316:	3304      	adds	r3, #4

08002318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800231c:	d3f9      	bcc.n	8002312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002320:	4c0b      	ldr	r4, [pc, #44]	; (8002350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002324:	e001      	b.n	800232a <LoopFillZerobss>

08002326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002328:	3204      	adds	r2, #4

0800232a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800232c:	d3fb      	bcc.n	8002326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800232e:	f7ff fc1f 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002332:	f004 fbad 	bl	8006a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7ff f837 	bl	80013a8 <main>
  bx  lr    
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002344:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002348:	080094e8 	.word	0x080094e8
  ldr r2, =_sbss
 800234c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002350:	20000798 	.word	0x20000798

08002354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC_IRQHandler>

08002356 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235a:	2003      	movs	r0, #3
 800235c:	f000 f94c 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002360:	2000      	movs	r0, #0
 8002362:	f000 f805 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002366:	f7ff fadb 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_InitTick+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_InitTick+0x58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f967 	bl	8002662 <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f000 f92f 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x5c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000008 	.word	0x20000008
 80023cc:	20000004 	.word	0x20000004

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000008 	.word	0x20000008
 80023f4:	20000784 	.word	0x20000784

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000784 	.word	0x20000784

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <__NVIC_SetPriorityGrouping+0x40>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 8002482:	4313      	orrs	r3, r2
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <__NVIC_SetPriorityGrouping+0x40>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00
 800249c:	05fa0000 	.word	0x05fa0000

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e175      	b.n	8002988 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f040 8164 	bne.w	8002982 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d005      	beq.n	80026d2 <HAL_GPIO_Init+0x56>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d130      	bne.n	8002734 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 0201 	and.w	r2, r3, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b03      	cmp	r3, #3
 800273e:	d017      	beq.n	8002770 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d123      	bne.n	80027c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80be 	beq.w	8002982 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_GPIO_Init+0x324>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4a65      	ldr	r2, [pc, #404]	; (80029a0 <HAL_GPIO_Init+0x324>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002810:	6453      	str	r3, [r2, #68]	; 0x44
 8002812:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_GPIO_Init+0x324>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800281e:	4a61      	ldr	r2, [pc, #388]	; (80029a4 <HAL_GPIO_Init+0x328>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a58      	ldr	r2, [pc, #352]	; (80029a8 <HAL_GPIO_Init+0x32c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d037      	beq.n	80028ba <HAL_GPIO_Init+0x23e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a57      	ldr	r2, [pc, #348]	; (80029ac <HAL_GPIO_Init+0x330>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d031      	beq.n	80028b6 <HAL_GPIO_Init+0x23a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a56      	ldr	r2, [pc, #344]	; (80029b0 <HAL_GPIO_Init+0x334>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <HAL_GPIO_Init+0x236>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a55      	ldr	r2, [pc, #340]	; (80029b4 <HAL_GPIO_Init+0x338>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d025      	beq.n	80028ae <HAL_GPIO_Init+0x232>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a54      	ldr	r2, [pc, #336]	; (80029b8 <HAL_GPIO_Init+0x33c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d01f      	beq.n	80028aa <HAL_GPIO_Init+0x22e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a53      	ldr	r2, [pc, #332]	; (80029bc <HAL_GPIO_Init+0x340>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d019      	beq.n	80028a6 <HAL_GPIO_Init+0x22a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_GPIO_Init+0x344>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <HAL_GPIO_Init+0x348>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00d      	beq.n	800289e <HAL_GPIO_Init+0x222>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_GPIO_Init+0x34c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x21e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_GPIO_Init+0x350>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_GPIO_Init+0x21a>
 8002892:	2309      	movs	r3, #9
 8002894:	e012      	b.n	80028bc <HAL_GPIO_Init+0x240>
 8002896:	230a      	movs	r3, #10
 8002898:	e010      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289a:	2308      	movs	r3, #8
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x240>
 800289e:	2307      	movs	r3, #7
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x240>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x328>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b3d      	ldr	r3, [pc, #244]	; (80029d0 <HAL_GPIO_Init+0x354>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b32      	ldr	r3, [pc, #200]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a29      	ldr	r2, [pc, #164]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_GPIO_Init+0x354>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002958:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297c:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_GPIO_Init+0x354>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae86 	bls.w	800269c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40022400 	.word	0x40022400
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a08:	b08f      	sub	sp, #60	; 0x3c
 8002a0a:	af0a      	add	r7, sp, #40	; 0x28
 8002a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e116      	b.n	8002c46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fbec 	bl	8002210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d102      	bne.n	8002a52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f003 fd50 	bl	80064fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	687e      	ldr	r6, [r7, #4]
 8002a64:	466d      	mov	r5, sp
 8002a66:	f106 0410 	add.w	r4, r6, #16
 8002a6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a7a:	1d33      	adds	r3, r6, #4
 8002a7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a7e:	6838      	ldr	r0, [r7, #0]
 8002a80:	f003 fce4 	bl	800644c <USB_CoreInit>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0d7      	b.n	8002c46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f003 fd3e 	bl	800651e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e04a      	b.n	8002b3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	333d      	adds	r3, #61	; 0x3d
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	333c      	adds	r3, #60	; 0x3c
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	b298      	uxth	r0, r3
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3344      	adds	r3, #68	; 0x44
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3340      	adds	r3, #64	; 0x40
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002afc:	7bfa      	ldrb	r2, [r7, #15]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3348      	adds	r3, #72	; 0x48
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	334c      	adds	r3, #76	; 0x4c
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3354      	adds	r3, #84	; 0x54
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	73fb      	strb	r3, [r7, #15]
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d3af      	bcc.n	8002aa8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	2300      	movs	r3, #0
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e044      	b.n	8002bd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3b5      	bcc.n	8002b4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	687e      	ldr	r6, [r7, #4]
 8002bea:	466d      	mov	r5, sp
 8002bec:	f106 0410 	add.w	r4, r6, #16
 8002bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c00:	1d33      	adds	r3, r6, #4
 8002c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c04:	6838      	ldr	r0, [r7, #0]
 8002c06:	f003 fcd7 	bl	80065b8 <USB_DevInit>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e014      	b.n	8002c46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d102      	bne.n	8002c3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f80b 	bl	8002c50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f003 fe95 	bl	800696e <USB_DevDisconnect>

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c7e:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	10000003 	.word	0x10000003

08002c98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca6:	6013      	str	r3, [r2, #0]
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40007000 	.word	0x40007000

08002cb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e291      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8087 	beq.w	8002dea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cdc:	4b96      	ldr	r3, [pc, #600]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d00c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce8:	4b93      	ldr	r3, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62>
 8002cf4:	4b90      	ldr	r3, [pc, #576]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b8d      	ldr	r3, [pc, #564]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d06c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x130>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d168      	bne.n	8002de8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e26b      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x7a>
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a83      	ldr	r2, [pc, #524]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e02e      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x9c>
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b7c      	ldr	r3, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a7b      	ldr	r2, [pc, #492]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e01d      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0xc0>
 8002d5e:	4b76      	ldr	r3, [pc, #472]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a75      	ldr	r2, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a72      	ldr	r2, [pc, #456]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e00b      	b.n	8002d90 <HAL_RCC_OscConfig+0xd8>
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6b      	ldr	r2, [pc, #428]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7ff fb2e 	bl	80023f8 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002da0:	f7ff fb2a 	bl	80023f8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e21f      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe8>
 8002dbe:	e014      	b.n	8002dea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fb1a 	bl	80023f8 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff fb16 	bl	80023f8 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e20b      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1f0      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x110>
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d069      	beq.n	8002eca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002df6:	4b50      	ldr	r3, [pc, #320]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e02:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x190>
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d116      	bne.n	8002e48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1a:	4b47      	ldr	r3, [pc, #284]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d001      	beq.n	8002e32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e1df      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	493d      	ldr	r1, [pc, #244]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	e040      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d023      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a38      	ldr	r2, [pc, #224]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff facc 	bl	80023f8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e64:	f7ff fac8 	bl	80023f8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1bd      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4929      	ldr	r1, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
 8002e96:	e018      	b.n	8002eca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff faa8 	bl	80023f8 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eac:	f7ff faa4 	bl	80023f8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e199      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d038      	beq.n	8002f48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d019      	beq.n	8002f12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b16      	ldr	r3, [pc, #88]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	4a15      	ldr	r2, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eea:	f7ff fa85 	bl	80023f8 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef2:	f7ff fa81 	bl	80023f8 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e176      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x23a>
 8002f10:	e01a      	b.n	8002f48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_RCC_OscConfig+0x280>)
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fa6b 	bl	80023f8 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	e00a      	b.n	8002f3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f26:	f7ff fa67 	bl	80023f8 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d903      	bls.n	8002f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e15c      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
 8002f38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b91      	ldr	r3, [pc, #580]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ee      	bne.n	8002f26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a4 	beq.w	800309e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a87      	ldr	r2, [pc, #540]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7e:	4b82      	ldr	r3, [pc, #520]	; (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d118      	bne.n	8002fbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f8a:	4b7f      	ldr	r3, [pc, #508]	; (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a7e      	ldr	r2, [pc, #504]	; (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7ff fa2f 	bl	80023f8 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9e:	f7ff fa2b 	bl	80023f8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e120      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fb0:	4b75      	ldr	r3, [pc, #468]	; (8003188 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x31a>
 8002fc4:	4b6f      	ldr	r3, [pc, #444]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	4a6e      	ldr	r2, [pc, #440]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd0:	e02d      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x33c>
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a69      	ldr	r2, [pc, #420]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b67      	ldr	r3, [pc, #412]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a66      	ldr	r2, [pc, #408]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff2:	e01c      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x35e>
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a60      	ldr	r2, [pc, #384]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003002:	f043 0304 	orr.w	r3, r3, #4
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b5e      	ldr	r3, [pc, #376]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a5d      	ldr	r2, [pc, #372]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0x376>
 8003016:	4b5b      	ldr	r3, [pc, #364]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a5a      	ldr	r2, [pc, #360]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d015      	beq.n	8003062 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7ff f9df 	bl	80023f8 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7ff f9db 	bl	80023f8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0ce      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003054:	4b4b      	ldr	r3, [pc, #300]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <HAL_RCC_OscConfig+0x386>
 8003060:	e014      	b.n	800308c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7ff f9c9 	bl	80023f8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff f9c5 	bl	80023f8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003080:	4b40      	ldr	r3, [pc, #256]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ee      	bne.n	800306a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003092:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a3b      	ldr	r2, [pc, #236]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a4 	beq.w	80031f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d06b      	beq.n	800318c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d149      	bne.n	8003150 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030bc:	4b31      	ldr	r3, [pc, #196]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a30      	ldr	r2, [pc, #192]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f996 	bl	80023f8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7ff f992 	bl	80023f8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e087      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	3b01      	subs	r3, #1
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	4313      	orrs	r3, r2
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800311a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7ff f966 	bl	80023f8 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7ff f962 	bl	80023f8 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e057      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x478>
 800314e:	e04f      	b.n	80031f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7ff f94c 	bl	80023f8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7ff f948 	bl	80023f8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e03d      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_RCC_OscConfig+0x4cc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x4ac>
 8003182:	e035      	b.n	80031f0 <HAL_RCC_OscConfig+0x538>
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCC_OscConfig+0x544>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d028      	beq.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d121      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d11a      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d111      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d0      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b67      	ldr	r3, [pc, #412]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	4965      	ldr	r1, [pc, #404]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0b8      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d020      	beq.n	8003296 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003260:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800326a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800327e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	494d      	ldr	r1, [pc, #308]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d040      	beq.n	8003324 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e07f      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e073      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e06b      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4936      	ldr	r1, [pc, #216]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f4:	f7ff f880 	bl	80023f8 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	e00a      	b.n	8003312 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fc:	f7ff f87c 	bl	80023f8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	f241 3288 	movw	r2, #5000	; 0x1388
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e053      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 020c 	and.w	r2, r3, #12
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	429a      	cmp	r2, r3
 8003322:	d1eb      	bne.n	80032fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003324:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d210      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 020f 	bic.w	r2, r3, #15
 800333a:	4922      	ldr	r1, [pc, #136]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4916      	ldr	r1, [pc, #88]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800337e:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800338e:	4313      	orrs	r3, r2
 8003390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003392:	f000 f821 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	490a      	ldr	r1, [pc, #40]	; (80033cc <HAL_RCC_ClockConfig+0x1cc>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1d0>)
 80033ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_ClockConfig+0x1d4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe ffdc 	bl	8002370 <HAL_InitTick>

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40023c00 	.word	0x40023c00
 80033c8:	40023800 	.word	0x40023800
 80033cc:	080091fc 	.word	0x080091fc
 80033d0:	20000000 	.word	0x20000000
 80033d4:	20000004 	.word	0x20000004

080033d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b094      	sub	sp, #80	; 0x50
 80033de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	2300      	movs	r3, #0
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	2300      	movs	r3, #0
 80033ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033f0:	4b79      	ldr	r3, [pc, #484]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00d      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0x40>
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 80e1 	bhi.w	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_RCC_GetSysClockFreq+0x34>
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_RCC_GetSysClockFreq+0x3a>
 800340a:	e0db      	b.n	80035c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b73      	ldr	r3, [pc, #460]	; (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 800340e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003410:	e0db      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003412:	4b73      	ldr	r3, [pc, #460]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003414:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003416:	e0d8      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003418:	4b6f      	ldr	r3, [pc, #444]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800342e:	4b6a      	ldr	r3, [pc, #424]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	2200      	movs	r2, #0
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
 8003438:	63fa      	str	r2, [r7, #60]	; 0x3c
 800343a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
 8003446:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800344a:	4622      	mov	r2, r4
 800344c:	462b      	mov	r3, r5
 800344e:	f04f 0000 	mov.w	r0, #0
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	0159      	lsls	r1, r3, #5
 8003458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800345c:	0150      	lsls	r0, r2, #5
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4621      	mov	r1, r4
 8003464:	1a51      	subs	r1, r2, r1
 8003466:	6139      	str	r1, [r7, #16]
 8003468:	4629      	mov	r1, r5
 800346a:	eb63 0301 	sbc.w	r3, r3, r1
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800347c:	4659      	mov	r1, fp
 800347e:	018b      	lsls	r3, r1, #6
 8003480:	4651      	mov	r1, sl
 8003482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003486:	4651      	mov	r1, sl
 8003488:	018a      	lsls	r2, r1, #6
 800348a:	4651      	mov	r1, sl
 800348c:	ebb2 0801 	subs.w	r8, r2, r1
 8003490:	4659      	mov	r1, fp
 8003492:	eb63 0901 	sbc.w	r9, r3, r1
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034aa:	4690      	mov	r8, r2
 80034ac:	4699      	mov	r9, r3
 80034ae:	4623      	mov	r3, r4
 80034b0:	eb18 0303 	adds.w	r3, r8, r3
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	462b      	mov	r3, r5
 80034b8:	eb49 0303 	adc.w	r3, r9, r3
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034ca:	4629      	mov	r1, r5
 80034cc:	024b      	lsls	r3, r1, #9
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034d4:	4621      	mov	r1, r4
 80034d6:	024a      	lsls	r2, r1, #9
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034de:	2200      	movs	r2, #0
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e8:	f7fd fb68 	bl	8000bbc <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4613      	mov	r3, r2
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f4:	e058      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f6:	4b38      	ldr	r3, [pc, #224]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	099b      	lsrs	r3, r3, #6
 80034fc:	2200      	movs	r2, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	4611      	mov	r1, r2
 8003502:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003506:	623b      	str	r3, [r7, #32]
 8003508:	2300      	movs	r3, #0
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003510:	4642      	mov	r2, r8
 8003512:	464b      	mov	r3, r9
 8003514:	f04f 0000 	mov.w	r0, #0
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	0159      	lsls	r1, r3, #5
 800351e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003522:	0150      	lsls	r0, r2, #5
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4641      	mov	r1, r8
 800352a:	ebb2 0a01 	subs.w	sl, r2, r1
 800352e:	4649      	mov	r1, r9
 8003530:	eb63 0b01 	sbc.w	fp, r3, r1
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003540:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003544:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003548:	ebb2 040a 	subs.w	r4, r2, sl
 800354c:	eb63 050b 	sbc.w	r5, r3, fp
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	464b      	mov	r3, r9
 800356c:	eb45 0303 	adc.w	r3, r5, r3
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800357e:	4629      	mov	r1, r5
 8003580:	028b      	lsls	r3, r1, #10
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003588:	4621      	mov	r1, r4
 800358a:	028a      	lsls	r2, r1, #10
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003592:	2200      	movs	r2, #0
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	61fa      	str	r2, [r7, #28]
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	f7fd fb0e 	bl	8000bbc <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4613      	mov	r3, r2
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	3301      	adds	r3, #1
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c2:	e002      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c4:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetSysClockFreq+0x204>)
 80035c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3750      	adds	r7, #80	; 0x50
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200

080035e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000000 	.word	0x20000000

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003600:	f7ff fff0 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40023800 	.word	0x40023800
 8003620:	0800920c 	.word	0x0800920c

08003624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003628:	f7ff ffdc 	bl	80035e4 <HAL_RCC_GetHCLKFreq>
 800362c:	4602      	mov	r2, r0
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	0b5b      	lsrs	r3, r3, #13
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800363a:	5ccb      	ldrb	r3, [r1, r3]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	0800920c 	.word	0x0800920c

0800364c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d012      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003674:	4b69      	ldr	r3, [pc, #420]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	4a68      	ldr	r2, [pc, #416]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800367e:	6093      	str	r3, [r2, #8]
 8003680:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	4964      	ldr	r1, [pc, #400]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003696:	2301      	movs	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a6:	4b5d      	ldr	r3, [pc, #372]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	4959      	ldr	r1, [pc, #356]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036e2:	4b4e      	ldr	r3, [pc, #312]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	494a      	ldr	r1, [pc, #296]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800370e:	2301      	movs	r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800371e:	2301      	movs	r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 808b 	beq.w	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	4b3a      	ldr	r3, [pc, #232]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003734:	4a39      	ldr	r2, [pc, #228]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	; 0x40
 800373c:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003748:	4b35      	ldr	r3, [pc, #212]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a34      	ldr	r2, [pc, #208]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003754:	f7fe fe50 	bl	80023f8 <HAL_GetTick>
 8003758:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fe fe4c 	bl	80023f8 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e357      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800376e:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800377a:	4b28      	ldr	r3, [pc, #160]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003782:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d035      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	429a      	cmp	r2, r3
 8003796:	d02e      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003798:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ae:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ba:	4a18      	ldr	r2, [pc, #96]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d114      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fe14 	bl	80023f8 <HAL_GetTick>
 80037d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	e00a      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	f7fe fe10 	bl	80023f8 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e319      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ea:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0ee      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003802:	d111      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003812:	400b      	ands	r3, r1
 8003814:	4901      	ldr	r1, [pc, #4]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
 800381a:	e00b      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	0ffffcff 	.word	0x0ffffcff
 8003828:	4baa      	ldr	r3, [pc, #680]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4aa9      	ldr	r2, [pc, #676]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003832:	6093      	str	r3, [r2, #8]
 8003834:	4ba7      	ldr	r3, [pc, #668]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	49a4      	ldr	r1, [pc, #656]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	4313      	orrs	r3, r2
 8003844:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003852:	4ba0      	ldr	r3, [pc, #640]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003858:	4a9e      	ldr	r2, [pc, #632]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800385e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003862:	4b9c      	ldr	r3, [pc, #624]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	4999      	ldr	r1, [pc, #612]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003880:	4b94      	ldr	r3, [pc, #592]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003886:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800388e:	4991      	ldr	r1, [pc, #580]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a2:	4b8c      	ldr	r3, [pc, #560]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038b0:	4988      	ldr	r1, [pc, #544]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c4:	4b83      	ldr	r3, [pc, #524]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d2:	4980      	ldr	r1, [pc, #512]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038e6:	4b7b      	ldr	r3, [pc, #492]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4977      	ldr	r1, [pc, #476]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003908:	4b72      	ldr	r3, [pc, #456]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f023 0203 	bic.w	r2, r3, #3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	496f      	ldr	r1, [pc, #444]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800392a:	4b6a      	ldr	r3, [pc, #424]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f023 020c 	bic.w	r2, r3, #12
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	4966      	ldr	r1, [pc, #408]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800394c:	4b61      	ldr	r3, [pc, #388]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003952:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	495e      	ldr	r1, [pc, #376]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800396e:	4b59      	ldr	r3, [pc, #356]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397c:	4955      	ldr	r1, [pc, #340]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039b2:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c0:	4944      	ldr	r1, [pc, #272]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039d4:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	493c      	ldr	r1, [pc, #240]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039f6:	4b37      	ldr	r3, [pc, #220]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	4933      	ldr	r1, [pc, #204]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a18:	4b2e      	ldr	r3, [pc, #184]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a26:	492b      	ldr	r1, [pc, #172]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d011      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a48:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a58:	d101      	bne.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a88:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aac:	4909      	ldr	r1, [pc, #36]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d006      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80d9 	beq.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a01      	ldr	r2, [pc, #4]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	e001      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ada:	f7fe fc8d 	bl	80023f8 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ae2:	f7fe fc89 	bl	80023f8 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b64      	cmp	r3, #100	; 0x64
 8003aee:	d901      	bls.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e194      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af4:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1f0      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d021      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d11d      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b14:	4b64      	ldr	r3, [pc, #400]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b22:	4b61      	ldr	r3, [pc, #388]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b28:	0e1b      	lsrs	r3, r3, #24
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	019a      	lsls	r2, r3, #6
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	041b      	lsls	r3, r3, #16
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	061b      	lsls	r3, r3, #24
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	4957      	ldr	r1, [pc, #348]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b64:	d00a      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02e      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d129      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	0f1b      	lsrs	r3, r3, #28
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	019a      	lsls	r2, r3, #6
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	071b      	lsls	r3, r3, #28
 8003bb0:	493d      	ldr	r1, [pc, #244]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bb8:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbe:	f023 021f 	bic.w	r2, r3, #31
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	4937      	ldr	r1, [pc, #220]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01d      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bdc:	4b32      	ldr	r3, [pc, #200]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be2:	0e1b      	lsrs	r3, r3, #24
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bea:	4b2f      	ldr	r3, [pc, #188]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	0f1b      	lsrs	r3, r3, #28
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	019a      	lsls	r2, r3, #6
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	071b      	lsls	r3, r3, #28
 8003c10:	4925      	ldr	r1, [pc, #148]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d011      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	019a      	lsls	r2, r3, #6
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	071b      	lsls	r3, r3, #28
 8003c40:	4919      	ldr	r1, [pc, #100]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c48:	4b17      	ldr	r3, [pc, #92]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fe fbd0 	bl	80023f8 <HAL_GetTick>
 8003c58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c5c:	f7fe fbcc 	bl	80023f8 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e0d7      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	f040 80cd 	bne.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c8e:	f7fe fbb3 	bl	80023f8 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c94:	e00a      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c96:	f7fe fbaf 	bl	80023f8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d903      	bls.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e0ba      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ca8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cac:	4b5e      	ldr	r3, [pc, #376]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	d0ed      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02e      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d12a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cf0:	4b4d      	ldr	r3, [pc, #308]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf6:	0f1b      	lsrs	r3, r3, #28
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	019a      	lsls	r2, r3, #6
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	061b      	lsls	r3, r3, #24
 8003d10:	431a      	orrs	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	071b      	lsls	r3, r3, #28
 8003d16:	4944      	ldr	r1, [pc, #272]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d1e:	4b42      	ldr	r3, [pc, #264]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	493d      	ldr	r1, [pc, #244]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d4c:	d11d      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	0e1b      	lsrs	r3, r3, #24
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d5c:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	0f1b      	lsrs	r3, r3, #28
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	019a      	lsls	r2, r3, #6
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	431a      	orrs	r2, r3
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	071b      	lsls	r3, r3, #28
 8003d82:	4929      	ldr	r1, [pc, #164]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003daa:	0c1b      	lsrs	r3, r3, #16
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	019a      	lsls	r2, r3, #6
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	041b      	lsls	r3, r3, #16
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	061b      	lsls	r3, r3, #24
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	071b      	lsls	r3, r3, #28
 8003dca:	4917      	ldr	r1, [pc, #92]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4911      	ldr	r1, [pc, #68]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df4:	f7fe fb00 	bl	80023f8 <HAL_GetTick>
 8003df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dfc:	f7fe fafc 	bl	80023f8 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e007      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1a:	d1ef      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e049      	b.n	8003ed2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fe f81e 	bl	8001e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	f000 fff0 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e054      	b.n	8003f9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_TIM_Base_Start_IT+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1e:	d01d      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1e      	ldr	r2, [pc, #120]	; (8003fbc <HAL_TIM_Base_Start_IT+0xe0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1c      	ldr	r2, [pc, #112]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <HAL_TIM_Base_Start_IT+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d115      	bne.n	8003f88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xec>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b06      	cmp	r3, #6
 8003f6c:	d015      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0xbe>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f74:	d011      	beq.n	8003f9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0201 	orr.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f86:	e008      	b.n	8003f9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e000      	b.n	8003f9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00
 8003fbc:	40010400 	.word	0x40010400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40001800 	.word	0x40001800
 8003fc8:	00010007 	.word	0x00010007

08003fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e049      	b.n	8004072 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd ffb6 	bl	8001f64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 ff20 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d109      	bne.n	80040a0 <HAL_TIM_PWM_Start+0x24>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b01      	cmp	r3, #1
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	e03c      	b.n	800411a <HAL_TIM_PWM_Start+0x9e>
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d109      	bne.n	80040ba <HAL_TIM_PWM_Start+0x3e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	bf14      	ite	ne
 80040b2:	2301      	movne	r3, #1
 80040b4:	2300      	moveq	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	e02f      	b.n	800411a <HAL_TIM_PWM_Start+0x9e>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d109      	bne.n	80040d4 <HAL_TIM_PWM_Start+0x58>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	bf14      	ite	ne
 80040cc:	2301      	movne	r3, #1
 80040ce:	2300      	moveq	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	e022      	b.n	800411a <HAL_TIM_PWM_Start+0x9e>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d109      	bne.n	80040ee <HAL_TIM_PWM_Start+0x72>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e015      	b.n	800411a <HAL_TIM_PWM_Start+0x9e>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d109      	bne.n	8004108 <HAL_TIM_PWM_Start+0x8c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e008      	b.n	800411a <HAL_TIM_PWM_Start+0x9e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e092      	b.n	8004248 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d104      	bne.n	8004132 <HAL_TIM_PWM_Start+0xb6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004130:	e023      	b.n	800417a <HAL_TIM_PWM_Start+0xfe>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b04      	cmp	r3, #4
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xc6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004140:	e01b      	b.n	800417a <HAL_TIM_PWM_Start+0xfe>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0xd6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004150:	e013      	b.n	800417a <HAL_TIM_PWM_Start+0xfe>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xe6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004160:	e00b      	b.n	800417a <HAL_TIM_PWM_Start+0xfe>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b10      	cmp	r3, #16
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0xf6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004170:	e003      	b.n	800417a <HAL_TIM_PWM_Start+0xfe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	6839      	ldr	r1, [r7, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f001 fbba 	bl	80058fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a30      	ldr	r2, [pc, #192]	; (8004250 <HAL_TIM_PWM_Start+0x1d4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d004      	beq.n	800419c <HAL_TIM_PWM_Start+0x120>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_TIM_PWM_Start+0x1d8>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x124>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_TIM_PWM_Start+0x126>
 80041a0:	2300      	movs	r3, #0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a25      	ldr	r2, [pc, #148]	; (8004250 <HAL_TIM_PWM_Start+0x1d4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d01d      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_TIM_PWM_Start+0x1dc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a20      	ldr	r2, [pc, #128]	; (800425c <HAL_TIM_PWM_Start+0x1e0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_TIM_PWM_Start+0x1e4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_TIM_PWM_Start+0x1d8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1b      	ldr	r2, [pc, #108]	; (8004264 <HAL_TIM_PWM_Start+0x1e8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIM_PWM_Start+0x18a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <HAL_TIM_PWM_Start+0x1ec>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d115      	bne.n	8004232 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_TIM_PWM_Start+0x1f0>)
 800420e:	4013      	ands	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b06      	cmp	r3, #6
 8004216:	d015      	beq.n	8004244 <HAL_TIM_PWM_Start+0x1c8>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d011      	beq.n	8004244 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004230:	e008      	b.n	8004244 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e000      	b.n	8004246 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40010000 	.word	0x40010000
 8004254:	40010400 	.word	0x40010400
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40014000 	.word	0x40014000
 8004268:	40001800 	.word	0x40001800
 800426c:	00010007 	.word	0x00010007

08004270 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e049      	b.n	8004316 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f841 	bl	800431e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fdce 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <HAL_TIM_IC_Start_IT+0x1e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434e:	b2db      	uxtb	r3, r3
 8004350:	e023      	b.n	800439a <HAL_TIM_IC_Start_IT+0x66>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d104      	bne.n	8004362 <HAL_TIM_IC_Start_IT+0x2e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e01b      	b.n	800439a <HAL_TIM_IC_Start_IT+0x66>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d104      	bne.n	8004372 <HAL_TIM_IC_Start_IT+0x3e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e013      	b.n	800439a <HAL_TIM_IC_Start_IT+0x66>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b0c      	cmp	r3, #12
 8004376:	d104      	bne.n	8004382 <HAL_TIM_IC_Start_IT+0x4e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e00b      	b.n	800439a <HAL_TIM_IC_Start_IT+0x66>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b10      	cmp	r3, #16
 8004386:	d104      	bne.n	8004392 <HAL_TIM_IC_Start_IT+0x5e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800438e:	b2db      	uxtb	r3, r3
 8004390:	e003      	b.n	800439a <HAL_TIM_IC_Start_IT+0x66>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004398:	b2db      	uxtb	r3, r3
 800439a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_IC_Start_IT+0x78>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e013      	b.n	80043d4 <HAL_TIM_IC_Start_IT+0xa0>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d104      	bne.n	80043bc <HAL_TIM_IC_Start_IT+0x88>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e00b      	b.n	80043d4 <HAL_TIM_IC_Start_IT+0xa0>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d104      	bne.n	80043cc <HAL_TIM_IC_Start_IT+0x98>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_IC_Start_IT+0xa0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043d6:	7bbb      	ldrb	r3, [r7, #14]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043dc:	7b7b      	ldrb	r3, [r7, #13]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d001      	beq.n	80043e6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0e2      	b.n	80045ac <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_IC_Start_IT+0xc2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f4:	e023      	b.n	800443e <HAL_TIM_IC_Start_IT+0x10a>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b04      	cmp	r3, #4
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start_IT+0xd2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004404:	e01b      	b.n	800443e <HAL_TIM_IC_Start_IT+0x10a>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d104      	bne.n	8004416 <HAL_TIM_IC_Start_IT+0xe2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004414:	e013      	b.n	800443e <HAL_TIM_IC_Start_IT+0x10a>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d104      	bne.n	8004426 <HAL_TIM_IC_Start_IT+0xf2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004424:	e00b      	b.n	800443e <HAL_TIM_IC_Start_IT+0x10a>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b10      	cmp	r3, #16
 800442a:	d104      	bne.n	8004436 <HAL_TIM_IC_Start_IT+0x102>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004434:	e003      	b.n	800443e <HAL_TIM_IC_Start_IT+0x10a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_TIM_IC_Start_IT+0x11a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800444c:	e013      	b.n	8004476 <HAL_TIM_IC_Start_IT+0x142>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d104      	bne.n	800445e <HAL_TIM_IC_Start_IT+0x12a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800445c:	e00b      	b.n	8004476 <HAL_TIM_IC_Start_IT+0x142>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d104      	bne.n	800446e <HAL_TIM_IC_Start_IT+0x13a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800446c:	e003      	b.n	8004476 <HAL_TIM_IC_Start_IT+0x142>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d841      	bhi.n	8004500 <HAL_TIM_IC_Start_IT+0x1cc>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_TIM_IC_Start_IT+0x150>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	08004501 	.word	0x08004501
 800448c:	08004501 	.word	0x08004501
 8004490:	08004501 	.word	0x08004501
 8004494:	080044cb 	.word	0x080044cb
 8004498:	08004501 	.word	0x08004501
 800449c:	08004501 	.word	0x08004501
 80044a0:	08004501 	.word	0x08004501
 80044a4:	080044dd 	.word	0x080044dd
 80044a8:	08004501 	.word	0x08004501
 80044ac:	08004501 	.word	0x08004501
 80044b0:	08004501 	.word	0x08004501
 80044b4:	080044ef 	.word	0x080044ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0202 	orr.w	r2, r2, #2
 80044c6:	60da      	str	r2, [r3, #12]
      break;
 80044c8:	e01d      	b.n	8004506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0204 	orr.w	r2, r2, #4
 80044d8:	60da      	str	r2, [r3, #12]
      break;
 80044da:	e014      	b.n	8004506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0208 	orr.w	r2, r2, #8
 80044ea:	60da      	str	r2, [r3, #12]
      break;
 80044ec:	e00b      	b.n	8004506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0210 	orr.w	r2, r2, #16
 80044fc:	60da      	str	r2, [r3, #12]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      break;
 8004504:	bf00      	nop
  }

  if (status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d14e      	bne.n	80045aa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f001 f9f1 	bl	80058fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <HAL_TIM_IC_Start_IT+0x280>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452c:	d01d      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <HAL_TIM_IC_Start_IT+0x284>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1f      	ldr	r2, [pc, #124]	; (80045bc <HAL_TIM_IC_Start_IT+0x288>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1c      	ldr	r2, [pc, #112]	; (80045c4 <HAL_TIM_IC_Start_IT+0x290>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	; (80045c8 <HAL_TIM_IC_Start_IT+0x294>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_TIM_IC_Start_IT+0x236>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIM_IC_Start_IT+0x298>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d115      	bne.n	8004596 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <HAL_TIM_IC_Start_IT+0x29c>)
 8004572:	4013      	ands	r3, r2
 8004574:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b06      	cmp	r3, #6
 800457a:	d015      	beq.n	80045a8 <HAL_TIM_IC_Start_IT+0x274>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004582:	d011      	beq.n	80045a8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	e008      	b.n	80045a8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	e000      	b.n	80045aa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40001800 	.word	0x40001800
 80045d0:	00010007 	.word	0x00010007

080045d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d122      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d11b      	bne.n	8004630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0202 	mvn.w	r2, #2
 8004600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fe30 	bl	800127c <HAL_TIM_IC_CaptureCallback>
 800461c:	e005      	b.n	800462a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fbf8 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fbff 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b04      	cmp	r3, #4
 800463c:	d122      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0204 	mvn.w	r2, #4
 8004654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2202      	movs	r2, #2
 800465a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc fe06 	bl	800127c <HAL_TIM_IC_CaptureCallback>
 8004670:	e005      	b.n	800467e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fbce 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fbd5 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b08      	cmp	r3, #8
 8004690:	d122      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b08      	cmp	r3, #8
 800469e:	d11b      	bne.n	80046d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0208 	mvn.w	r2, #8
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2204      	movs	r2, #4
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fddc 	bl	800127c <HAL_TIM_IC_CaptureCallback>
 80046c4:	e005      	b.n	80046d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fba4 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fbab 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d122      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d11b      	bne.n	800472c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2208      	movs	r2, #8
 8004702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc fdb2 	bl	800127c <HAL_TIM_IC_CaptureCallback>
 8004718:	e005      	b.n	8004726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fb7a 	bl	8004e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 fb81 	bl	8004e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fdb6 	bl	80012c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004770:	2b80      	cmp	r3, #128	; 0x80
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 f97a 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004792:	d10e      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d107      	bne.n	80047b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f96d 	bl	8005a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	d10e      	bne.n	80047de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d107      	bne.n	80047de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fb2f 	bl	8004e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d10e      	bne.n	800480a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d107      	bne.n	800480a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0220 	mvn.w	r2, #32
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f92d 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIM_IC_ConfigChannel+0x1e>
 800482c:	2302      	movs	r3, #2
 800482e:	e088      	b.n	8004942 <HAL_TIM_IC_ConfigChannel+0x130>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11b      	bne.n	8004876 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6819      	ldr	r1, [r3, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 fe91 	bl	8005574 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 020c 	bic.w	r2, r2, #12
 8004860:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6999      	ldr	r1, [r3, #24]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
 8004874:	e060      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2b04      	cmp	r3, #4
 800487a:	d11c      	bne.n	80048b6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f000 ff15 	bl	80056ba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699a      	ldr	r2, [r3, #24]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800489e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6999      	ldr	r1, [r3, #24]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	021a      	lsls	r2, r3, #8
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	619a      	str	r2, [r3, #24]
 80048b4:	e040      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f000 ff62 	bl	8005794 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69da      	ldr	r2, [r3, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020c 	bic.w	r2, r2, #12
 80048de:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69d9      	ldr	r1, [r3, #28]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	689a      	ldr	r2, [r3, #8]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e021      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d11c      	bne.n	8004934 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f000 ff7f 	bl	800580c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800491c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
 8004932:	e001      	b.n	8004938 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004958:	2300      	movs	r3, #0
 800495a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004966:	2302      	movs	r3, #2
 8004968:	e0ff      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b14      	cmp	r3, #20
 8004976:	f200 80f0 	bhi.w	8004b5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800497a:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004b5b 	.word	0x08004b5b
 8004988:	08004b5b 	.word	0x08004b5b
 800498c:	08004b5b 	.word	0x08004b5b
 8004990:	08004a15 	.word	0x08004a15
 8004994:	08004b5b 	.word	0x08004b5b
 8004998:	08004b5b 	.word	0x08004b5b
 800499c:	08004b5b 	.word	0x08004b5b
 80049a0:	08004a57 	.word	0x08004a57
 80049a4:	08004b5b 	.word	0x08004b5b
 80049a8:	08004b5b 	.word	0x08004b5b
 80049ac:	08004b5b 	.word	0x08004b5b
 80049b0:	08004a97 	.word	0x08004a97
 80049b4:	08004b5b 	.word	0x08004b5b
 80049b8:	08004b5b 	.word	0x08004b5b
 80049bc:	08004b5b 	.word	0x08004b5b
 80049c0:	08004ad9 	.word	0x08004ad9
 80049c4:	08004b5b 	.word	0x08004b5b
 80049c8:	08004b5b 	.word	0x08004b5b
 80049cc:	08004b5b 	.word	0x08004b5b
 80049d0:	08004b19 	.word	0x08004b19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68b9      	ldr	r1, [r7, #8]
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fad8 	bl	8004f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0208 	orr.w	r2, r2, #8
 80049ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0204 	bic.w	r2, r2, #4
 80049fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6999      	ldr	r1, [r3, #24]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	619a      	str	r2, [r3, #24]
      break;
 8004a12:	e0a5      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb2a 	bl	8005074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699a      	ldr	r2, [r3, #24]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6999      	ldr	r1, [r3, #24]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	021a      	lsls	r2, r3, #8
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	619a      	str	r2, [r3, #24]
      break;
 8004a54:	e084      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb81 	bl	8005164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69da      	ldr	r2, [r3, #28]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0208 	orr.w	r2, r2, #8
 8004a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0204 	bic.w	r2, r2, #4
 8004a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69d9      	ldr	r1, [r3, #28]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	61da      	str	r2, [r3, #28]
      break;
 8004a94:	e064      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68b9      	ldr	r1, [r7, #8]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fbd7 	bl	8005250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	69da      	ldr	r2, [r3, #28]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69d9      	ldr	r1, [r3, #28]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	021a      	lsls	r2, r3, #8
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
      break;
 8004ad6:	e043      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fc0e 	bl	8005300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b16:	e023      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fc40 	bl	80053a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b58:	e002      	b.n	8004b60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop

08004b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_ConfigClockSource+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0b4      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x186>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4b56      	ldr	r3, [pc, #344]	; (8004d04 <HAL_TIM_ConfigClockSource+0x190>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc8:	d03e      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0xd4>
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bce:	f200 8087 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd6:	f000 8086 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x172>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	d87f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b70      	cmp	r3, #112	; 0x70
 8004be2:	d01a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xa6>
 8004be4:	2b70      	cmp	r3, #112	; 0x70
 8004be6:	d87b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b60      	cmp	r3, #96	; 0x60
 8004bea:	d050      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x11a>
 8004bec:	2b60      	cmp	r3, #96	; 0x60
 8004bee:	d877      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b50      	cmp	r3, #80	; 0x50
 8004bf2:	d03c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xfa>
 8004bf4:	2b50      	cmp	r3, #80	; 0x50
 8004bf6:	d873      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d058      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x13a>
 8004bfc:	2b40      	cmp	r3, #64	; 0x40
 8004bfe:	d86f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b30      	cmp	r3, #48	; 0x30
 8004c02:	d064      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c04:	2b30      	cmp	r3, #48	; 0x30
 8004c06:	d86b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d060      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d867      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d05a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c18:	e062      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6899      	ldr	r1, [r3, #8]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f000 fe47 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
      break;
 8004c46:	e04f      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f000 fe30 	bl	80058bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c6a:	609a      	str	r2, [r3, #8]
      break;
 8004c6c:	e03c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fcee 	bl	800565c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2150      	movs	r1, #80	; 0x50
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fdfd 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e02c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fd4a 	bl	8005734 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2160      	movs	r1, #96	; 0x60
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fded 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8004cac:	e01c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 fcce 	bl	800565c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fddd 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e00c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 fdd4 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8004cde:	e003      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	fffeff88 	.word	0xfffeff88

08004d08 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d101      	bne.n	8004d20 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	e031      	b.n	8004d84 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb8a 	bl	800544c <TIM_SlaveTimer_SetConfig>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e018      	b.n	8004d84 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d70:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d831      	bhi.n	8004e04 <HAL_TIM_ReadCapturedValue+0x78>
 8004da0:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004ddd 	.word	0x08004ddd
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004de7 	.word	0x08004de7
 8004dbc:	08004e05 	.word	0x08004e05
 8004dc0:	08004e05 	.word	0x08004e05
 8004dc4:	08004e05 	.word	0x08004e05
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004e05 	.word	0x08004e05
 8004dd0:	08004e05 	.word	0x08004e05
 8004dd4:	08004e05 	.word	0x08004e05
 8004dd8:	08004dfb 	.word	0x08004dfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	60fb      	str	r3, [r7, #12]

      break;
 8004de4:	e00f      	b.n	8004e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	60fb      	str	r3, [r7, #12]

      break;
 8004dee:	e00a      	b.n	8004e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df6:	60fb      	str	r3, [r7, #12]

      break;
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	60fb      	str	r3, [r7, #12]

      break;
 8004e02:	e000      	b.n	8004e06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004e04:	bf00      	nop
  }

  return tmpreg;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d027      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000

08004f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0201 	bic.w	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4b2b      	ldr	r3, [pc, #172]	; (8005068 <TIM_OC1_SetConfig+0xd8>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0302 	bic.w	r3, r3, #2
 8004fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a21      	ldr	r2, [pc, #132]	; (800506c <TIM_OC1_SetConfig+0xdc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x64>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a20      	ldr	r2, [pc, #128]	; (8005070 <TIM_OC1_SetConfig+0xe0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a16      	ldr	r2, [pc, #88]	; (800506c <TIM_OC1_SetConfig+0xdc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_OC1_SetConfig+0x8e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a15      	ldr	r2, [pc, #84]	; (8005070 <TIM_OC1_SetConfig+0xe0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d111      	bne.n	8005042 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	621a      	str	r2, [r3, #32]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	fffeff8f 	.word	0xfffeff8f
 800506c:	40010000 	.word	0x40010000
 8005070:	40010400 	.word	0x40010400

08005074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0210 	bic.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4b2e      	ldr	r3, [pc, #184]	; (8005158 <TIM_OC2_SetConfig+0xe4>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 0320 	bic.w	r3, r3, #32
 80050be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a23      	ldr	r2, [pc, #140]	; (800515c <TIM_OC2_SetConfig+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC2_SetConfig+0x68>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a22      	ldr	r2, [pc, #136]	; (8005160 <TIM_OC2_SetConfig+0xec>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10d      	bne.n	80050f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a18      	ldr	r2, [pc, #96]	; (800515c <TIM_OC2_SetConfig+0xe8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC2_SetConfig+0x94>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <TIM_OC2_SetConfig+0xec>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d113      	bne.n	8005130 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800510e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	feff8fff 	.word	0xfeff8fff
 800515c:	40010000 	.word	0x40010000
 8005160:	40010400 	.word	0x40010400

08005164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4b2d      	ldr	r3, [pc, #180]	; (8005244 <TIM_OC3_SetConfig+0xe0>)
 8005190:	4013      	ands	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0303 	bic.w	r3, r3, #3
 800519a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a22      	ldr	r2, [pc, #136]	; (8005248 <TIM_OC3_SetConfig+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC3_SetConfig+0x66>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a21      	ldr	r2, [pc, #132]	; (800524c <TIM_OC3_SetConfig+0xe8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10d      	bne.n	80051e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a17      	ldr	r2, [pc, #92]	; (8005248 <TIM_OC3_SetConfig+0xe4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d003      	beq.n	80051f6 <TIM_OC3_SetConfig+0x92>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <TIM_OC3_SetConfig+0xe8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d113      	bne.n	800521e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	fffeff8f 	.word	0xfffeff8f
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <TIM_OC4_SetConfig+0xa4>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	021b      	lsls	r3, r3, #8
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800529a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a13      	ldr	r2, [pc, #76]	; (80052f8 <TIM_OC4_SetConfig+0xa8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d003      	beq.n	80052b8 <TIM_OC4_SetConfig+0x68>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a12      	ldr	r2, [pc, #72]	; (80052fc <TIM_OC4_SetConfig+0xac>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d109      	bne.n	80052cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	feff8fff 	.word	0xfeff8fff
 80052f8:	40010000 	.word	0x40010000
 80052fc:	40010400 	.word	0x40010400

08005300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <TIM_OC5_SetConfig+0x98>)
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a12      	ldr	r2, [pc, #72]	; (800539c <TIM_OC5_SetConfig+0x9c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d003      	beq.n	800535e <TIM_OC5_SetConfig+0x5e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <TIM_OC5_SetConfig+0xa0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d109      	bne.n	8005372 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005364:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	021b      	lsls	r3, r3, #8
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	fffeff8f 	.word	0xfffeff8f
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400

080053a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <TIM_OC6_SetConfig+0x9c>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	051b      	lsls	r3, r3, #20
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <TIM_OC6_SetConfig+0xa0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d003      	beq.n	8005404 <TIM_OC6_SetConfig+0x60>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <TIM_OC6_SetConfig+0xa4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d109      	bne.n	8005418 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	029b      	lsls	r3, r3, #10
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	4313      	orrs	r3, r2
 8005416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	feff8fff 	.word	0xfeff8fff
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400

0800544c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4b3e      	ldr	r3, [pc, #248]	; (8005570 <TIM_SlaveTimer_SetConfig+0x124>)
 8005478:	4013      	ands	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b70      	cmp	r3, #112	; 0x70
 8005494:	d01a      	beq.n	80054cc <TIM_SlaveTimer_SetConfig+0x80>
 8005496:	2b70      	cmp	r3, #112	; 0x70
 8005498:	d860      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 800549a:	2b60      	cmp	r3, #96	; 0x60
 800549c:	d054      	beq.n	8005548 <TIM_SlaveTimer_SetConfig+0xfc>
 800549e:	2b60      	cmp	r3, #96	; 0x60
 80054a0:	d85c      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 80054a2:	2b50      	cmp	r3, #80	; 0x50
 80054a4:	d046      	beq.n	8005534 <TIM_SlaveTimer_SetConfig+0xe8>
 80054a6:	2b50      	cmp	r3, #80	; 0x50
 80054a8:	d858      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d019      	beq.n	80054e2 <TIM_SlaveTimer_SetConfig+0x96>
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d854      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 80054b2:	2b30      	cmp	r3, #48	; 0x30
 80054b4:	d055      	beq.n	8005562 <TIM_SlaveTimer_SetConfig+0x116>
 80054b6:	2b30      	cmp	r3, #48	; 0x30
 80054b8:	d850      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d051      	beq.n	8005562 <TIM_SlaveTimer_SetConfig+0x116>
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d84c      	bhi.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d04d      	beq.n	8005562 <TIM_SlaveTimer_SetConfig+0x116>
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d04b      	beq.n	8005562 <TIM_SlaveTimer_SetConfig+0x116>
 80054ca:	e047      	b.n	800555c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68d9      	ldr	r1, [r3, #12]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f000 f9ee 	bl	80058bc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80054e0:	e040      	b.n	8005564 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d101      	bne.n	80054ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e03b      	b.n	8005566 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6a1a      	ldr	r2, [r3, #32]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005514:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	621a      	str	r2, [r3, #32]
      break;
 8005532:	e017      	b.n	8005564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	461a      	mov	r2, r3
 8005542:	f000 f88b 	bl	800565c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005546:	e00d      	b.n	8005564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6899      	ldr	r1, [r3, #8]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	461a      	mov	r2, r3
 8005556:	f000 f8ed 	bl	8005734 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800555a:	e003      	b.n	8005564 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
      break;
 8005560:	e000      	b.n	8005564 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005562:	bf00      	nop
  }

  return status;
 8005564:	7dfb      	ldrb	r3, [r7, #23]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	fffefff8 	.word	0xfffefff8

08005574 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a28      	ldr	r2, [pc, #160]	; (8005640 <TIM_TI1_SetConfig+0xcc>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01b      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d017      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a25      	ldr	r2, [pc, #148]	; (8005644 <TIM_TI1_SetConfig+0xd0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a24      	ldr	r2, [pc, #144]	; (8005648 <TIM_TI1_SetConfig+0xd4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a23      	ldr	r2, [pc, #140]	; (800564c <TIM_TI1_SetConfig+0xd8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a22      	ldr	r2, [pc, #136]	; (8005650 <TIM_TI1_SetConfig+0xdc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a21      	ldr	r2, [pc, #132]	; (8005654 <TIM_TI1_SetConfig+0xe0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_TI1_SetConfig+0x66>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <TIM_TI1_SetConfig+0xe4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d101      	bne.n	80055de <TIM_TI1_SetConfig+0x6a>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <TIM_TI1_SetConfig+0x6c>
 80055de:	2300      	movs	r3, #0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d008      	beq.n	80055f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e003      	b.n	80055fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	b2db      	uxtb	r3, r3
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f023 030a 	bic.w	r3, r3, #10
 8005618:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 030a 	and.w	r3, r3, #10
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	4313      	orrs	r3, r2
 8005624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40010000 	.word	0x40010000
 8005644:	40000400 	.word	0x40000400
 8005648:	40000800 	.word	0x40000800
 800564c:	40000c00 	.word	0x40000c00
 8005650:	40010400 	.word	0x40010400
 8005654:	40014000 	.word	0x40014000
 8005658:	40001800 	.word	0x40001800

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0201 	bic.w	r2, r3, #1
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f023 030a 	bic.w	r3, r3, #10
 8005698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	621a      	str	r2, [r3, #32]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b087      	sub	sp, #28
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
 80056c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f023 0210 	bic.w	r2, r3, #16
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	031b      	lsls	r3, r3, #12
 80056fe:	b29b      	uxth	r3, r3
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800570c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f023 0210 	bic.w	r2, r3, #16
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800575e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	031b      	lsls	r3, r3, #12
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005770:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	621a      	str	r2, [r3, #32]
}
 8005788:	bf00      	nop
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0303 	bic.w	r3, r3, #3
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	021b      	lsls	r3, r3, #8
 80057ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005838:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800584a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	b29b      	uxth	r3, r3
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800585e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	031b      	lsls	r3, r3, #12
 8005864:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f043 0307 	orr.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	021a      	lsls	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	431a      	orrs	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b087      	sub	sp, #28
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 031f 	and.w	r3, r3, #31
 800590e:	2201      	movs	r2, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1a      	ldr	r2, [r3, #32]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	43db      	mvns	r3, r3
 800591e:	401a      	ands	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
	...

08005948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e06d      	b.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a30      	ldr	r2, [pc, #192]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2f      	ldr	r2, [pc, #188]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d108      	bne.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800599a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d022      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d01d      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	; (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d018      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	; (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00e      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a15      	ldr	r2, [pc, #84]	; (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d009      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d004      	beq.n	8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d10c      	bne.n	8005a2a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40000400 	.word	0x40000400
 8005a54:	40000800 	.word	0x40000800
 8005a58:	40000c00 	.word	0x40000c00
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40001800 	.word	0x40001800

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e040      	b.n	8005b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fc fb16 	bl	80020f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2224      	movs	r2, #36	; 0x24
 8005acc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8b0 	bl	8005c44 <UART_SetConfig>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e022      	b.n	8005b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fb08 	bl	800610c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fb8f 	bl	8006250 <UART_CheckIdleState>
 8005b32:	4603      	mov	r3, r0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d171      	bne.n	8005c38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <HAL_UART_Transmit+0x24>
 8005b5a:	88fb      	ldrh	r3, [r7, #6]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e06a      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2221      	movs	r2, #33	; 0x21
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b72:	f7fc fc41 	bl	80023f8 <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	88fa      	ldrh	r2, [r7, #6]
 8005b7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d108      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	61bb      	str	r3, [r7, #24]
 8005ba2:	e003      	b.n	8005bac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bac:	e02c      	b.n	8005c08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fb80 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e038      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	3302      	adds	r3, #2
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e007      	b.n	8005bf6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1cc      	bne.n	8005bae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2140      	movs	r1, #64	; 0x40
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fb4d 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e005      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4ba6      	ldr	r3, [pc, #664]	; (8005f08 <UART_SetConfig+0x2c4>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	6979      	ldr	r1, [r7, #20]
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a94      	ldr	r2, [pc, #592]	; (8005f0c <UART_SetConfig+0x2c8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d120      	bne.n	8005d02 <UART_SetConfig+0xbe>
 8005cc0:	4b93      	ldr	r3, [pc, #588]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b03      	cmp	r3, #3
 8005ccc:	d816      	bhi.n	8005cfc <UART_SetConfig+0xb8>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0x90>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005ceb 	.word	0x08005ceb
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e150      	b.n	8005f8c <UART_SetConfig+0x348>
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e14d      	b.n	8005f8c <UART_SetConfig+0x348>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e14a      	b.n	8005f8c <UART_SetConfig+0x348>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e147      	b.n	8005f8c <UART_SetConfig+0x348>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e144      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a83      	ldr	r2, [pc, #524]	; (8005f14 <UART_SetConfig+0x2d0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d132      	bne.n	8005d72 <UART_SetConfig+0x12e>
 8005d0c:	4b80      	ldr	r3, [pc, #512]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f003 030c 	and.w	r3, r3, #12
 8005d16:	2b0c      	cmp	r3, #12
 8005d18:	d828      	bhi.n	8005d6c <UART_SetConfig+0x128>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0xdc>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d55 	.word	0x08005d55
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d61 	.word	0x08005d61
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005d6d 	.word	0x08005d6d
 8005d40:	08005d5b 	.word	0x08005d5b
 8005d44:	08005d6d 	.word	0x08005d6d
 8005d48:	08005d6d 	.word	0x08005d6d
 8005d4c:	08005d6d 	.word	0x08005d6d
 8005d50:	08005d67 	.word	0x08005d67
 8005d54:	2300      	movs	r3, #0
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e118      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e115      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d60:	2304      	movs	r3, #4
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e112      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d66:	2308      	movs	r3, #8
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e10f      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d6c:	2310      	movs	r3, #16
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e10c      	b.n	8005f8c <UART_SetConfig+0x348>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a68      	ldr	r2, [pc, #416]	; (8005f18 <UART_SetConfig+0x2d4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d120      	bne.n	8005dbe <UART_SetConfig+0x17a>
 8005d7c:	4b64      	ldr	r3, [pc, #400]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d86:	2b30      	cmp	r3, #48	; 0x30
 8005d88:	d013      	beq.n	8005db2 <UART_SetConfig+0x16e>
 8005d8a:	2b30      	cmp	r3, #48	; 0x30
 8005d8c:	d814      	bhi.n	8005db8 <UART_SetConfig+0x174>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d009      	beq.n	8005da6 <UART_SetConfig+0x162>
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d810      	bhi.n	8005db8 <UART_SetConfig+0x174>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <UART_SetConfig+0x15c>
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d006      	beq.n	8005dac <UART_SetConfig+0x168>
 8005d9e:	e00b      	b.n	8005db8 <UART_SetConfig+0x174>
 8005da0:	2300      	movs	r3, #0
 8005da2:	77fb      	strb	r3, [r7, #31]
 8005da4:	e0f2      	b.n	8005f8c <UART_SetConfig+0x348>
 8005da6:	2302      	movs	r3, #2
 8005da8:	77fb      	strb	r3, [r7, #31]
 8005daa:	e0ef      	b.n	8005f8c <UART_SetConfig+0x348>
 8005dac:	2304      	movs	r3, #4
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e0ec      	b.n	8005f8c <UART_SetConfig+0x348>
 8005db2:	2308      	movs	r3, #8
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	e0e9      	b.n	8005f8c <UART_SetConfig+0x348>
 8005db8:	2310      	movs	r3, #16
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e0e6      	b.n	8005f8c <UART_SetConfig+0x348>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a56      	ldr	r2, [pc, #344]	; (8005f1c <UART_SetConfig+0x2d8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d120      	bne.n	8005e0a <UART_SetConfig+0x1c6>
 8005dc8:	4b51      	ldr	r3, [pc, #324]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd4:	d013      	beq.n	8005dfe <UART_SetConfig+0x1ba>
 8005dd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005dd8:	d814      	bhi.n	8005e04 <UART_SetConfig+0x1c0>
 8005dda:	2b80      	cmp	r3, #128	; 0x80
 8005ddc:	d009      	beq.n	8005df2 <UART_SetConfig+0x1ae>
 8005dde:	2b80      	cmp	r3, #128	; 0x80
 8005de0:	d810      	bhi.n	8005e04 <UART_SetConfig+0x1c0>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <UART_SetConfig+0x1a8>
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d006      	beq.n	8005df8 <UART_SetConfig+0x1b4>
 8005dea:	e00b      	b.n	8005e04 <UART_SetConfig+0x1c0>
 8005dec:	2300      	movs	r3, #0
 8005dee:	77fb      	strb	r3, [r7, #31]
 8005df0:	e0cc      	b.n	8005f8c <UART_SetConfig+0x348>
 8005df2:	2302      	movs	r3, #2
 8005df4:	77fb      	strb	r3, [r7, #31]
 8005df6:	e0c9      	b.n	8005f8c <UART_SetConfig+0x348>
 8005df8:	2304      	movs	r3, #4
 8005dfa:	77fb      	strb	r3, [r7, #31]
 8005dfc:	e0c6      	b.n	8005f8c <UART_SetConfig+0x348>
 8005dfe:	2308      	movs	r3, #8
 8005e00:	77fb      	strb	r3, [r7, #31]
 8005e02:	e0c3      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e04:	2310      	movs	r3, #16
 8005e06:	77fb      	strb	r3, [r7, #31]
 8005e08:	e0c0      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a44      	ldr	r2, [pc, #272]	; (8005f20 <UART_SetConfig+0x2dc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d125      	bne.n	8005e60 <UART_SetConfig+0x21c>
 8005e14:	4b3e      	ldr	r3, [pc, #248]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e22:	d017      	beq.n	8005e54 <UART_SetConfig+0x210>
 8005e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e28:	d817      	bhi.n	8005e5a <UART_SetConfig+0x216>
 8005e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e2e:	d00b      	beq.n	8005e48 <UART_SetConfig+0x204>
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e34:	d811      	bhi.n	8005e5a <UART_SetConfig+0x216>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <UART_SetConfig+0x1fe>
 8005e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e3e:	d006      	beq.n	8005e4e <UART_SetConfig+0x20a>
 8005e40:	e00b      	b.n	8005e5a <UART_SetConfig+0x216>
 8005e42:	2300      	movs	r3, #0
 8005e44:	77fb      	strb	r3, [r7, #31]
 8005e46:	e0a1      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	77fb      	strb	r3, [r7, #31]
 8005e4c:	e09e      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e4e:	2304      	movs	r3, #4
 8005e50:	77fb      	strb	r3, [r7, #31]
 8005e52:	e09b      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e54:	2308      	movs	r3, #8
 8005e56:	77fb      	strb	r3, [r7, #31]
 8005e58:	e098      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	77fb      	strb	r3, [r7, #31]
 8005e5e:	e095      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a2f      	ldr	r2, [pc, #188]	; (8005f24 <UART_SetConfig+0x2e0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d125      	bne.n	8005eb6 <UART_SetConfig+0x272>
 8005e6a:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e78:	d017      	beq.n	8005eaa <UART_SetConfig+0x266>
 8005e7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e7e:	d817      	bhi.n	8005eb0 <UART_SetConfig+0x26c>
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d00b      	beq.n	8005e9e <UART_SetConfig+0x25a>
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d811      	bhi.n	8005eb0 <UART_SetConfig+0x26c>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <UART_SetConfig+0x254>
 8005e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e94:	d006      	beq.n	8005ea4 <UART_SetConfig+0x260>
 8005e96:	e00b      	b.n	8005eb0 <UART_SetConfig+0x26c>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
 8005e9c:	e076      	b.n	8005f8c <UART_SetConfig+0x348>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	e073      	b.n	8005f8c <UART_SetConfig+0x348>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	77fb      	strb	r3, [r7, #31]
 8005ea8:	e070      	b.n	8005f8c <UART_SetConfig+0x348>
 8005eaa:	2308      	movs	r3, #8
 8005eac:	77fb      	strb	r3, [r7, #31]
 8005eae:	e06d      	b.n	8005f8c <UART_SetConfig+0x348>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	e06a      	b.n	8005f8c <UART_SetConfig+0x348>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <UART_SetConfig+0x2e4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d138      	bne.n	8005f32 <UART_SetConfig+0x2ee>
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <UART_SetConfig+0x2cc>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ece:	d017      	beq.n	8005f00 <UART_SetConfig+0x2bc>
 8005ed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ed4:	d82a      	bhi.n	8005f2c <UART_SetConfig+0x2e8>
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	d00b      	beq.n	8005ef4 <UART_SetConfig+0x2b0>
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d824      	bhi.n	8005f2c <UART_SetConfig+0x2e8>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <UART_SetConfig+0x2aa>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d006      	beq.n	8005efa <UART_SetConfig+0x2b6>
 8005eec:	e01e      	b.n	8005f2c <UART_SetConfig+0x2e8>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e04b      	b.n	8005f8c <UART_SetConfig+0x348>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e048      	b.n	8005f8c <UART_SetConfig+0x348>
 8005efa:	2304      	movs	r3, #4
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e045      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f00:	2308      	movs	r3, #8
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e042      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f06:	bf00      	nop
 8005f08:	efff69f3 	.word	0xefff69f3
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40004800 	.word	0x40004800
 8005f1c:	40004c00 	.word	0x40004c00
 8005f20:	40005000 	.word	0x40005000
 8005f24:	40011400 	.word	0x40011400
 8005f28:	40007800 	.word	0x40007800
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e02c      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a72      	ldr	r2, [pc, #456]	; (8006100 <UART_SetConfig+0x4bc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d125      	bne.n	8005f88 <UART_SetConfig+0x344>
 8005f3c:	4b71      	ldr	r3, [pc, #452]	; (8006104 <UART_SetConfig+0x4c0>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f4a:	d017      	beq.n	8005f7c <UART_SetConfig+0x338>
 8005f4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f50:	d817      	bhi.n	8005f82 <UART_SetConfig+0x33e>
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f56:	d00b      	beq.n	8005f70 <UART_SetConfig+0x32c>
 8005f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f5c:	d811      	bhi.n	8005f82 <UART_SetConfig+0x33e>
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <UART_SetConfig+0x326>
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f66:	d006      	beq.n	8005f76 <UART_SetConfig+0x332>
 8005f68:	e00b      	b.n	8005f82 <UART_SetConfig+0x33e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e00d      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f70:	2302      	movs	r3, #2
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e00a      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f76:	2304      	movs	r3, #4
 8005f78:	77fb      	strb	r3, [r7, #31]
 8005f7a:	e007      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	77fb      	strb	r3, [r7, #31]
 8005f80:	e004      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f82:	2310      	movs	r3, #16
 8005f84:	77fb      	strb	r3, [r7, #31]
 8005f86:	e001      	b.n	8005f8c <UART_SetConfig+0x348>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f94:	d15b      	bne.n	800604e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f96:	7ffb      	ldrb	r3, [r7, #31]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d828      	bhi.n	8005fee <UART_SetConfig+0x3aa>
 8005f9c:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x360>)
 8005f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa2:	bf00      	nop
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	08005fef 	.word	0x08005fef
 8005fb4:	08005fdf 	.word	0x08005fdf
 8005fb8:	08005fef 	.word	0x08005fef
 8005fbc:	08005fef 	.word	0x08005fef
 8005fc0:	08005fef 	.word	0x08005fef
 8005fc4:	08005fe7 	.word	0x08005fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc8:	f7fd fb18 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 8005fcc:	61b8      	str	r0, [r7, #24]
        break;
 8005fce:	e013      	b.n	8005ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd0:	f7fd fb28 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 8005fd4:	61b8      	str	r0, [r7, #24]
        break;
 8005fd6:	e00f      	b.n	8005ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd8:	4b4b      	ldr	r3, [pc, #300]	; (8006108 <UART_SetConfig+0x4c4>)
 8005fda:	61bb      	str	r3, [r7, #24]
        break;
 8005fdc:	e00c      	b.n	8005ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fde:	f7fd f9fb 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 8005fe2:	61b8      	str	r0, [r7, #24]
        break;
 8005fe4:	e008      	b.n	8005ff8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fea:	61bb      	str	r3, [r7, #24]
        break;
 8005fec:	e004      	b.n	8005ff8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	77bb      	strb	r3, [r7, #30]
        break;
 8005ff6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d074      	beq.n	80060e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	005a      	lsls	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	441a      	add	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006012:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b0f      	cmp	r3, #15
 8006018:	d916      	bls.n	8006048 <UART_SetConfig+0x404>
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d212      	bcs.n	8006048 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	b29b      	uxth	r3, r3
 8006026:	f023 030f 	bic.w	r3, r3, #15
 800602a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	b29b      	uxth	r3, r3
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	b29a      	uxth	r2, r3
 8006038:	89fb      	ldrh	r3, [r7, #14]
 800603a:	4313      	orrs	r3, r2
 800603c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	89fa      	ldrh	r2, [r7, #14]
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	e04f      	b.n	80060e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	77bb      	strb	r3, [r7, #30]
 800604c:	e04c      	b.n	80060e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800604e:	7ffb      	ldrb	r3, [r7, #31]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d828      	bhi.n	80060a6 <UART_SetConfig+0x462>
 8006054:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x418>)
 8006056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605a:	bf00      	nop
 800605c:	08006081 	.word	0x08006081
 8006060:	08006089 	.word	0x08006089
 8006064:	08006091 	.word	0x08006091
 8006068:	080060a7 	.word	0x080060a7
 800606c:	08006097 	.word	0x08006097
 8006070:	080060a7 	.word	0x080060a7
 8006074:	080060a7 	.word	0x080060a7
 8006078:	080060a7 	.word	0x080060a7
 800607c:	0800609f 	.word	0x0800609f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006080:	f7fd fabc 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 8006084:	61b8      	str	r0, [r7, #24]
        break;
 8006086:	e013      	b.n	80060b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006088:	f7fd facc 	bl	8003624 <HAL_RCC_GetPCLK2Freq>
 800608c:	61b8      	str	r0, [r7, #24]
        break;
 800608e:	e00f      	b.n	80060b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006090:	4b1d      	ldr	r3, [pc, #116]	; (8006108 <UART_SetConfig+0x4c4>)
 8006092:	61bb      	str	r3, [r7, #24]
        break;
 8006094:	e00c      	b.n	80060b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006096:	f7fd f99f 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 800609a:	61b8      	str	r0, [r7, #24]
        break;
 800609c:	e008      	b.n	80060b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a2:	61bb      	str	r3, [r7, #24]
        break;
 80060a4:	e004      	b.n	80060b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	77bb      	strb	r3, [r7, #30]
        break;
 80060ae:	bf00      	nop
    }

    if (pclk != 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d018      	beq.n	80060e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	085a      	lsrs	r2, r3, #1
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	441a      	add	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d909      	bls.n	80060e4 <UART_SetConfig+0x4a0>
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d6:	d205      	bcs.n	80060e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60da      	str	r2, [r3, #12]
 80060e2:	e001      	b.n	80060e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80060f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40007c00 	.word	0x40007c00
 8006104:	40023800 	.word	0x40023800
 8006108:	00f42400 	.word	0x00f42400

0800610c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01a      	beq.n	8006222 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800620a:	d10a      	bne.n	8006222 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	605a      	str	r2, [r3, #4]
  }
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af02      	add	r7, sp, #8
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006260:	f7fc f8ca 	bl	80023f8 <HAL_GetTick>
 8006264:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0308 	and.w	r3, r3, #8
 8006270:	2b08      	cmp	r3, #8
 8006272:	d10e      	bne.n	8006292 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f81b 	bl	80062be <UART_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e011      	b.n	80062b6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b09c      	sub	sp, #112	; 0x70
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	4613      	mov	r3, r2
 80062cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ce:	e0a7      	b.n	8006420 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	f000 80a3 	beq.w	8006420 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fc f88d 	bl	80023f8 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80062ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d13f      	bne.n	8006370 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006304:	667b      	str	r3, [r7, #100]	; 0x64
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800630e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006310:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800631c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e6      	bne.n	80062f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	663b      	str	r3, [r7, #96]	; 0x60
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3308      	adds	r3, #8
 8006340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006342:	64ba      	str	r2, [r7, #72]	; 0x48
 8006344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e5      	bne.n	8006322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e068      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d050      	beq.n	8006420 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638c:	d148      	bne.n	8006420 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006396:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b6:	637b      	str	r3, [r7, #52]	; 0x34
 80063b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e6      	bne.n	8006398 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3308      	adds	r3, #8
 80063d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f023 0301 	bic.w	r3, r3, #1
 80063e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3308      	adds	r3, #8
 80063e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80063ea:	623a      	str	r2, [r7, #32]
 80063ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e010      	b.n	8006442 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	f43f af48 	beq.w	80062d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3770      	adds	r7, #112	; 0x70
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 001c 	add.w	r0, r7, #28
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	2b01      	cmp	r3, #1
 8006462:	d120      	bne.n	80064a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <USB_CoreInit+0xac>)
 8006476:	4013      	ands	r3, r2
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa96 	bl	80069cc <USB_CoreReset>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e010      	b.n	80064c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa8a 	bl	80069cc <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10b      	bne.n	80064e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f043 0206 	orr.w	r2, r3, #6
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f043 0220 	orr.w	r2, r3, #32
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064f2:	b004      	add	sp, #16
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	ffbdffbf 	.word	0xffbdffbf

080064fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f023 0201 	bic.w	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d115      	bne.n	800656c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800654c:	2001      	movs	r0, #1
 800654e:	f7fb ff5f 	bl	8002410 <HAL_Delay>
      ms++;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fa29 	bl	80069b0 <USB_GetMode>
 800655e:	4603      	mov	r3, r0
 8006560:	2b01      	cmp	r3, #1
 8006562:	d01e      	beq.n	80065a2 <USB_SetCurrentMode+0x84>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b31      	cmp	r3, #49	; 0x31
 8006568:	d9f0      	bls.n	800654c <USB_SetCurrentMode+0x2e>
 800656a:	e01a      	b.n	80065a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800657e:	2001      	movs	r0, #1
 8006580:	f7fb ff46 	bl	8002410 <HAL_Delay>
      ms++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa10 	bl	80069b0 <USB_GetMode>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <USB_SetCurrentMode+0x84>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2b31      	cmp	r3, #49	; 0x31
 800659a:	d9f0      	bls.n	800657e <USB_SetCurrentMode+0x60>
 800659c:	e001      	b.n	80065a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e005      	b.n	80065ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b32      	cmp	r3, #50	; 0x32
 80065a6:	d101      	bne.n	80065ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065b8:	b084      	sub	sp, #16
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b086      	sub	sp, #24
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
 80065c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80065c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	e009      	b.n	80065ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	2200      	movs	r2, #0
 80065e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	2b0e      	cmp	r3, #14
 80065f0:	d9f2      	bls.n	80065d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d11c      	bne.n	8006632 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006606:	f043 0302 	orr.w	r3, r3, #2
 800660a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e005      	b.n	800663e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006644:	461a      	mov	r2, r3
 8006646:	2300      	movs	r3, #0
 8006648:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	4619      	mov	r1, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006658:	461a      	mov	r2, r3
 800665a:	680b      	ldr	r3, [r1, #0]
 800665c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10c      	bne.n	800667e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800666a:	2100      	movs	r1, #0
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f965 	bl	800693c <USB_SetDevSpeed>
 8006672:	e008      	b.n	8006686 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006674:	2101      	movs	r1, #1
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f960 	bl	800693c <USB_SetDevSpeed>
 800667c:	e003      	b.n	8006686 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800667e:	2103      	movs	r1, #3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f95b 	bl	800693c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006686:	2110      	movs	r1, #16
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8f3 	bl	8006874 <USB_FlushTxFifo>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f91f 	bl	80068dc <USB_FlushRxFifo>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ae:	461a      	mov	r2, r3
 80066b0:	2300      	movs	r3, #0
 80066b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ba:	461a      	mov	r2, r3
 80066bc:	2300      	movs	r3, #0
 80066be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c6:	461a      	mov	r2, r3
 80066c8:	2300      	movs	r3, #0
 80066ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
 80066d0:	e043      	b.n	800675a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066e8:	d118      	bne.n	800671c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	461a      	mov	r2, r3
 80066fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e013      	b.n	800672e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006712:	461a      	mov	r2, r3
 8006714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e008      	b.n	800672e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	461a      	mov	r2, r3
 800672a:	2300      	movs	r3, #0
 800672c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	461a      	mov	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	461a      	mov	r2, r3
 800674e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006752:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3301      	adds	r3, #1
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	429a      	cmp	r2, r3
 8006760:	d3b7      	bcc.n	80066d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006762:	2300      	movs	r3, #0
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e043      	b.n	80067f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800677a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800677e:	d118      	bne.n	80067b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	461a      	mov	r2, r3
 8006794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e013      	b.n	80067c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	461a      	mov	r2, r3
 80067aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	e008      	b.n	80067c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	015a      	lsls	r2, r3, #5
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067d0:	461a      	mov	r2, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	461a      	mov	r2, r3
 80067e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	3301      	adds	r3, #1
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d3b7      	bcc.n	8006768 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800680a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006818:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <USB_DevInit+0x2b4>)
 8006832:	4313      	orrs	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f043 0208 	orr.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	2b01      	cmp	r3, #1
 800684e:	d105      	bne.n	800685c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	4b06      	ldr	r3, [pc, #24]	; (8006870 <USB_DevInit+0x2b8>)
 8006856:	4313      	orrs	r3, r2
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800685c:	7dfb      	ldrb	r3, [r7, #23]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006868:	b004      	add	sp, #16
 800686a:	4770      	bx	lr
 800686c:	803c3800 	.word	0x803c3800
 8006870:	40000004 	.word	0x40000004

08006874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3301      	adds	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <USB_FlushTxFifo+0x64>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e01b      	b.n	80068cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	daf2      	bge.n	8006882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	019b      	lsls	r3, r3, #6
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <USB_FlushTxFifo+0x64>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e006      	b.n	80068cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b20      	cmp	r3, #32
 80068c8:	d0f0      	beq.n	80068ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	00030d40 	.word	0x00030d40

080068dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4a11      	ldr	r2, [pc, #68]	; (8006938 <USB_FlushRxFifo+0x5c>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e018      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	daf2      	bge.n	80068e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2210      	movs	r2, #16
 800690a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a08      	ldr	r2, [pc, #32]	; (8006938 <USB_FlushRxFifo+0x5c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e006      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b10      	cmp	r3, #16
 8006928:	d0f0      	beq.n	800690c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	00030d40 	.word	0x00030d40

0800693c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800695c:	4313      	orrs	r3, r2
 800695e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006988:	f023 0303 	bic.w	r3, r3, #3
 800698c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800699c:	f043 0302 	orr.w	r3, r3, #2
 80069a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	f003 0301 	and.w	r3, r3, #1
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	3301      	adds	r3, #1
 80069dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <USB_CoreReset+0x64>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e01b      	b.n	8006a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	daf2      	bge.n	80069d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f043 0201 	orr.w	r2, r3, #1
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <USB_CoreReset+0x64>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d901      	bls.n	8006a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e006      	b.n	8006a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d0f0      	beq.n	8006a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	00030d40 	.word	0x00030d40

08006a34 <abs>:
 8006a34:	2800      	cmp	r0, #0
 8006a36:	bfb8      	it	lt
 8006a38:	4240      	neglt	r0, r0
 8006a3a:	4770      	bx	lr

08006a3c <gcvt>:
 8006a3c:	b530      	push	{r4, r5, lr}
 8006a3e:	2200      	movs	r2, #0
 8006a40:	b085      	sub	sp, #20
 8006a42:	460c      	mov	r4, r1
 8006a44:	4605      	mov	r5, r0
 8006a46:	2300      	movs	r3, #0
 8006a48:	ec51 0b10 	vmov	r0, r1, d0
 8006a4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a50:	f7fa f864 	bl	8000b1c <__aeabi_dcmplt>
 8006a54:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006a58:	4622      	mov	r2, r4
 8006a5a:	b118      	cbz	r0, 8006a64 <gcvt+0x28>
 8006a5c:	232d      	movs	r3, #45	; 0x2d
 8006a5e:	f802 3b01 	strb.w	r3, [r2], #1
 8006a62:	3d01      	subs	r5, #1
 8006a64:	2300      	movs	r3, #0
 8006a66:	4806      	ldr	r0, [pc, #24]	; (8006a80 <gcvt+0x44>)
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	2367      	movs	r3, #103	; 0x67
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	f000 f8b2 	bl	8006bd8 <_gcvt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	bf14      	ite	ne
 8006a78:	4620      	movne	r0, r4
 8006a7a:	2000      	moveq	r0, #0
 8006a7c:	b005      	add	sp, #20
 8006a7e:	bd30      	pop	{r4, r5, pc}
 8006a80:	2000000c 	.word	0x2000000c

08006a84 <__errno>:
 8006a84:	4b01      	ldr	r3, [pc, #4]	; (8006a8c <__errno+0x8>)
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	2000000c 	.word	0x2000000c

08006a90 <__libc_init_array>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	4d0d      	ldr	r5, [pc, #52]	; (8006ac8 <__libc_init_array+0x38>)
 8006a94:	4c0d      	ldr	r4, [pc, #52]	; (8006acc <__libc_init_array+0x3c>)
 8006a96:	1b64      	subs	r4, r4, r5
 8006a98:	10a4      	asrs	r4, r4, #2
 8006a9a:	2600      	movs	r6, #0
 8006a9c:	42a6      	cmp	r6, r4
 8006a9e:	d109      	bne.n	8006ab4 <__libc_init_array+0x24>
 8006aa0:	4d0b      	ldr	r5, [pc, #44]	; (8006ad0 <__libc_init_array+0x40>)
 8006aa2:	4c0c      	ldr	r4, [pc, #48]	; (8006ad4 <__libc_init_array+0x44>)
 8006aa4:	f002 fb9c 	bl	80091e0 <_init>
 8006aa8:	1b64      	subs	r4, r4, r5
 8006aaa:	10a4      	asrs	r4, r4, #2
 8006aac:	2600      	movs	r6, #0
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	d105      	bne.n	8006abe <__libc_init_array+0x2e>
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab8:	4798      	blx	r3
 8006aba:	3601      	adds	r6, #1
 8006abc:	e7ee      	b.n	8006a9c <__libc_init_array+0xc>
 8006abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac2:	4798      	blx	r3
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	e7f2      	b.n	8006aae <__libc_init_array+0x1e>
 8006ac8:	080094e0 	.word	0x080094e0
 8006acc:	080094e0 	.word	0x080094e0
 8006ad0:	080094e0 	.word	0x080094e0
 8006ad4:	080094e4 	.word	0x080094e4

08006ad8 <memset>:
 8006ad8:	4402      	add	r2, r0
 8006ada:	4603      	mov	r3, r0
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d100      	bne.n	8006ae2 <memset+0xa>
 8006ae0:	4770      	bx	lr
 8006ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ae6:	e7f9      	b.n	8006adc <memset+0x4>

08006ae8 <print_e>:
 8006ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aea:	b087      	sub	sp, #28
 8006aec:	ec43 2b10 	vmov	d0, r2, r3
 8006af0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006af2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8006af6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006af8:	ab04      	add	r3, sp, #16
 8006afa:	9301      	str	r3, [sp, #4]
 8006afc:	ab03      	add	r3, sp, #12
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	1c62      	adds	r2, r4, #1
 8006b02:	ab05      	add	r3, sp, #20
 8006b04:	460f      	mov	r7, r1
 8006b06:	2102      	movs	r1, #2
 8006b08:	f000 fe36 	bl	8007778 <_dtoa_r>
 8006b0c:	9a05      	ldr	r2, [sp, #20]
 8006b0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d105      	bne.n	8006b22 <print_e+0x3a>
 8006b16:	4601      	mov	r1, r0
 8006b18:	4638      	mov	r0, r7
 8006b1a:	f000 fd79 	bl	8007610 <strcpy>
 8006b1e:	b007      	add	sp, #28
 8006b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b22:	463b      	mov	r3, r7
 8006b24:	7801      	ldrb	r1, [r0, #0]
 8006b26:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2a:	2c00      	cmp	r4, #0
 8006b2c:	bfc8      	it	gt
 8006b2e:	2501      	movgt	r5, #1
 8006b30:	212e      	movs	r1, #46	; 0x2e
 8006b32:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8006b36:	b10f      	cbz	r7, 8006b3c <print_e+0x54>
 8006b38:	2c00      	cmp	r4, #0
 8006b3a:	dc37      	bgt.n	8006bac <print_e+0xc4>
 8006b3c:	2e67      	cmp	r6, #103	; 0x67
 8006b3e:	d046      	beq.n	8006bce <print_e+0xe6>
 8006b40:	2e47      	cmp	r6, #71	; 0x47
 8006b42:	d046      	beq.n	8006bd2 <print_e+0xea>
 8006b44:	212e      	movs	r1, #46	; 0x2e
 8006b46:	2030      	movs	r0, #48	; 0x30
 8006b48:	2c00      	cmp	r4, #0
 8006b4a:	dc38      	bgt.n	8006bbe <print_e+0xd6>
 8006b4c:	1e51      	subs	r1, r2, #1
 8006b4e:	2900      	cmp	r1, #0
 8006b50:	bfb8      	it	lt
 8006b52:	f1c2 0201 	rsblt	r2, r2, #1
 8006b56:	4618      	mov	r0, r3
 8006b58:	9105      	str	r1, [sp, #20]
 8006b5a:	bfac      	ite	ge
 8006b5c:	222b      	movge	r2, #43	; 0x2b
 8006b5e:	9205      	strlt	r2, [sp, #20]
 8006b60:	f800 6b02 	strb.w	r6, [r0], #2
 8006b64:	bfa8      	it	ge
 8006b66:	705a      	strbge	r2, [r3, #1]
 8006b68:	9a05      	ldr	r2, [sp, #20]
 8006b6a:	bfbc      	itt	lt
 8006b6c:	212d      	movlt	r1, #45	; 0x2d
 8006b6e:	7059      	strblt	r1, [r3, #1]
 8006b70:	2a63      	cmp	r2, #99	; 0x63
 8006b72:	dd0b      	ble.n	8006b8c <print_e+0xa4>
 8006b74:	2164      	movs	r1, #100	; 0x64
 8006b76:	fb92 f1f1 	sdiv	r1, r2, r1
 8006b7a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8006b7e:	1cd8      	adds	r0, r3, #3
 8006b80:	709c      	strb	r4, [r3, #2]
 8006b82:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8006b86:	fb03 2201 	mla	r2, r3, r1, r2
 8006b8a:	9205      	str	r2, [sp, #20]
 8006b8c:	9b05      	ldr	r3, [sp, #20]
 8006b8e:	220a      	movs	r2, #10
 8006b90:	fb93 f2f2 	sdiv	r2, r3, r2
 8006b94:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8006b98:	7001      	strb	r1, [r0, #0]
 8006b9a:	f06f 0109 	mvn.w	r1, #9
 8006b9e:	fb01 3302 	mla	r3, r1, r2, r3
 8006ba2:	3330      	adds	r3, #48	; 0x30
 8006ba4:	7043      	strb	r3, [r0, #1]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	7083      	strb	r3, [r0, #2]
 8006baa:	e7b8      	b.n	8006b1e <print_e+0x36>
 8006bac:	b10d      	cbz	r5, 8006bb2 <print_e+0xca>
 8006bae:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb2:	7805      	ldrb	r5, [r0, #0]
 8006bb4:	f803 5b01 	strb.w	r5, [r3], #1
 8006bb8:	3c01      	subs	r4, #1
 8006bba:	2500      	movs	r5, #0
 8006bbc:	e7b9      	b.n	8006b32 <print_e+0x4a>
 8006bbe:	b10d      	cbz	r5, 8006bc4 <print_e+0xdc>
 8006bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc4:	f803 0b01 	strb.w	r0, [r3], #1
 8006bc8:	3c01      	subs	r4, #1
 8006bca:	2500      	movs	r5, #0
 8006bcc:	e7bc      	b.n	8006b48 <print_e+0x60>
 8006bce:	2665      	movs	r6, #101	; 0x65
 8006bd0:	e7bc      	b.n	8006b4c <print_e+0x64>
 8006bd2:	2645      	movs	r6, #69	; 0x45
 8006bd4:	e7ba      	b.n	8006b4c <print_e+0x64>
	...

08006bd8 <_gcvt>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	ec55 4b10 	vmov	r4, r5, d0
 8006be0:	b088      	sub	sp, #32
 8006be2:	4681      	mov	r9, r0
 8006be4:	4688      	mov	r8, r1
 8006be6:	4616      	mov	r6, r2
 8006be8:	469a      	mov	sl, r3
 8006bea:	ee10 0a10 	vmov	r0, s0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006bf6:	f7f9 ff91 	bl	8000b1c <__aeabi_dcmplt>
 8006bfa:	b110      	cbz	r0, 8006c02 <_gcvt+0x2a>
 8006bfc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006c00:	461d      	mov	r5, r3
 8006c02:	2200      	movs	r2, #0
 8006c04:	2300      	movs	r3, #0
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006c0e:	b138      	cbz	r0, 8006c20 <_gcvt+0x48>
 8006c10:	2330      	movs	r3, #48	; 0x30
 8006c12:	7033      	strb	r3, [r6, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	7073      	strb	r3, [r6, #1]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	b008      	add	sp, #32
 8006c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c20:	a34b      	add	r3, pc, #300	; (adr r3, 8006d50 <_gcvt+0x178>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 ff81 	bl	8000b30 <__aeabi_dcmple>
 8006c2e:	b158      	cbz	r0, 8006c48 <_gcvt+0x70>
 8006c30:	f108 31ff 	add.w	r1, r8, #4294967295
 8006c34:	9100      	str	r1, [sp, #0]
 8006c36:	e9cd a701 	strd	sl, r7, [sp, #4]
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	4631      	mov	r1, r6
 8006c40:	4648      	mov	r0, r9
 8006c42:	f7ff ff51 	bl	8006ae8 <print_e>
 8006c46:	e7e7      	b.n	8006c18 <_gcvt+0x40>
 8006c48:	4640      	mov	r0, r8
 8006c4a:	f000 fc09 	bl	8007460 <_mprec_log10>
 8006c4e:	4622      	mov	r2, r4
 8006c50:	ec51 0b10 	vmov	r0, r1, d0
 8006c54:	462b      	mov	r3, r5
 8006c56:	f7f9 ff6b 	bl	8000b30 <__aeabi_dcmple>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d1e8      	bne.n	8006c30 <_gcvt+0x58>
 8006c5e:	ab07      	add	r3, sp, #28
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	ab06      	add	r3, sp, #24
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	4642      	mov	r2, r8
 8006c68:	ab05      	add	r3, sp, #20
 8006c6a:	ec45 4b10 	vmov	d0, r4, r5
 8006c6e:	2102      	movs	r1, #2
 8006c70:	4648      	mov	r0, r9
 8006c72:	f000 fd81 	bl	8007778 <_dtoa_r>
 8006c76:	9a05      	ldr	r2, [sp, #20]
 8006c78:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d00e      	beq.n	8006c9e <_gcvt+0xc6>
 8006c80:	4633      	mov	r3, r6
 8006c82:	44b0      	add	r8, r6
 8006c84:	4605      	mov	r5, r0
 8006c86:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006c8a:	9c05      	ldr	r4, [sp, #20]
 8006c8c:	eba8 0203 	sub.w	r2, r8, r3
 8006c90:	b109      	cbz	r1, 8006c96 <_gcvt+0xbe>
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	dc08      	bgt.n	8006ca8 <_gcvt+0xd0>
 8006c96:	2100      	movs	r1, #0
 8006c98:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8006c9c:	e00d      	b.n	8006cba <_gcvt+0xe2>
 8006c9e:	4601      	mov	r1, r0
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f000 fcb5 	bl	8007610 <strcpy>
 8006ca6:	e7b7      	b.n	8006c18 <_gcvt+0x40>
 8006ca8:	3c01      	subs	r4, #1
 8006caa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cae:	9405      	str	r4, [sp, #20]
 8006cb0:	e7e8      	b.n	8006c84 <_gcvt+0xac>
 8006cb2:	f803 cb01 	strb.w	ip, [r3], #1
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	2101      	movs	r1, #1
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	dc2a      	bgt.n	8006d16 <_gcvt+0x13e>
 8006cc0:	b101      	cbz	r1, 8006cc4 <_gcvt+0xec>
 8006cc2:	9405      	str	r4, [sp, #20]
 8006cc4:	b90f      	cbnz	r7, 8006cca <_gcvt+0xf2>
 8006cc6:	7829      	ldrb	r1, [r5, #0]
 8006cc8:	b311      	cbz	r1, 8006d10 <_gcvt+0x138>
 8006cca:	42b3      	cmp	r3, r6
 8006ccc:	bf04      	itt	eq
 8006cce:	2130      	moveq	r1, #48	; 0x30
 8006cd0:	f803 1b01 	strbeq.w	r1, [r3], #1
 8006cd4:	212e      	movs	r1, #46	; 0x2e
 8006cd6:	7019      	strb	r1, [r3, #0]
 8006cd8:	9905      	ldr	r1, [sp, #20]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	2400      	movs	r4, #0
 8006cde:	eba1 0c03 	sub.w	ip, r1, r3
 8006ce2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8006ce6:	eb1c 0f00 	cmn.w	ip, r0
 8006cea:	d41c      	bmi.n	8006d26 <_gcvt+0x14e>
 8006cec:	2900      	cmp	r1, #0
 8006cee:	f1c1 0000 	rsb	r0, r1, #0
 8006cf2:	bfc8      	it	gt
 8006cf4:	2000      	movgt	r0, #0
 8006cf6:	f100 0c01 	add.w	ip, r0, #1
 8006cfa:	4463      	add	r3, ip
 8006cfc:	4401      	add	r1, r0
 8006cfe:	b104      	cbz	r4, 8006d02 <_gcvt+0x12a>
 8006d00:	9105      	str	r1, [sp, #20]
 8006d02:	1e69      	subs	r1, r5, #1
 8006d04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d08:	b108      	cbz	r0, 8006d0e <_gcvt+0x136>
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	dc0f      	bgt.n	8006d2e <_gcvt+0x156>
 8006d0e:	b9df      	cbnz	r7, 8006d48 <_gcvt+0x170>
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e780      	b.n	8006c18 <_gcvt+0x40>
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d1c:	dcc9      	bgt.n	8006cb2 <_gcvt+0xda>
 8006d1e:	2900      	cmp	r1, #0
 8006d20:	d0d0      	beq.n	8006cc4 <_gcvt+0xec>
 8006d22:	9005      	str	r0, [sp, #20]
 8006d24:	e7ce      	b.n	8006cc4 <_gcvt+0xec>
 8006d26:	f800 ef01 	strb.w	lr, [r0, #1]!
 8006d2a:	2401      	movs	r4, #1
 8006d2c:	e7db      	b.n	8006ce6 <_gcvt+0x10e>
 8006d2e:	f803 0b01 	strb.w	r0, [r3], #1
 8006d32:	3a01      	subs	r2, #1
 8006d34:	e7e6      	b.n	8006d04 <_gcvt+0x12c>
 8006d36:	f801 5b01 	strb.w	r5, [r1], #1
 8006d3a:	1a60      	subs	r0, r4, r1
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	dcfa      	bgt.n	8006d36 <_gcvt+0x15e>
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	bfa8      	it	ge
 8006d44:	189b      	addge	r3, r3, r2
 8006d46:	e7e3      	b.n	8006d10 <_gcvt+0x138>
 8006d48:	4619      	mov	r1, r3
 8006d4a:	189c      	adds	r4, r3, r2
 8006d4c:	2530      	movs	r5, #48	; 0x30
 8006d4e:	e7f4      	b.n	8006d3a <_gcvt+0x162>
 8006d50:	eb1c432d 	.word	0xeb1c432d
 8006d54:	3f1a36e2 	.word	0x3f1a36e2

08006d58 <_Balloc>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	460d      	mov	r5, r1
 8006d60:	b976      	cbnz	r6, 8006d80 <_Balloc+0x28>
 8006d62:	2010      	movs	r0, #16
 8006d64:	f001 fb08 	bl	8008378 <malloc>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6260      	str	r0, [r4, #36]	; 0x24
 8006d6c:	b920      	cbnz	r0, 8006d78 <_Balloc+0x20>
 8006d6e:	4b18      	ldr	r3, [pc, #96]	; (8006dd0 <_Balloc+0x78>)
 8006d70:	4818      	ldr	r0, [pc, #96]	; (8006dd4 <_Balloc+0x7c>)
 8006d72:	2166      	movs	r1, #102	; 0x66
 8006d74:	f000 fc54 	bl	8007620 <__assert_func>
 8006d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d7c:	6006      	str	r6, [r0, #0]
 8006d7e:	60c6      	str	r6, [r0, #12]
 8006d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d82:	68f3      	ldr	r3, [r6, #12]
 8006d84:	b183      	cbz	r3, 8006da8 <_Balloc+0x50>
 8006d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d8e:	b9b8      	cbnz	r0, 8006dc0 <_Balloc+0x68>
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f605 	lsl.w	r6, r1, r5
 8006d96:	1d72      	adds	r2, r6, #5
 8006d98:	0092      	lsls	r2, r2, #2
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 fb7e 	bl	800749c <_calloc_r>
 8006da0:	b160      	cbz	r0, 8006dbc <_Balloc+0x64>
 8006da2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006da6:	e00e      	b.n	8006dc6 <_Balloc+0x6e>
 8006da8:	2221      	movs	r2, #33	; 0x21
 8006daa:	2104      	movs	r1, #4
 8006dac:	4620      	mov	r0, r4
 8006dae:	f000 fb75 	bl	800749c <_calloc_r>
 8006db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db4:	60f0      	str	r0, [r6, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e4      	bne.n	8006d86 <_Balloc+0x2e>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	6802      	ldr	r2, [r0, #0]
 8006dc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006dcc:	e7f7      	b.n	8006dbe <_Balloc+0x66>
 8006dce:	bf00      	nop
 8006dd0:	08009218 	.word	0x08009218
 8006dd4:	0800922f 	.word	0x0800922f

08006dd8 <_Bfree>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	b976      	cbnz	r6, 8006e00 <_Bfree+0x28>
 8006de2:	2010      	movs	r0, #16
 8006de4:	f001 fac8 	bl	8008378 <malloc>
 8006de8:	4602      	mov	r2, r0
 8006dea:	6268      	str	r0, [r5, #36]	; 0x24
 8006dec:	b920      	cbnz	r0, 8006df8 <_Bfree+0x20>
 8006dee:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <_Bfree+0x3c>)
 8006df0:	4809      	ldr	r0, [pc, #36]	; (8006e18 <_Bfree+0x40>)
 8006df2:	218a      	movs	r1, #138	; 0x8a
 8006df4:	f000 fc14 	bl	8007620 <__assert_func>
 8006df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dfc:	6006      	str	r6, [r0, #0]
 8006dfe:	60c6      	str	r6, [r0, #12]
 8006e00:	b13c      	cbz	r4, 8006e12 <_Bfree+0x3a>
 8006e02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e04:	6862      	ldr	r2, [r4, #4]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e0c:	6021      	str	r1, [r4, #0]
 8006e0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	08009218 	.word	0x08009218
 8006e18:	0800922f 	.word	0x0800922f

08006e1c <__multadd>:
 8006e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e20:	690d      	ldr	r5, [r1, #16]
 8006e22:	4607      	mov	r7, r0
 8006e24:	460c      	mov	r4, r1
 8006e26:	461e      	mov	r6, r3
 8006e28:	f101 0c14 	add.w	ip, r1, #20
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8006e32:	b299      	uxth	r1, r3
 8006e34:	fb02 6101 	mla	r1, r2, r1, r6
 8006e38:	0c1e      	lsrs	r6, r3, #16
 8006e3a:	0c0b      	lsrs	r3, r1, #16
 8006e3c:	fb02 3306 	mla	r3, r2, r6, r3
 8006e40:	b289      	uxth	r1, r1
 8006e42:	3001      	adds	r0, #1
 8006e44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e48:	4285      	cmp	r5, r0
 8006e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8006e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e52:	dcec      	bgt.n	8006e2e <__multadd+0x12>
 8006e54:	b30e      	cbz	r6, 8006e9a <__multadd+0x7e>
 8006e56:	68a3      	ldr	r3, [r4, #8]
 8006e58:	42ab      	cmp	r3, r5
 8006e5a:	dc19      	bgt.n	8006e90 <__multadd+0x74>
 8006e5c:	6861      	ldr	r1, [r4, #4]
 8006e5e:	4638      	mov	r0, r7
 8006e60:	3101      	adds	r1, #1
 8006e62:	f7ff ff79 	bl	8006d58 <_Balloc>
 8006e66:	4680      	mov	r8, r0
 8006e68:	b928      	cbnz	r0, 8006e76 <__multadd+0x5a>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <__multadd+0x84>)
 8006e6e:	480d      	ldr	r0, [pc, #52]	; (8006ea4 <__multadd+0x88>)
 8006e70:	21b5      	movs	r1, #181	; 0xb5
 8006e72:	f000 fbd5 	bl	8007620 <__assert_func>
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	f104 010c 	add.w	r1, r4, #12
 8006e7e:	0092      	lsls	r2, r2, #2
 8006e80:	300c      	adds	r0, #12
 8006e82:	f001 fa81 	bl	8008388 <memcpy>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4638      	mov	r0, r7
 8006e8a:	f7ff ffa5 	bl	8006dd8 <_Bfree>
 8006e8e:	4644      	mov	r4, r8
 8006e90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e94:	3501      	adds	r5, #1
 8006e96:	615e      	str	r6, [r3, #20]
 8006e98:	6125      	str	r5, [r4, #16]
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ea0:	0800928b 	.word	0x0800928b
 8006ea4:	0800922f 	.word	0x0800922f

08006ea8 <__hi0bits>:
 8006ea8:	0c03      	lsrs	r3, r0, #16
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	b9d3      	cbnz	r3, 8006ee4 <__hi0bits+0x3c>
 8006eae:	0400      	lsls	r0, r0, #16
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006eb6:	bf04      	itt	eq
 8006eb8:	0200      	lsleq	r0, r0, #8
 8006eba:	3308      	addeq	r3, #8
 8006ebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ec0:	bf04      	itt	eq
 8006ec2:	0100      	lsleq	r0, r0, #4
 8006ec4:	3304      	addeq	r3, #4
 8006ec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006eca:	bf04      	itt	eq
 8006ecc:	0080      	lsleq	r0, r0, #2
 8006ece:	3302      	addeq	r3, #2
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	db05      	blt.n	8006ee0 <__hi0bits+0x38>
 8006ed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ed8:	f103 0301 	add.w	r3, r3, #1
 8006edc:	bf08      	it	eq
 8006ede:	2320      	moveq	r3, #32
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	4770      	bx	lr
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e7e4      	b.n	8006eb2 <__hi0bits+0xa>

08006ee8 <__lo0bits>:
 8006ee8:	6803      	ldr	r3, [r0, #0]
 8006eea:	f013 0207 	ands.w	r2, r3, #7
 8006eee:	4601      	mov	r1, r0
 8006ef0:	d00b      	beq.n	8006f0a <__lo0bits+0x22>
 8006ef2:	07da      	lsls	r2, r3, #31
 8006ef4:	d423      	bmi.n	8006f3e <__lo0bits+0x56>
 8006ef6:	0798      	lsls	r0, r3, #30
 8006ef8:	bf49      	itett	mi
 8006efa:	085b      	lsrmi	r3, r3, #1
 8006efc:	089b      	lsrpl	r3, r3, #2
 8006efe:	2001      	movmi	r0, #1
 8006f00:	600b      	strmi	r3, [r1, #0]
 8006f02:	bf5c      	itt	pl
 8006f04:	600b      	strpl	r3, [r1, #0]
 8006f06:	2002      	movpl	r0, #2
 8006f08:	4770      	bx	lr
 8006f0a:	b298      	uxth	r0, r3
 8006f0c:	b9a8      	cbnz	r0, 8006f3a <__lo0bits+0x52>
 8006f0e:	0c1b      	lsrs	r3, r3, #16
 8006f10:	2010      	movs	r0, #16
 8006f12:	b2da      	uxtb	r2, r3
 8006f14:	b90a      	cbnz	r2, 8006f1a <__lo0bits+0x32>
 8006f16:	3008      	adds	r0, #8
 8006f18:	0a1b      	lsrs	r3, r3, #8
 8006f1a:	071a      	lsls	r2, r3, #28
 8006f1c:	bf04      	itt	eq
 8006f1e:	091b      	lsreq	r3, r3, #4
 8006f20:	3004      	addeq	r0, #4
 8006f22:	079a      	lsls	r2, r3, #30
 8006f24:	bf04      	itt	eq
 8006f26:	089b      	lsreq	r3, r3, #2
 8006f28:	3002      	addeq	r0, #2
 8006f2a:	07da      	lsls	r2, r3, #31
 8006f2c:	d403      	bmi.n	8006f36 <__lo0bits+0x4e>
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	f100 0001 	add.w	r0, r0, #1
 8006f34:	d005      	beq.n	8006f42 <__lo0bits+0x5a>
 8006f36:	600b      	str	r3, [r1, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	4610      	mov	r0, r2
 8006f3c:	e7e9      	b.n	8006f12 <__lo0bits+0x2a>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	4770      	bx	lr
 8006f42:	2020      	movs	r0, #32
 8006f44:	4770      	bx	lr
	...

08006f48 <__i2b>:
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	f7ff ff03 	bl	8006d58 <_Balloc>
 8006f52:	4602      	mov	r2, r0
 8006f54:	b928      	cbnz	r0, 8006f62 <__i2b+0x1a>
 8006f56:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <__i2b+0x24>)
 8006f58:	4805      	ldr	r0, [pc, #20]	; (8006f70 <__i2b+0x28>)
 8006f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f5e:	f000 fb5f 	bl	8007620 <__assert_func>
 8006f62:	2301      	movs	r3, #1
 8006f64:	6144      	str	r4, [r0, #20]
 8006f66:	6103      	str	r3, [r0, #16]
 8006f68:	bd10      	pop	{r4, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800928b 	.word	0x0800928b
 8006f70:	0800922f 	.word	0x0800922f

08006f74 <__multiply>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	4691      	mov	r9, r2
 8006f7a:	690a      	ldr	r2, [r1, #16]
 8006f7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bfb8      	it	lt
 8006f84:	460b      	movlt	r3, r1
 8006f86:	460c      	mov	r4, r1
 8006f88:	bfbc      	itt	lt
 8006f8a:	464c      	movlt	r4, r9
 8006f8c:	4699      	movlt	r9, r3
 8006f8e:	6927      	ldr	r7, [r4, #16]
 8006f90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	6861      	ldr	r1, [r4, #4]
 8006f98:	eb07 060a 	add.w	r6, r7, sl
 8006f9c:	42b3      	cmp	r3, r6
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	bfb8      	it	lt
 8006fa2:	3101      	addlt	r1, #1
 8006fa4:	f7ff fed8 	bl	8006d58 <_Balloc>
 8006fa8:	b930      	cbnz	r0, 8006fb8 <__multiply+0x44>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b44      	ldr	r3, [pc, #272]	; (80070c0 <__multiply+0x14c>)
 8006fae:	4845      	ldr	r0, [pc, #276]	; (80070c4 <__multiply+0x150>)
 8006fb0:	f240 115d 	movw	r1, #349	; 0x15d
 8006fb4:	f000 fb34 	bl	8007620 <__assert_func>
 8006fb8:	f100 0514 	add.w	r5, r0, #20
 8006fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	4543      	cmp	r3, r8
 8006fc6:	d321      	bcc.n	800700c <__multiply+0x98>
 8006fc8:	f104 0314 	add.w	r3, r4, #20
 8006fcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006fd0:	f109 0314 	add.w	r3, r9, #20
 8006fd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fd8:	9202      	str	r2, [sp, #8]
 8006fda:	1b3a      	subs	r2, r7, r4
 8006fdc:	3a15      	subs	r2, #21
 8006fde:	f022 0203 	bic.w	r2, r2, #3
 8006fe2:	3204      	adds	r2, #4
 8006fe4:	f104 0115 	add.w	r1, r4, #21
 8006fe8:	428f      	cmp	r7, r1
 8006fea:	bf38      	it	cc
 8006fec:	2204      	movcc	r2, #4
 8006fee:	9201      	str	r2, [sp, #4]
 8006ff0:	9a02      	ldr	r2, [sp, #8]
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d80c      	bhi.n	8007012 <__multiply+0x9e>
 8006ff8:	2e00      	cmp	r6, #0
 8006ffa:	dd03      	ble.n	8007004 <__multiply+0x90>
 8006ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007000:	2b00      	cmp	r3, #0
 8007002:	d05a      	beq.n	80070ba <__multiply+0x146>
 8007004:	6106      	str	r6, [r0, #16]
 8007006:	b005      	add	sp, #20
 8007008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700c:	f843 2b04 	str.w	r2, [r3], #4
 8007010:	e7d8      	b.n	8006fc4 <__multiply+0x50>
 8007012:	f8b3 a000 	ldrh.w	sl, [r3]
 8007016:	f1ba 0f00 	cmp.w	sl, #0
 800701a:	d024      	beq.n	8007066 <__multiply+0xf2>
 800701c:	f104 0e14 	add.w	lr, r4, #20
 8007020:	46a9      	mov	r9, r5
 8007022:	f04f 0c00 	mov.w	ip, #0
 8007026:	f85e 2b04 	ldr.w	r2, [lr], #4
 800702a:	f8d9 1000 	ldr.w	r1, [r9]
 800702e:	fa1f fb82 	uxth.w	fp, r2
 8007032:	b289      	uxth	r1, r1
 8007034:	fb0a 110b 	mla	r1, sl, fp, r1
 8007038:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800703c:	f8d9 2000 	ldr.w	r2, [r9]
 8007040:	4461      	add	r1, ip
 8007042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007046:	fb0a c20b 	mla	r2, sl, fp, ip
 800704a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800704e:	b289      	uxth	r1, r1
 8007050:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007054:	4577      	cmp	r7, lr
 8007056:	f849 1b04 	str.w	r1, [r9], #4
 800705a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800705e:	d8e2      	bhi.n	8007026 <__multiply+0xb2>
 8007060:	9a01      	ldr	r2, [sp, #4]
 8007062:	f845 c002 	str.w	ip, [r5, r2]
 8007066:	9a03      	ldr	r2, [sp, #12]
 8007068:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800706c:	3304      	adds	r3, #4
 800706e:	f1b9 0f00 	cmp.w	r9, #0
 8007072:	d020      	beq.n	80070b6 <__multiply+0x142>
 8007074:	6829      	ldr	r1, [r5, #0]
 8007076:	f104 0c14 	add.w	ip, r4, #20
 800707a:	46ae      	mov	lr, r5
 800707c:	f04f 0a00 	mov.w	sl, #0
 8007080:	f8bc b000 	ldrh.w	fp, [ip]
 8007084:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007088:	fb09 220b 	mla	r2, r9, fp, r2
 800708c:	4492      	add	sl, r2
 800708e:	b289      	uxth	r1, r1
 8007090:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007094:	f84e 1b04 	str.w	r1, [lr], #4
 8007098:	f85c 2b04 	ldr.w	r2, [ip], #4
 800709c:	f8be 1000 	ldrh.w	r1, [lr]
 80070a0:	0c12      	lsrs	r2, r2, #16
 80070a2:	fb09 1102 	mla	r1, r9, r2, r1
 80070a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80070aa:	4567      	cmp	r7, ip
 80070ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070b0:	d8e6      	bhi.n	8007080 <__multiply+0x10c>
 80070b2:	9a01      	ldr	r2, [sp, #4]
 80070b4:	50a9      	str	r1, [r5, r2]
 80070b6:	3504      	adds	r5, #4
 80070b8:	e79a      	b.n	8006ff0 <__multiply+0x7c>
 80070ba:	3e01      	subs	r6, #1
 80070bc:	e79c      	b.n	8006ff8 <__multiply+0x84>
 80070be:	bf00      	nop
 80070c0:	0800928b 	.word	0x0800928b
 80070c4:	0800922f 	.word	0x0800922f

080070c8 <__pow5mult>:
 80070c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070cc:	4615      	mov	r5, r2
 80070ce:	f012 0203 	ands.w	r2, r2, #3
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	d007      	beq.n	80070e8 <__pow5mult+0x20>
 80070d8:	4c25      	ldr	r4, [pc, #148]	; (8007170 <__pow5mult+0xa8>)
 80070da:	3a01      	subs	r2, #1
 80070dc:	2300      	movs	r3, #0
 80070de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070e2:	f7ff fe9b 	bl	8006e1c <__multadd>
 80070e6:	4607      	mov	r7, r0
 80070e8:	10ad      	asrs	r5, r5, #2
 80070ea:	d03d      	beq.n	8007168 <__pow5mult+0xa0>
 80070ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070ee:	b97c      	cbnz	r4, 8007110 <__pow5mult+0x48>
 80070f0:	2010      	movs	r0, #16
 80070f2:	f001 f941 	bl	8008378 <malloc>
 80070f6:	4602      	mov	r2, r0
 80070f8:	6270      	str	r0, [r6, #36]	; 0x24
 80070fa:	b928      	cbnz	r0, 8007108 <__pow5mult+0x40>
 80070fc:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <__pow5mult+0xac>)
 80070fe:	481e      	ldr	r0, [pc, #120]	; (8007178 <__pow5mult+0xb0>)
 8007100:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007104:	f000 fa8c 	bl	8007620 <__assert_func>
 8007108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800710c:	6004      	str	r4, [r0, #0]
 800710e:	60c4      	str	r4, [r0, #12]
 8007110:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007118:	b94c      	cbnz	r4, 800712e <__pow5mult+0x66>
 800711a:	f240 2171 	movw	r1, #625	; 0x271
 800711e:	4630      	mov	r0, r6
 8007120:	f7ff ff12 	bl	8006f48 <__i2b>
 8007124:	2300      	movs	r3, #0
 8007126:	f8c8 0008 	str.w	r0, [r8, #8]
 800712a:	4604      	mov	r4, r0
 800712c:	6003      	str	r3, [r0, #0]
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	07eb      	lsls	r3, r5, #31
 8007134:	d50a      	bpl.n	800714c <__pow5mult+0x84>
 8007136:	4639      	mov	r1, r7
 8007138:	4622      	mov	r2, r4
 800713a:	4630      	mov	r0, r6
 800713c:	f7ff ff1a 	bl	8006f74 <__multiply>
 8007140:	4639      	mov	r1, r7
 8007142:	4680      	mov	r8, r0
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fe47 	bl	8006dd8 <_Bfree>
 800714a:	4647      	mov	r7, r8
 800714c:	106d      	asrs	r5, r5, #1
 800714e:	d00b      	beq.n	8007168 <__pow5mult+0xa0>
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	b938      	cbnz	r0, 8007164 <__pow5mult+0x9c>
 8007154:	4622      	mov	r2, r4
 8007156:	4621      	mov	r1, r4
 8007158:	4630      	mov	r0, r6
 800715a:	f7ff ff0b 	bl	8006f74 <__multiply>
 800715e:	6020      	str	r0, [r4, #0]
 8007160:	f8c0 9000 	str.w	r9, [r0]
 8007164:	4604      	mov	r4, r0
 8007166:	e7e4      	b.n	8007132 <__pow5mult+0x6a>
 8007168:	4638      	mov	r0, r7
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	bf00      	nop
 8007170:	08009390 	.word	0x08009390
 8007174:	08009218 	.word	0x08009218
 8007178:	0800922f 	.word	0x0800922f

0800717c <__lshift>:
 800717c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007180:	460c      	mov	r4, r1
 8007182:	6849      	ldr	r1, [r1, #4]
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800718a:	68a3      	ldr	r3, [r4, #8]
 800718c:	4607      	mov	r7, r0
 800718e:	4691      	mov	r9, r2
 8007190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007194:	f108 0601 	add.w	r6, r8, #1
 8007198:	42b3      	cmp	r3, r6
 800719a:	db0b      	blt.n	80071b4 <__lshift+0x38>
 800719c:	4638      	mov	r0, r7
 800719e:	f7ff fddb 	bl	8006d58 <_Balloc>
 80071a2:	4605      	mov	r5, r0
 80071a4:	b948      	cbnz	r0, 80071ba <__lshift+0x3e>
 80071a6:	4602      	mov	r2, r0
 80071a8:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <__lshift+0xd8>)
 80071aa:	482b      	ldr	r0, [pc, #172]	; (8007258 <__lshift+0xdc>)
 80071ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80071b0:	f000 fa36 	bl	8007620 <__assert_func>
 80071b4:	3101      	adds	r1, #1
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	e7ee      	b.n	8007198 <__lshift+0x1c>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f100 0114 	add.w	r1, r0, #20
 80071c0:	f100 0210 	add.w	r2, r0, #16
 80071c4:	4618      	mov	r0, r3
 80071c6:	4553      	cmp	r3, sl
 80071c8:	db37      	blt.n	800723a <__lshift+0xbe>
 80071ca:	6920      	ldr	r0, [r4, #16]
 80071cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80071d0:	f104 0314 	add.w	r3, r4, #20
 80071d4:	f019 091f 	ands.w	r9, r9, #31
 80071d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071e0:	d02f      	beq.n	8007242 <__lshift+0xc6>
 80071e2:	f1c9 0e20 	rsb	lr, r9, #32
 80071e6:	468a      	mov	sl, r1
 80071e8:	f04f 0c00 	mov.w	ip, #0
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	fa02 f209 	lsl.w	r2, r2, r9
 80071f2:	ea42 020c 	orr.w	r2, r2, ip
 80071f6:	f84a 2b04 	str.w	r2, [sl], #4
 80071fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80071fe:	4298      	cmp	r0, r3
 8007200:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007204:	d8f2      	bhi.n	80071ec <__lshift+0x70>
 8007206:	1b03      	subs	r3, r0, r4
 8007208:	3b15      	subs	r3, #21
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	3304      	adds	r3, #4
 8007210:	f104 0215 	add.w	r2, r4, #21
 8007214:	4290      	cmp	r0, r2
 8007216:	bf38      	it	cc
 8007218:	2304      	movcc	r3, #4
 800721a:	f841 c003 	str.w	ip, [r1, r3]
 800721e:	f1bc 0f00 	cmp.w	ip, #0
 8007222:	d001      	beq.n	8007228 <__lshift+0xac>
 8007224:	f108 0602 	add.w	r6, r8, #2
 8007228:	3e01      	subs	r6, #1
 800722a:	4638      	mov	r0, r7
 800722c:	612e      	str	r6, [r5, #16]
 800722e:	4621      	mov	r1, r4
 8007230:	f7ff fdd2 	bl	8006dd8 <_Bfree>
 8007234:	4628      	mov	r0, r5
 8007236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800723a:	f842 0f04 	str.w	r0, [r2, #4]!
 800723e:	3301      	adds	r3, #1
 8007240:	e7c1      	b.n	80071c6 <__lshift+0x4a>
 8007242:	3904      	subs	r1, #4
 8007244:	f853 2b04 	ldr.w	r2, [r3], #4
 8007248:	f841 2f04 	str.w	r2, [r1, #4]!
 800724c:	4298      	cmp	r0, r3
 800724e:	d8f9      	bhi.n	8007244 <__lshift+0xc8>
 8007250:	e7ea      	b.n	8007228 <__lshift+0xac>
 8007252:	bf00      	nop
 8007254:	0800928b 	.word	0x0800928b
 8007258:	0800922f 	.word	0x0800922f

0800725c <__mcmp>:
 800725c:	b530      	push	{r4, r5, lr}
 800725e:	6902      	ldr	r2, [r0, #16]
 8007260:	690c      	ldr	r4, [r1, #16]
 8007262:	1b12      	subs	r2, r2, r4
 8007264:	d10e      	bne.n	8007284 <__mcmp+0x28>
 8007266:	f100 0314 	add.w	r3, r0, #20
 800726a:	3114      	adds	r1, #20
 800726c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007270:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007274:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007278:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800727c:	42a5      	cmp	r5, r4
 800727e:	d003      	beq.n	8007288 <__mcmp+0x2c>
 8007280:	d305      	bcc.n	800728e <__mcmp+0x32>
 8007282:	2201      	movs	r2, #1
 8007284:	4610      	mov	r0, r2
 8007286:	bd30      	pop	{r4, r5, pc}
 8007288:	4283      	cmp	r3, r0
 800728a:	d3f3      	bcc.n	8007274 <__mcmp+0x18>
 800728c:	e7fa      	b.n	8007284 <__mcmp+0x28>
 800728e:	f04f 32ff 	mov.w	r2, #4294967295
 8007292:	e7f7      	b.n	8007284 <__mcmp+0x28>

08007294 <__mdiff>:
 8007294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	4606      	mov	r6, r0
 800729c:	4611      	mov	r1, r2
 800729e:	4620      	mov	r0, r4
 80072a0:	4690      	mov	r8, r2
 80072a2:	f7ff ffdb 	bl	800725c <__mcmp>
 80072a6:	1e05      	subs	r5, r0, #0
 80072a8:	d110      	bne.n	80072cc <__mdiff+0x38>
 80072aa:	4629      	mov	r1, r5
 80072ac:	4630      	mov	r0, r6
 80072ae:	f7ff fd53 	bl	8006d58 <_Balloc>
 80072b2:	b930      	cbnz	r0, 80072c2 <__mdiff+0x2e>
 80072b4:	4b3a      	ldr	r3, [pc, #232]	; (80073a0 <__mdiff+0x10c>)
 80072b6:	4602      	mov	r2, r0
 80072b8:	f240 2132 	movw	r1, #562	; 0x232
 80072bc:	4839      	ldr	r0, [pc, #228]	; (80073a4 <__mdiff+0x110>)
 80072be:	f000 f9af 	bl	8007620 <__assert_func>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072cc:	bfa4      	itt	ge
 80072ce:	4643      	movge	r3, r8
 80072d0:	46a0      	movge	r8, r4
 80072d2:	4630      	mov	r0, r6
 80072d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072d8:	bfa6      	itte	ge
 80072da:	461c      	movge	r4, r3
 80072dc:	2500      	movge	r5, #0
 80072de:	2501      	movlt	r5, #1
 80072e0:	f7ff fd3a 	bl	8006d58 <_Balloc>
 80072e4:	b920      	cbnz	r0, 80072f0 <__mdiff+0x5c>
 80072e6:	4b2e      	ldr	r3, [pc, #184]	; (80073a0 <__mdiff+0x10c>)
 80072e8:	4602      	mov	r2, r0
 80072ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072ee:	e7e5      	b.n	80072bc <__mdiff+0x28>
 80072f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072f4:	6926      	ldr	r6, [r4, #16]
 80072f6:	60c5      	str	r5, [r0, #12]
 80072f8:	f104 0914 	add.w	r9, r4, #20
 80072fc:	f108 0514 	add.w	r5, r8, #20
 8007300:	f100 0e14 	add.w	lr, r0, #20
 8007304:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007308:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800730c:	f108 0210 	add.w	r2, r8, #16
 8007310:	46f2      	mov	sl, lr
 8007312:	2100      	movs	r1, #0
 8007314:	f859 3b04 	ldr.w	r3, [r9], #4
 8007318:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800731c:	fa1f f883 	uxth.w	r8, r3
 8007320:	fa11 f18b 	uxtah	r1, r1, fp
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	eba1 0808 	sub.w	r8, r1, r8
 800732a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800732e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007332:	fa1f f888 	uxth.w	r8, r8
 8007336:	1419      	asrs	r1, r3, #16
 8007338:	454e      	cmp	r6, r9
 800733a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800733e:	f84a 3b04 	str.w	r3, [sl], #4
 8007342:	d8e7      	bhi.n	8007314 <__mdiff+0x80>
 8007344:	1b33      	subs	r3, r6, r4
 8007346:	3b15      	subs	r3, #21
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	3304      	adds	r3, #4
 800734e:	3415      	adds	r4, #21
 8007350:	42a6      	cmp	r6, r4
 8007352:	bf38      	it	cc
 8007354:	2304      	movcc	r3, #4
 8007356:	441d      	add	r5, r3
 8007358:	4473      	add	r3, lr
 800735a:	469e      	mov	lr, r3
 800735c:	462e      	mov	r6, r5
 800735e:	4566      	cmp	r6, ip
 8007360:	d30e      	bcc.n	8007380 <__mdiff+0xec>
 8007362:	f10c 0203 	add.w	r2, ip, #3
 8007366:	1b52      	subs	r2, r2, r5
 8007368:	f022 0203 	bic.w	r2, r2, #3
 800736c:	3d03      	subs	r5, #3
 800736e:	45ac      	cmp	ip, r5
 8007370:	bf38      	it	cc
 8007372:	2200      	movcc	r2, #0
 8007374:	441a      	add	r2, r3
 8007376:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800737a:	b17b      	cbz	r3, 800739c <__mdiff+0x108>
 800737c:	6107      	str	r7, [r0, #16]
 800737e:	e7a3      	b.n	80072c8 <__mdiff+0x34>
 8007380:	f856 8b04 	ldr.w	r8, [r6], #4
 8007384:	fa11 f288 	uxtah	r2, r1, r8
 8007388:	1414      	asrs	r4, r2, #16
 800738a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800738e:	b292      	uxth	r2, r2
 8007390:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007394:	f84e 2b04 	str.w	r2, [lr], #4
 8007398:	1421      	asrs	r1, r4, #16
 800739a:	e7e0      	b.n	800735e <__mdiff+0xca>
 800739c:	3f01      	subs	r7, #1
 800739e:	e7ea      	b.n	8007376 <__mdiff+0xe2>
 80073a0:	0800928b 	.word	0x0800928b
 80073a4:	0800922f 	.word	0x0800922f

080073a8 <__d2b>:
 80073a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	4689      	mov	r9, r1
 80073ae:	2101      	movs	r1, #1
 80073b0:	ec57 6b10 	vmov	r6, r7, d0
 80073b4:	4690      	mov	r8, r2
 80073b6:	f7ff fccf 	bl	8006d58 <_Balloc>
 80073ba:	4604      	mov	r4, r0
 80073bc:	b930      	cbnz	r0, 80073cc <__d2b+0x24>
 80073be:	4602      	mov	r2, r0
 80073c0:	4b25      	ldr	r3, [pc, #148]	; (8007458 <__d2b+0xb0>)
 80073c2:	4826      	ldr	r0, [pc, #152]	; (800745c <__d2b+0xb4>)
 80073c4:	f240 310a 	movw	r1, #778	; 0x30a
 80073c8:	f000 f92a 	bl	8007620 <__assert_func>
 80073cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80073d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073d4:	bb35      	cbnz	r5, 8007424 <__d2b+0x7c>
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	d028      	beq.n	800742e <__d2b+0x86>
 80073dc:	4668      	mov	r0, sp
 80073de:	9600      	str	r6, [sp, #0]
 80073e0:	f7ff fd82 	bl	8006ee8 <__lo0bits>
 80073e4:	9900      	ldr	r1, [sp, #0]
 80073e6:	b300      	cbz	r0, 800742a <__d2b+0x82>
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	f1c0 0320 	rsb	r3, r0, #32
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	430b      	orrs	r3, r1
 80073f4:	40c2      	lsrs	r2, r0
 80073f6:	6163      	str	r3, [r4, #20]
 80073f8:	9201      	str	r2, [sp, #4]
 80073fa:	9b01      	ldr	r3, [sp, #4]
 80073fc:	61a3      	str	r3, [r4, #24]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bf14      	ite	ne
 8007402:	2202      	movne	r2, #2
 8007404:	2201      	moveq	r2, #1
 8007406:	6122      	str	r2, [r4, #16]
 8007408:	b1d5      	cbz	r5, 8007440 <__d2b+0x98>
 800740a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800740e:	4405      	add	r5, r0
 8007410:	f8c9 5000 	str.w	r5, [r9]
 8007414:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007418:	f8c8 0000 	str.w	r0, [r8]
 800741c:	4620      	mov	r0, r4
 800741e:	b003      	add	sp, #12
 8007420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007428:	e7d5      	b.n	80073d6 <__d2b+0x2e>
 800742a:	6161      	str	r1, [r4, #20]
 800742c:	e7e5      	b.n	80073fa <__d2b+0x52>
 800742e:	a801      	add	r0, sp, #4
 8007430:	f7ff fd5a 	bl	8006ee8 <__lo0bits>
 8007434:	9b01      	ldr	r3, [sp, #4]
 8007436:	6163      	str	r3, [r4, #20]
 8007438:	2201      	movs	r2, #1
 800743a:	6122      	str	r2, [r4, #16]
 800743c:	3020      	adds	r0, #32
 800743e:	e7e3      	b.n	8007408 <__d2b+0x60>
 8007440:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007444:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007448:	f8c9 0000 	str.w	r0, [r9]
 800744c:	6918      	ldr	r0, [r3, #16]
 800744e:	f7ff fd2b 	bl	8006ea8 <__hi0bits>
 8007452:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007456:	e7df      	b.n	8007418 <__d2b+0x70>
 8007458:	0800928b 	.word	0x0800928b
 800745c:	0800922f 	.word	0x0800922f

08007460 <_mprec_log10>:
 8007460:	2817      	cmp	r0, #23
 8007462:	b5d0      	push	{r4, r6, r7, lr}
 8007464:	4604      	mov	r4, r0
 8007466:	dc07      	bgt.n	8007478 <_mprec_log10+0x18>
 8007468:	4809      	ldr	r0, [pc, #36]	; (8007490 <_mprec_log10+0x30>)
 800746a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800746e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007472:	ec41 0b10 	vmov	d0, r0, r1
 8007476:	bdd0      	pop	{r4, r6, r7, pc}
 8007478:	4906      	ldr	r1, [pc, #24]	; (8007494 <_mprec_log10+0x34>)
 800747a:	4f07      	ldr	r7, [pc, #28]	; (8007498 <_mprec_log10+0x38>)
 800747c:	2000      	movs	r0, #0
 800747e:	2600      	movs	r6, #0
 8007480:	4632      	mov	r2, r6
 8007482:	463b      	mov	r3, r7
 8007484:	f7f9 f8d8 	bl	8000638 <__aeabi_dmul>
 8007488:	3c01      	subs	r4, #1
 800748a:	d1f9      	bne.n	8007480 <_mprec_log10+0x20>
 800748c:	e7f1      	b.n	8007472 <_mprec_log10+0x12>
 800748e:	bf00      	nop
 8007490:	080092c8 	.word	0x080092c8
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	40240000 	.word	0x40240000

0800749c <_calloc_r>:
 800749c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800749e:	fba1 2402 	umull	r2, r4, r1, r2
 80074a2:	b94c      	cbnz	r4, 80074b8 <_calloc_r+0x1c>
 80074a4:	4611      	mov	r1, r2
 80074a6:	9201      	str	r2, [sp, #4]
 80074a8:	f000 f82e 	bl	8007508 <_malloc_r>
 80074ac:	9a01      	ldr	r2, [sp, #4]
 80074ae:	4605      	mov	r5, r0
 80074b0:	b930      	cbnz	r0, 80074c0 <_calloc_r+0x24>
 80074b2:	4628      	mov	r0, r5
 80074b4:	b003      	add	sp, #12
 80074b6:	bd30      	pop	{r4, r5, pc}
 80074b8:	220c      	movs	r2, #12
 80074ba:	6002      	str	r2, [r0, #0]
 80074bc:	2500      	movs	r5, #0
 80074be:	e7f8      	b.n	80074b2 <_calloc_r+0x16>
 80074c0:	4621      	mov	r1, r4
 80074c2:	f7ff fb09 	bl	8006ad8 <memset>
 80074c6:	e7f4      	b.n	80074b2 <_calloc_r+0x16>

080074c8 <sbrk_aligned>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4e0e      	ldr	r6, [pc, #56]	; (8007504 <sbrk_aligned+0x3c>)
 80074cc:	460c      	mov	r4, r1
 80074ce:	6831      	ldr	r1, [r6, #0]
 80074d0:	4605      	mov	r5, r0
 80074d2:	b911      	cbnz	r1, 80074da <sbrk_aligned+0x12>
 80074d4:	f000 f88c 	bl	80075f0 <_sbrk_r>
 80074d8:	6030      	str	r0, [r6, #0]
 80074da:	4621      	mov	r1, r4
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f887 	bl	80075f0 <_sbrk_r>
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	d00a      	beq.n	80074fc <sbrk_aligned+0x34>
 80074e6:	1cc4      	adds	r4, r0, #3
 80074e8:	f024 0403 	bic.w	r4, r4, #3
 80074ec:	42a0      	cmp	r0, r4
 80074ee:	d007      	beq.n	8007500 <sbrk_aligned+0x38>
 80074f0:	1a21      	subs	r1, r4, r0
 80074f2:	4628      	mov	r0, r5
 80074f4:	f000 f87c 	bl	80075f0 <_sbrk_r>
 80074f8:	3001      	adds	r0, #1
 80074fa:	d101      	bne.n	8007500 <sbrk_aligned+0x38>
 80074fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007500:	4620      	mov	r0, r4
 8007502:	bd70      	pop	{r4, r5, r6, pc}
 8007504:	2000078c 	.word	0x2000078c

08007508 <_malloc_r>:
 8007508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800750c:	1ccd      	adds	r5, r1, #3
 800750e:	f025 0503 	bic.w	r5, r5, #3
 8007512:	3508      	adds	r5, #8
 8007514:	2d0c      	cmp	r5, #12
 8007516:	bf38      	it	cc
 8007518:	250c      	movcc	r5, #12
 800751a:	2d00      	cmp	r5, #0
 800751c:	4607      	mov	r7, r0
 800751e:	db01      	blt.n	8007524 <_malloc_r+0x1c>
 8007520:	42a9      	cmp	r1, r5
 8007522:	d905      	bls.n	8007530 <_malloc_r+0x28>
 8007524:	230c      	movs	r3, #12
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	2600      	movs	r6, #0
 800752a:	4630      	mov	r0, r6
 800752c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007530:	4e2e      	ldr	r6, [pc, #184]	; (80075ec <_malloc_r+0xe4>)
 8007532:	f000 ff37 	bl	80083a4 <__malloc_lock>
 8007536:	6833      	ldr	r3, [r6, #0]
 8007538:	461c      	mov	r4, r3
 800753a:	bb34      	cbnz	r4, 800758a <_malloc_r+0x82>
 800753c:	4629      	mov	r1, r5
 800753e:	4638      	mov	r0, r7
 8007540:	f7ff ffc2 	bl	80074c8 <sbrk_aligned>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	4604      	mov	r4, r0
 8007548:	d14d      	bne.n	80075e6 <_malloc_r+0xde>
 800754a:	6834      	ldr	r4, [r6, #0]
 800754c:	4626      	mov	r6, r4
 800754e:	2e00      	cmp	r6, #0
 8007550:	d140      	bne.n	80075d4 <_malloc_r+0xcc>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	4631      	mov	r1, r6
 8007556:	4638      	mov	r0, r7
 8007558:	eb04 0803 	add.w	r8, r4, r3
 800755c:	f000 f848 	bl	80075f0 <_sbrk_r>
 8007560:	4580      	cmp	r8, r0
 8007562:	d13a      	bne.n	80075da <_malloc_r+0xd2>
 8007564:	6821      	ldr	r1, [r4, #0]
 8007566:	3503      	adds	r5, #3
 8007568:	1a6d      	subs	r5, r5, r1
 800756a:	f025 0503 	bic.w	r5, r5, #3
 800756e:	3508      	adds	r5, #8
 8007570:	2d0c      	cmp	r5, #12
 8007572:	bf38      	it	cc
 8007574:	250c      	movcc	r5, #12
 8007576:	4629      	mov	r1, r5
 8007578:	4638      	mov	r0, r7
 800757a:	f7ff ffa5 	bl	80074c8 <sbrk_aligned>
 800757e:	3001      	adds	r0, #1
 8007580:	d02b      	beq.n	80075da <_malloc_r+0xd2>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	442b      	add	r3, r5
 8007586:	6023      	str	r3, [r4, #0]
 8007588:	e00e      	b.n	80075a8 <_malloc_r+0xa0>
 800758a:	6822      	ldr	r2, [r4, #0]
 800758c:	1b52      	subs	r2, r2, r5
 800758e:	d41e      	bmi.n	80075ce <_malloc_r+0xc6>
 8007590:	2a0b      	cmp	r2, #11
 8007592:	d916      	bls.n	80075c2 <_malloc_r+0xba>
 8007594:	1961      	adds	r1, r4, r5
 8007596:	42a3      	cmp	r3, r4
 8007598:	6025      	str	r5, [r4, #0]
 800759a:	bf18      	it	ne
 800759c:	6059      	strne	r1, [r3, #4]
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	bf08      	it	eq
 80075a2:	6031      	streq	r1, [r6, #0]
 80075a4:	5162      	str	r2, [r4, r5]
 80075a6:	604b      	str	r3, [r1, #4]
 80075a8:	4638      	mov	r0, r7
 80075aa:	f104 060b 	add.w	r6, r4, #11
 80075ae:	f000 feff 	bl	80083b0 <__malloc_unlock>
 80075b2:	f026 0607 	bic.w	r6, r6, #7
 80075b6:	1d23      	adds	r3, r4, #4
 80075b8:	1af2      	subs	r2, r6, r3
 80075ba:	d0b6      	beq.n	800752a <_malloc_r+0x22>
 80075bc:	1b9b      	subs	r3, r3, r6
 80075be:	50a3      	str	r3, [r4, r2]
 80075c0:	e7b3      	b.n	800752a <_malloc_r+0x22>
 80075c2:	6862      	ldr	r2, [r4, #4]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	bf0c      	ite	eq
 80075c8:	6032      	streq	r2, [r6, #0]
 80075ca:	605a      	strne	r2, [r3, #4]
 80075cc:	e7ec      	b.n	80075a8 <_malloc_r+0xa0>
 80075ce:	4623      	mov	r3, r4
 80075d0:	6864      	ldr	r4, [r4, #4]
 80075d2:	e7b2      	b.n	800753a <_malloc_r+0x32>
 80075d4:	4634      	mov	r4, r6
 80075d6:	6876      	ldr	r6, [r6, #4]
 80075d8:	e7b9      	b.n	800754e <_malloc_r+0x46>
 80075da:	230c      	movs	r3, #12
 80075dc:	603b      	str	r3, [r7, #0]
 80075de:	4638      	mov	r0, r7
 80075e0:	f000 fee6 	bl	80083b0 <__malloc_unlock>
 80075e4:	e7a1      	b.n	800752a <_malloc_r+0x22>
 80075e6:	6025      	str	r5, [r4, #0]
 80075e8:	e7de      	b.n	80075a8 <_malloc_r+0xa0>
 80075ea:	bf00      	nop
 80075ec:	20000788 	.word	0x20000788

080075f0 <_sbrk_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d06      	ldr	r5, [pc, #24]	; (800760c <_sbrk_r+0x1c>)
 80075f4:	2300      	movs	r3, #0
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fa fa82 	bl	8001b04 <_sbrk>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_sbrk_r+0x1a>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_sbrk_r+0x1a>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	20000790 	.word	0x20000790

08007610 <strcpy>:
 8007610:	4603      	mov	r3, r0
 8007612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007616:	f803 2b01 	strb.w	r2, [r3], #1
 800761a:	2a00      	cmp	r2, #0
 800761c:	d1f9      	bne.n	8007612 <strcpy+0x2>
 800761e:	4770      	bx	lr

08007620 <__assert_func>:
 8007620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007622:	4614      	mov	r4, r2
 8007624:	461a      	mov	r2, r3
 8007626:	4b09      	ldr	r3, [pc, #36]	; (800764c <__assert_func+0x2c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4605      	mov	r5, r0
 800762c:	68d8      	ldr	r0, [r3, #12]
 800762e:	b14c      	cbz	r4, 8007644 <__assert_func+0x24>
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <__assert_func+0x30>)
 8007632:	9100      	str	r1, [sp, #0]
 8007634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007638:	4906      	ldr	r1, [pc, #24]	; (8007654 <__assert_func+0x34>)
 800763a:	462b      	mov	r3, r5
 800763c:	f000 fe8a 	bl	8008354 <fiprintf>
 8007640:	f001 fab6 	bl	8008bb0 <abort>
 8007644:	4b04      	ldr	r3, [pc, #16]	; (8007658 <__assert_func+0x38>)
 8007646:	461c      	mov	r4, r3
 8007648:	e7f3      	b.n	8007632 <__assert_func+0x12>
 800764a:	bf00      	nop
 800764c:	2000000c 	.word	0x2000000c
 8007650:	0800939c 	.word	0x0800939c
 8007654:	080093a9 	.word	0x080093a9
 8007658:	080093d7 	.word	0x080093d7

0800765c <quorem>:
 800765c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	6903      	ldr	r3, [r0, #16]
 8007662:	690c      	ldr	r4, [r1, #16]
 8007664:	42a3      	cmp	r3, r4
 8007666:	4607      	mov	r7, r0
 8007668:	f2c0 8081 	blt.w	800776e <quorem+0x112>
 800766c:	3c01      	subs	r4, #1
 800766e:	f101 0814 	add.w	r8, r1, #20
 8007672:	f100 0514 	add.w	r5, r0, #20
 8007676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007684:	3301      	adds	r3, #1
 8007686:	429a      	cmp	r2, r3
 8007688:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800768c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007690:	fbb2 f6f3 	udiv	r6, r2, r3
 8007694:	d331      	bcc.n	80076fa <quorem+0x9e>
 8007696:	f04f 0e00 	mov.w	lr, #0
 800769a:	4640      	mov	r0, r8
 800769c:	46ac      	mov	ip, r5
 800769e:	46f2      	mov	sl, lr
 80076a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80076a4:	b293      	uxth	r3, r2
 80076a6:	fb06 e303 	mla	r3, r6, r3, lr
 80076aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ebaa 0303 	sub.w	r3, sl, r3
 80076b4:	f8dc a000 	ldr.w	sl, [ip]
 80076b8:	0c12      	lsrs	r2, r2, #16
 80076ba:	fa13 f38a 	uxtah	r3, r3, sl
 80076be:	fb06 e202 	mla	r2, r6, r2, lr
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ca:	b292      	uxth	r2, r2
 80076cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80076d8:	4581      	cmp	r9, r0
 80076da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076de:	f84c 3b04 	str.w	r3, [ip], #4
 80076e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076e6:	d2db      	bcs.n	80076a0 <quorem+0x44>
 80076e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80076ec:	b92b      	cbnz	r3, 80076fa <quorem+0x9e>
 80076ee:	9b01      	ldr	r3, [sp, #4]
 80076f0:	3b04      	subs	r3, #4
 80076f2:	429d      	cmp	r5, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	d32e      	bcc.n	8007756 <quorem+0xfa>
 80076f8:	613c      	str	r4, [r7, #16]
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff fdae 	bl	800725c <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	db24      	blt.n	800774e <quorem+0xf2>
 8007704:	3601      	adds	r6, #1
 8007706:	4628      	mov	r0, r5
 8007708:	f04f 0c00 	mov.w	ip, #0
 800770c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007710:	f8d0 e000 	ldr.w	lr, [r0]
 8007714:	b293      	uxth	r3, r2
 8007716:	ebac 0303 	sub.w	r3, ip, r3
 800771a:	0c12      	lsrs	r2, r2, #16
 800771c:	fa13 f38e 	uxtah	r3, r3, lr
 8007720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007728:	b29b      	uxth	r3, r3
 800772a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772e:	45c1      	cmp	r9, r8
 8007730:	f840 3b04 	str.w	r3, [r0], #4
 8007734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007738:	d2e8      	bcs.n	800770c <quorem+0xb0>
 800773a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007742:	b922      	cbnz	r2, 800774e <quorem+0xf2>
 8007744:	3b04      	subs	r3, #4
 8007746:	429d      	cmp	r5, r3
 8007748:	461a      	mov	r2, r3
 800774a:	d30a      	bcc.n	8007762 <quorem+0x106>
 800774c:	613c      	str	r4, [r7, #16]
 800774e:	4630      	mov	r0, r6
 8007750:	b003      	add	sp, #12
 8007752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	3b04      	subs	r3, #4
 800775a:	2a00      	cmp	r2, #0
 800775c:	d1cc      	bne.n	80076f8 <quorem+0x9c>
 800775e:	3c01      	subs	r4, #1
 8007760:	e7c7      	b.n	80076f2 <quorem+0x96>
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	3b04      	subs	r3, #4
 8007766:	2a00      	cmp	r2, #0
 8007768:	d1f0      	bne.n	800774c <quorem+0xf0>
 800776a:	3c01      	subs	r4, #1
 800776c:	e7eb      	b.n	8007746 <quorem+0xea>
 800776e:	2000      	movs	r0, #0
 8007770:	e7ee      	b.n	8007750 <quorem+0xf4>
 8007772:	0000      	movs	r0, r0
 8007774:	0000      	movs	r0, r0
	...

08007778 <_dtoa_r>:
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	ed2d 8b04 	vpush	{d8-d9}
 8007780:	ec57 6b10 	vmov	r6, r7, d0
 8007784:	b093      	sub	sp, #76	; 0x4c
 8007786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007788:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800778c:	9106      	str	r1, [sp, #24]
 800778e:	ee10 aa10 	vmov	sl, s0
 8007792:	4604      	mov	r4, r0
 8007794:	9209      	str	r2, [sp, #36]	; 0x24
 8007796:	930c      	str	r3, [sp, #48]	; 0x30
 8007798:	46bb      	mov	fp, r7
 800779a:	b975      	cbnz	r5, 80077ba <_dtoa_r+0x42>
 800779c:	2010      	movs	r0, #16
 800779e:	f000 fdeb 	bl	8008378 <malloc>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6260      	str	r0, [r4, #36]	; 0x24
 80077a6:	b920      	cbnz	r0, 80077b2 <_dtoa_r+0x3a>
 80077a8:	4ba7      	ldr	r3, [pc, #668]	; (8007a48 <_dtoa_r+0x2d0>)
 80077aa:	21ea      	movs	r1, #234	; 0xea
 80077ac:	48a7      	ldr	r0, [pc, #668]	; (8007a4c <_dtoa_r+0x2d4>)
 80077ae:	f7ff ff37 	bl	8007620 <__assert_func>
 80077b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077b6:	6005      	str	r5, [r0, #0]
 80077b8:	60c5      	str	r5, [r0, #12]
 80077ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	b151      	cbz	r1, 80077d6 <_dtoa_r+0x5e>
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	604a      	str	r2, [r1, #4]
 80077c4:	2301      	movs	r3, #1
 80077c6:	4093      	lsls	r3, r2
 80077c8:	608b      	str	r3, [r1, #8]
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fb04 	bl	8006dd8 <_Bfree>
 80077d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	1e3b      	subs	r3, r7, #0
 80077d8:	bfaa      	itet	ge
 80077da:	2300      	movge	r3, #0
 80077dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077e0:	f8c8 3000 	strge.w	r3, [r8]
 80077e4:	4b9a      	ldr	r3, [pc, #616]	; (8007a50 <_dtoa_r+0x2d8>)
 80077e6:	bfbc      	itt	lt
 80077e8:	2201      	movlt	r2, #1
 80077ea:	f8c8 2000 	strlt.w	r2, [r8]
 80077ee:	ea33 030b 	bics.w	r3, r3, fp
 80077f2:	d11b      	bne.n	800782c <_dtoa_r+0xb4>
 80077f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007800:	4333      	orrs	r3, r6
 8007802:	f000 8592 	beq.w	800832a <_dtoa_r+0xbb2>
 8007806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007808:	b963      	cbnz	r3, 8007824 <_dtoa_r+0xac>
 800780a:	4b92      	ldr	r3, [pc, #584]	; (8007a54 <_dtoa_r+0x2dc>)
 800780c:	e022      	b.n	8007854 <_dtoa_r+0xdc>
 800780e:	4b92      	ldr	r3, [pc, #584]	; (8007a58 <_dtoa_r+0x2e0>)
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	3308      	adds	r3, #8
 8007814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	9801      	ldr	r0, [sp, #4]
 800781a:	b013      	add	sp, #76	; 0x4c
 800781c:	ecbd 8b04 	vpop	{d8-d9}
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	4b8b      	ldr	r3, [pc, #556]	; (8007a54 <_dtoa_r+0x2dc>)
 8007826:	9301      	str	r3, [sp, #4]
 8007828:	3303      	adds	r3, #3
 800782a:	e7f3      	b.n	8007814 <_dtoa_r+0x9c>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	4650      	mov	r0, sl
 8007832:	4659      	mov	r1, fp
 8007834:	f7f9 f968 	bl	8000b08 <__aeabi_dcmpeq>
 8007838:	ec4b ab19 	vmov	d9, sl, fp
 800783c:	4680      	mov	r8, r0
 800783e:	b158      	cbz	r0, 8007858 <_dtoa_r+0xe0>
 8007840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007842:	2301      	movs	r3, #1
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 856b 	beq.w	8008324 <_dtoa_r+0xbac>
 800784e:	4883      	ldr	r0, [pc, #524]	; (8007a5c <_dtoa_r+0x2e4>)
 8007850:	6018      	str	r0, [r3, #0]
 8007852:	1e43      	subs	r3, r0, #1
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	e7df      	b.n	8007818 <_dtoa_r+0xa0>
 8007858:	ec4b ab10 	vmov	d0, sl, fp
 800785c:	aa10      	add	r2, sp, #64	; 0x40
 800785e:	a911      	add	r1, sp, #68	; 0x44
 8007860:	4620      	mov	r0, r4
 8007862:	f7ff fda1 	bl	80073a8 <__d2b>
 8007866:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800786a:	ee08 0a10 	vmov	s16, r0
 800786e:	2d00      	cmp	r5, #0
 8007870:	f000 8084 	beq.w	800797c <_dtoa_r+0x204>
 8007874:	ee19 3a90 	vmov	r3, s19
 8007878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800787c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007880:	4656      	mov	r6, sl
 8007882:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800788a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800788e:	4b74      	ldr	r3, [pc, #464]	; (8007a60 <_dtoa_r+0x2e8>)
 8007890:	2200      	movs	r2, #0
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fd17 	bl	80002c8 <__aeabi_dsub>
 800789a:	a365      	add	r3, pc, #404	; (adr r3, 8007a30 <_dtoa_r+0x2b8>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 feca 	bl	8000638 <__aeabi_dmul>
 80078a4:	a364      	add	r3, pc, #400	; (adr r3, 8007a38 <_dtoa_r+0x2c0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fd0f 	bl	80002cc <__adddf3>
 80078ae:	4606      	mov	r6, r0
 80078b0:	4628      	mov	r0, r5
 80078b2:	460f      	mov	r7, r1
 80078b4:	f7f8 fe56 	bl	8000564 <__aeabi_i2d>
 80078b8:	a361      	add	r3, pc, #388	; (adr r3, 8007a40 <_dtoa_r+0x2c8>)
 80078ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078be:	f7f8 febb 	bl	8000638 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fcff 	bl	80002cc <__adddf3>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	f7f9 f94b 	bl	8000b6c <__aeabi_d2iz>
 80078d6:	2200      	movs	r2, #0
 80078d8:	9000      	str	r0, [sp, #0]
 80078da:	2300      	movs	r3, #0
 80078dc:	4630      	mov	r0, r6
 80078de:	4639      	mov	r1, r7
 80078e0:	f7f9 f91c 	bl	8000b1c <__aeabi_dcmplt>
 80078e4:	b150      	cbz	r0, 80078fc <_dtoa_r+0x184>
 80078e6:	9800      	ldr	r0, [sp, #0]
 80078e8:	f7f8 fe3c 	bl	8000564 <__aeabi_i2d>
 80078ec:	4632      	mov	r2, r6
 80078ee:	463b      	mov	r3, r7
 80078f0:	f7f9 f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80078f4:	b910      	cbnz	r0, 80078fc <_dtoa_r+0x184>
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	9b00      	ldr	r3, [sp, #0]
 80078fe:	2b16      	cmp	r3, #22
 8007900:	d85a      	bhi.n	80079b8 <_dtoa_r+0x240>
 8007902:	9a00      	ldr	r2, [sp, #0]
 8007904:	4b57      	ldr	r3, [pc, #348]	; (8007a64 <_dtoa_r+0x2ec>)
 8007906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	ec51 0b19 	vmov	r0, r1, d9
 8007912:	f7f9 f903 	bl	8000b1c <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d050      	beq.n	80079bc <_dtoa_r+0x244>
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2300      	movs	r3, #0
 8007922:	930b      	str	r3, [sp, #44]	; 0x2c
 8007924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007926:	1b5d      	subs	r5, r3, r5
 8007928:	1e6b      	subs	r3, r5, #1
 800792a:	9305      	str	r3, [sp, #20]
 800792c:	bf45      	ittet	mi
 800792e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007932:	9304      	strmi	r3, [sp, #16]
 8007934:	2300      	movpl	r3, #0
 8007936:	2300      	movmi	r3, #0
 8007938:	bf4c      	ite	mi
 800793a:	9305      	strmi	r3, [sp, #20]
 800793c:	9304      	strpl	r3, [sp, #16]
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	db3d      	blt.n	80079c0 <_dtoa_r+0x248>
 8007944:	9b05      	ldr	r3, [sp, #20]
 8007946:	9a00      	ldr	r2, [sp, #0]
 8007948:	920a      	str	r2, [sp, #40]	; 0x28
 800794a:	4413      	add	r3, r2
 800794c:	9305      	str	r3, [sp, #20]
 800794e:	2300      	movs	r3, #0
 8007950:	9307      	str	r3, [sp, #28]
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	2b09      	cmp	r3, #9
 8007956:	f200 8089 	bhi.w	8007a6c <_dtoa_r+0x2f4>
 800795a:	2b05      	cmp	r3, #5
 800795c:	bfc4      	itt	gt
 800795e:	3b04      	subgt	r3, #4
 8007960:	9306      	strgt	r3, [sp, #24]
 8007962:	9b06      	ldr	r3, [sp, #24]
 8007964:	f1a3 0302 	sub.w	r3, r3, #2
 8007968:	bfcc      	ite	gt
 800796a:	2500      	movgt	r5, #0
 800796c:	2501      	movle	r5, #1
 800796e:	2b03      	cmp	r3, #3
 8007970:	f200 8087 	bhi.w	8007a82 <_dtoa_r+0x30a>
 8007974:	e8df f003 	tbb	[pc, r3]
 8007978:	59383a2d 	.word	0x59383a2d
 800797c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007980:	441d      	add	r5, r3
 8007982:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007986:	2b20      	cmp	r3, #32
 8007988:	bfc1      	itttt	gt
 800798a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800798e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007992:	fa0b f303 	lslgt.w	r3, fp, r3
 8007996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800799a:	bfda      	itte	le
 800799c:	f1c3 0320 	rsble	r3, r3, #32
 80079a0:	fa06 f003 	lslle.w	r0, r6, r3
 80079a4:	4318      	orrgt	r0, r3
 80079a6:	f7f8 fdcd 	bl	8000544 <__aeabi_ui2d>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4606      	mov	r6, r0
 80079ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079b2:	3d01      	subs	r5, #1
 80079b4:	930e      	str	r3, [sp, #56]	; 0x38
 80079b6:	e76a      	b.n	800788e <_dtoa_r+0x116>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e7b2      	b.n	8007922 <_dtoa_r+0x1aa>
 80079bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80079be:	e7b1      	b.n	8007924 <_dtoa_r+0x1ac>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	9a00      	ldr	r2, [sp, #0]
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	4253      	negs	r3, r2
 80079ca:	9307      	str	r3, [sp, #28]
 80079cc:	2300      	movs	r3, #0
 80079ce:	930a      	str	r3, [sp, #40]	; 0x28
 80079d0:	e7bf      	b.n	8007952 <_dtoa_r+0x1da>
 80079d2:	2300      	movs	r3, #0
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dc55      	bgt.n	8007a88 <_dtoa_r+0x310>
 80079dc:	2301      	movs	r3, #1
 80079de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079e2:	461a      	mov	r2, r3
 80079e4:	9209      	str	r2, [sp, #36]	; 0x24
 80079e6:	e00c      	b.n	8007a02 <_dtoa_r+0x28a>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e7f3      	b.n	80079d4 <_dtoa_r+0x25c>
 80079ec:	2300      	movs	r3, #0
 80079ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079f0:	9308      	str	r3, [sp, #32]
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	9302      	str	r3, [sp, #8]
 80079f8:	3301      	adds	r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	9303      	str	r3, [sp, #12]
 80079fe:	bfb8      	it	lt
 8007a00:	2301      	movlt	r3, #1
 8007a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a04:	2200      	movs	r2, #0
 8007a06:	6042      	str	r2, [r0, #4]
 8007a08:	2204      	movs	r2, #4
 8007a0a:	f102 0614 	add.w	r6, r2, #20
 8007a0e:	429e      	cmp	r6, r3
 8007a10:	6841      	ldr	r1, [r0, #4]
 8007a12:	d93d      	bls.n	8007a90 <_dtoa_r+0x318>
 8007a14:	4620      	mov	r0, r4
 8007a16:	f7ff f99f 	bl	8006d58 <_Balloc>
 8007a1a:	9001      	str	r0, [sp, #4]
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	d13b      	bne.n	8007a98 <_dtoa_r+0x320>
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <_dtoa_r+0x2f0>)
 8007a22:	4602      	mov	r2, r0
 8007a24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a28:	e6c0      	b.n	80077ac <_dtoa_r+0x34>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7df      	b.n	80079ee <_dtoa_r+0x276>
 8007a2e:	bf00      	nop
 8007a30:	636f4361 	.word	0x636f4361
 8007a34:	3fd287a7 	.word	0x3fd287a7
 8007a38:	8b60c8b3 	.word	0x8b60c8b3
 8007a3c:	3fc68a28 	.word	0x3fc68a28
 8007a40:	509f79fb 	.word	0x509f79fb
 8007a44:	3fd34413 	.word	0x3fd34413
 8007a48:	08009218 	.word	0x08009218
 8007a4c:	080093e7 	.word	0x080093e7
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	080093e1 	.word	0x080093e1
 8007a58:	080093d8 	.word	0x080093d8
 8007a5c:	080093e6 	.word	0x080093e6
 8007a60:	3ff80000 	.word	0x3ff80000
 8007a64:	080092c8 	.word	0x080092c8
 8007a68:	0800928b 	.word	0x0800928b
 8007a6c:	2501      	movs	r5, #1
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9306      	str	r3, [sp, #24]
 8007a72:	9508      	str	r5, [sp, #32]
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
 8007a78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	2312      	movs	r3, #18
 8007a80:	e7b0      	b.n	80079e4 <_dtoa_r+0x26c>
 8007a82:	2301      	movs	r3, #1
 8007a84:	9308      	str	r3, [sp, #32]
 8007a86:	e7f5      	b.n	8007a74 <_dtoa_r+0x2fc>
 8007a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a8e:	e7b8      	b.n	8007a02 <_dtoa_r+0x28a>
 8007a90:	3101      	adds	r1, #1
 8007a92:	6041      	str	r1, [r0, #4]
 8007a94:	0052      	lsls	r2, r2, #1
 8007a96:	e7b8      	b.n	8007a0a <_dtoa_r+0x292>
 8007a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9a:	9a01      	ldr	r2, [sp, #4]
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	9b03      	ldr	r3, [sp, #12]
 8007aa0:	2b0e      	cmp	r3, #14
 8007aa2:	f200 809d 	bhi.w	8007be0 <_dtoa_r+0x468>
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f000 809a 	beq.w	8007be0 <_dtoa_r+0x468>
 8007aac:	9b00      	ldr	r3, [sp, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	dd32      	ble.n	8007b18 <_dtoa_r+0x3a0>
 8007ab2:	4ab7      	ldr	r2, [pc, #732]	; (8007d90 <_dtoa_r+0x618>)
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ac0:	9b00      	ldr	r3, [sp, #0]
 8007ac2:	05d8      	lsls	r0, r3, #23
 8007ac4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ac8:	d516      	bpl.n	8007af8 <_dtoa_r+0x380>
 8007aca:	4bb2      	ldr	r3, [pc, #712]	; (8007d94 <_dtoa_r+0x61c>)
 8007acc:	ec51 0b19 	vmov	r0, r1, d9
 8007ad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ad4:	f7f8 feda 	bl	800088c <__aeabi_ddiv>
 8007ad8:	f007 070f 	and.w	r7, r7, #15
 8007adc:	4682      	mov	sl, r0
 8007ade:	468b      	mov	fp, r1
 8007ae0:	2503      	movs	r5, #3
 8007ae2:	4eac      	ldr	r6, [pc, #688]	; (8007d94 <_dtoa_r+0x61c>)
 8007ae4:	b957      	cbnz	r7, 8007afc <_dtoa_r+0x384>
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	464b      	mov	r3, r9
 8007aea:	4650      	mov	r0, sl
 8007aec:	4659      	mov	r1, fp
 8007aee:	f7f8 fecd 	bl	800088c <__aeabi_ddiv>
 8007af2:	4682      	mov	sl, r0
 8007af4:	468b      	mov	fp, r1
 8007af6:	e028      	b.n	8007b4a <_dtoa_r+0x3d2>
 8007af8:	2502      	movs	r5, #2
 8007afa:	e7f2      	b.n	8007ae2 <_dtoa_r+0x36a>
 8007afc:	07f9      	lsls	r1, r7, #31
 8007afe:	d508      	bpl.n	8007b12 <_dtoa_r+0x39a>
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b08:	f7f8 fd96 	bl	8000638 <__aeabi_dmul>
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	4680      	mov	r8, r0
 8007b10:	4689      	mov	r9, r1
 8007b12:	107f      	asrs	r7, r7, #1
 8007b14:	3608      	adds	r6, #8
 8007b16:	e7e5      	b.n	8007ae4 <_dtoa_r+0x36c>
 8007b18:	f000 809b 	beq.w	8007c52 <_dtoa_r+0x4da>
 8007b1c:	9b00      	ldr	r3, [sp, #0]
 8007b1e:	4f9d      	ldr	r7, [pc, #628]	; (8007d94 <_dtoa_r+0x61c>)
 8007b20:	425e      	negs	r6, r3
 8007b22:	4b9b      	ldr	r3, [pc, #620]	; (8007d90 <_dtoa_r+0x618>)
 8007b24:	f006 020f 	and.w	r2, r6, #15
 8007b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	ec51 0b19 	vmov	r0, r1, d9
 8007b34:	f7f8 fd80 	bl	8000638 <__aeabi_dmul>
 8007b38:	1136      	asrs	r6, r6, #4
 8007b3a:	4682      	mov	sl, r0
 8007b3c:	468b      	mov	fp, r1
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2502      	movs	r5, #2
 8007b42:	2e00      	cmp	r6, #0
 8007b44:	d17a      	bne.n	8007c3c <_dtoa_r+0x4c4>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1d3      	bne.n	8007af2 <_dtoa_r+0x37a>
 8007b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8082 	beq.w	8007c56 <_dtoa_r+0x4de>
 8007b52:	4b91      	ldr	r3, [pc, #580]	; (8007d98 <_dtoa_r+0x620>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	4650      	mov	r0, sl
 8007b58:	4659      	mov	r1, fp
 8007b5a:	f7f8 ffdf 	bl	8000b1c <__aeabi_dcmplt>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d079      	beq.n	8007c56 <_dtoa_r+0x4de>
 8007b62:	9b03      	ldr	r3, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d076      	beq.n	8007c56 <_dtoa_r+0x4de>
 8007b68:	9b02      	ldr	r3, [sp, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd36      	ble.n	8007bdc <_dtoa_r+0x464>
 8007b6e:	9b00      	ldr	r3, [sp, #0]
 8007b70:	4650      	mov	r0, sl
 8007b72:	4659      	mov	r1, fp
 8007b74:	1e5f      	subs	r7, r3, #1
 8007b76:	2200      	movs	r2, #0
 8007b78:	4b88      	ldr	r3, [pc, #544]	; (8007d9c <_dtoa_r+0x624>)
 8007b7a:	f7f8 fd5d 	bl	8000638 <__aeabi_dmul>
 8007b7e:	9e02      	ldr	r6, [sp, #8]
 8007b80:	4682      	mov	sl, r0
 8007b82:	468b      	mov	fp, r1
 8007b84:	3501      	adds	r5, #1
 8007b86:	4628      	mov	r0, r5
 8007b88:	f7f8 fcec 	bl	8000564 <__aeabi_i2d>
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	465b      	mov	r3, fp
 8007b90:	f7f8 fd52 	bl	8000638 <__aeabi_dmul>
 8007b94:	4b82      	ldr	r3, [pc, #520]	; (8007da0 <_dtoa_r+0x628>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	f7f8 fb98 	bl	80002cc <__adddf3>
 8007b9c:	46d0      	mov	r8, sl
 8007b9e:	46d9      	mov	r9, fp
 8007ba0:	4682      	mov	sl, r0
 8007ba2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007ba6:	2e00      	cmp	r6, #0
 8007ba8:	d158      	bne.n	8007c5c <_dtoa_r+0x4e4>
 8007baa:	4b7e      	ldr	r3, [pc, #504]	; (8007da4 <_dtoa_r+0x62c>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4640      	mov	r0, r8
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	f7f8 fb89 	bl	80002c8 <__aeabi_dsub>
 8007bb6:	4652      	mov	r2, sl
 8007bb8:	465b      	mov	r3, fp
 8007bba:	4680      	mov	r8, r0
 8007bbc:	4689      	mov	r9, r1
 8007bbe:	f7f8 ffcb 	bl	8000b58 <__aeabi_dcmpgt>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	f040 8295 	bne.w	80080f2 <_dtoa_r+0x97a>
 8007bc8:	4652      	mov	r2, sl
 8007bca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	f040 8289 	bne.w	80080ee <_dtoa_r+0x976>
 8007bdc:	ec5b ab19 	vmov	sl, fp, d9
 8007be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f2c0 8148 	blt.w	8007e78 <_dtoa_r+0x700>
 8007be8:	9a00      	ldr	r2, [sp, #0]
 8007bea:	2a0e      	cmp	r2, #14
 8007bec:	f300 8144 	bgt.w	8007e78 <_dtoa_r+0x700>
 8007bf0:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <_dtoa_r+0x618>)
 8007bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f280 80d5 	bge.w	8007dac <_dtoa_r+0x634>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f300 80d1 	bgt.w	8007dac <_dtoa_r+0x634>
 8007c0a:	f040 826f 	bne.w	80080ec <_dtoa_r+0x974>
 8007c0e:	4b65      	ldr	r3, [pc, #404]	; (8007da4 <_dtoa_r+0x62c>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f7f8 fd0f 	bl	8000638 <__aeabi_dmul>
 8007c1a:	4652      	mov	r2, sl
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	f7f8 ff91 	bl	8000b44 <__aeabi_dcmpge>
 8007c22:	9e03      	ldr	r6, [sp, #12]
 8007c24:	4637      	mov	r7, r6
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8245 	bne.w	80080b6 <_dtoa_r+0x93e>
 8007c2c:	9d01      	ldr	r5, [sp, #4]
 8007c2e:	2331      	movs	r3, #49	; 0x31
 8007c30:	f805 3b01 	strb.w	r3, [r5], #1
 8007c34:	9b00      	ldr	r3, [sp, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	e240      	b.n	80080be <_dtoa_r+0x946>
 8007c3c:	07f2      	lsls	r2, r6, #31
 8007c3e:	d505      	bpl.n	8007c4c <_dtoa_r+0x4d4>
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	f7f8 fcf8 	bl	8000638 <__aeabi_dmul>
 8007c48:	3501      	adds	r5, #1
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	1076      	asrs	r6, r6, #1
 8007c4e:	3708      	adds	r7, #8
 8007c50:	e777      	b.n	8007b42 <_dtoa_r+0x3ca>
 8007c52:	2502      	movs	r5, #2
 8007c54:	e779      	b.n	8007b4a <_dtoa_r+0x3d2>
 8007c56:	9f00      	ldr	r7, [sp, #0]
 8007c58:	9e03      	ldr	r6, [sp, #12]
 8007c5a:	e794      	b.n	8007b86 <_dtoa_r+0x40e>
 8007c5c:	9901      	ldr	r1, [sp, #4]
 8007c5e:	4b4c      	ldr	r3, [pc, #304]	; (8007d90 <_dtoa_r+0x618>)
 8007c60:	4431      	add	r1, r6
 8007c62:	910d      	str	r1, [sp, #52]	; 0x34
 8007c64:	9908      	ldr	r1, [sp, #32]
 8007c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c6e:	2900      	cmp	r1, #0
 8007c70:	d043      	beq.n	8007cfa <_dtoa_r+0x582>
 8007c72:	494d      	ldr	r1, [pc, #308]	; (8007da8 <_dtoa_r+0x630>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f7f8 fe09 	bl	800088c <__aeabi_ddiv>
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	465b      	mov	r3, fp
 8007c7e:	f7f8 fb23 	bl	80002c8 <__aeabi_dsub>
 8007c82:	9d01      	ldr	r5, [sp, #4]
 8007c84:	4682      	mov	sl, r0
 8007c86:	468b      	mov	fp, r1
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7f8 ff6e 	bl	8000b6c <__aeabi_d2iz>
 8007c90:	4606      	mov	r6, r0
 8007c92:	f7f8 fc67 	bl	8000564 <__aeabi_i2d>
 8007c96:	4602      	mov	r2, r0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fb13 	bl	80002c8 <__aeabi_dsub>
 8007ca2:	3630      	adds	r6, #48	; 0x30
 8007ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	465b      	mov	r3, fp
 8007cac:	4680      	mov	r8, r0
 8007cae:	4689      	mov	r9, r1
 8007cb0:	f7f8 ff34 	bl	8000b1c <__aeabi_dcmplt>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d163      	bne.n	8007d80 <_dtoa_r+0x608>
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	4936      	ldr	r1, [pc, #216]	; (8007d98 <_dtoa_r+0x620>)
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	f7f8 fb02 	bl	80002c8 <__aeabi_dsub>
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	f7f8 ff28 	bl	8000b1c <__aeabi_dcmplt>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	f040 80b5 	bne.w	8007e3c <_dtoa_r+0x6c4>
 8007cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cd4:	429d      	cmp	r5, r3
 8007cd6:	d081      	beq.n	8007bdc <_dtoa_r+0x464>
 8007cd8:	4b30      	ldr	r3, [pc, #192]	; (8007d9c <_dtoa_r+0x624>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4650      	mov	r0, sl
 8007cde:	4659      	mov	r1, fp
 8007ce0:	f7f8 fcaa 	bl	8000638 <__aeabi_dmul>
 8007ce4:	4b2d      	ldr	r3, [pc, #180]	; (8007d9c <_dtoa_r+0x624>)
 8007ce6:	4682      	mov	sl, r0
 8007ce8:	468b      	mov	fp, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f7f8 fca2 	bl	8000638 <__aeabi_dmul>
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	4689      	mov	r9, r1
 8007cf8:	e7c6      	b.n	8007c88 <_dtoa_r+0x510>
 8007cfa:	4650      	mov	r0, sl
 8007cfc:	4659      	mov	r1, fp
 8007cfe:	f7f8 fc9b 	bl	8000638 <__aeabi_dmul>
 8007d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d04:	9d01      	ldr	r5, [sp, #4]
 8007d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d08:	4682      	mov	sl, r0
 8007d0a:	468b      	mov	fp, r1
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7f8 ff2c 	bl	8000b6c <__aeabi_d2iz>
 8007d14:	4606      	mov	r6, r0
 8007d16:	f7f8 fc25 	bl	8000564 <__aeabi_i2d>
 8007d1a:	3630      	adds	r6, #48	; 0x30
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4640      	mov	r0, r8
 8007d22:	4649      	mov	r1, r9
 8007d24:	f7f8 fad0 	bl	80002c8 <__aeabi_dsub>
 8007d28:	f805 6b01 	strb.w	r6, [r5], #1
 8007d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d2e:	429d      	cmp	r5, r3
 8007d30:	4680      	mov	r8, r0
 8007d32:	4689      	mov	r9, r1
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	d124      	bne.n	8007d84 <_dtoa_r+0x60c>
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	; (8007da8 <_dtoa_r+0x630>)
 8007d3c:	4650      	mov	r0, sl
 8007d3e:	4659      	mov	r1, fp
 8007d40:	f7f8 fac4 	bl	80002cc <__adddf3>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4640      	mov	r0, r8
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	f7f8 ff04 	bl	8000b58 <__aeabi_dcmpgt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d173      	bne.n	8007e3c <_dtoa_r+0x6c4>
 8007d54:	4652      	mov	r2, sl
 8007d56:	465b      	mov	r3, fp
 8007d58:	4913      	ldr	r1, [pc, #76]	; (8007da8 <_dtoa_r+0x630>)
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f7f8 fab4 	bl	80002c8 <__aeabi_dsub>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4640      	mov	r0, r8
 8007d66:	4649      	mov	r1, r9
 8007d68:	f7f8 fed8 	bl	8000b1c <__aeabi_dcmplt>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	f43f af35 	beq.w	8007bdc <_dtoa_r+0x464>
 8007d72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d74:	1e6b      	subs	r3, r5, #1
 8007d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d0f8      	beq.n	8007d72 <_dtoa_r+0x5fa>
 8007d80:	9700      	str	r7, [sp, #0]
 8007d82:	e049      	b.n	8007e18 <_dtoa_r+0x6a0>
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <_dtoa_r+0x624>)
 8007d86:	f7f8 fc57 	bl	8000638 <__aeabi_dmul>
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	4689      	mov	r9, r1
 8007d8e:	e7bd      	b.n	8007d0c <_dtoa_r+0x594>
 8007d90:	080092c8 	.word	0x080092c8
 8007d94:	080092a0 	.word	0x080092a0
 8007d98:	3ff00000 	.word	0x3ff00000
 8007d9c:	40240000 	.word	0x40240000
 8007da0:	401c0000 	.word	0x401c0000
 8007da4:	40140000 	.word	0x40140000
 8007da8:	3fe00000 	.word	0x3fe00000
 8007dac:	9d01      	ldr	r5, [sp, #4]
 8007dae:	4656      	mov	r6, sl
 8007db0:	465f      	mov	r7, fp
 8007db2:	4642      	mov	r2, r8
 8007db4:	464b      	mov	r3, r9
 8007db6:	4630      	mov	r0, r6
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fd67 	bl	800088c <__aeabi_ddiv>
 8007dbe:	f7f8 fed5 	bl	8000b6c <__aeabi_d2iz>
 8007dc2:	4682      	mov	sl, r0
 8007dc4:	f7f8 fbce 	bl	8000564 <__aeabi_i2d>
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	f7f8 fc34 	bl	8000638 <__aeabi_dmul>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007ddc:	f7f8 fa74 	bl	80002c8 <__aeabi_dsub>
 8007de0:	f805 6b01 	strb.w	r6, [r5], #1
 8007de4:	9e01      	ldr	r6, [sp, #4]
 8007de6:	9f03      	ldr	r7, [sp, #12]
 8007de8:	1bae      	subs	r6, r5, r6
 8007dea:	42b7      	cmp	r7, r6
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	d135      	bne.n	8007e5e <_dtoa_r+0x6e6>
 8007df2:	f7f8 fa6b 	bl	80002cc <__adddf3>
 8007df6:	4642      	mov	r2, r8
 8007df8:	464b      	mov	r3, r9
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460f      	mov	r7, r1
 8007dfe:	f7f8 feab 	bl	8000b58 <__aeabi_dcmpgt>
 8007e02:	b9d0      	cbnz	r0, 8007e3a <_dtoa_r+0x6c2>
 8007e04:	4642      	mov	r2, r8
 8007e06:	464b      	mov	r3, r9
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fe7c 	bl	8000b08 <__aeabi_dcmpeq>
 8007e10:	b110      	cbz	r0, 8007e18 <_dtoa_r+0x6a0>
 8007e12:	f01a 0f01 	tst.w	sl, #1
 8007e16:	d110      	bne.n	8007e3a <_dtoa_r+0x6c2>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	ee18 1a10 	vmov	r1, s16
 8007e1e:	f7fe ffdb 	bl	8006dd8 <_Bfree>
 8007e22:	2300      	movs	r3, #0
 8007e24:	9800      	ldr	r0, [sp, #0]
 8007e26:	702b      	strb	r3, [r5, #0]
 8007e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	6018      	str	r0, [r3, #0]
 8007e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f43f acf1 	beq.w	8007818 <_dtoa_r+0xa0>
 8007e36:	601d      	str	r5, [r3, #0]
 8007e38:	e4ee      	b.n	8007818 <_dtoa_r+0xa0>
 8007e3a:	9f00      	ldr	r7, [sp, #0]
 8007e3c:	462b      	mov	r3, r5
 8007e3e:	461d      	mov	r5, r3
 8007e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e44:	2a39      	cmp	r2, #57	; 0x39
 8007e46:	d106      	bne.n	8007e56 <_dtoa_r+0x6de>
 8007e48:	9a01      	ldr	r2, [sp, #4]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d1f7      	bne.n	8007e3e <_dtoa_r+0x6c6>
 8007e4e:	9901      	ldr	r1, [sp, #4]
 8007e50:	2230      	movs	r2, #48	; 0x30
 8007e52:	3701      	adds	r7, #1
 8007e54:	700a      	strb	r2, [r1, #0]
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	3201      	adds	r2, #1
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e790      	b.n	8007d80 <_dtoa_r+0x608>
 8007e5e:	4ba6      	ldr	r3, [pc, #664]	; (80080f8 <_dtoa_r+0x980>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7f8 fbe9 	bl	8000638 <__aeabi_dmul>
 8007e66:	2200      	movs	r2, #0
 8007e68:	2300      	movs	r3, #0
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	f7f8 fe4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	d09d      	beq.n	8007db2 <_dtoa_r+0x63a>
 8007e76:	e7cf      	b.n	8007e18 <_dtoa_r+0x6a0>
 8007e78:	9a08      	ldr	r2, [sp, #32]
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80d7 	beq.w	800802e <_dtoa_r+0x8b6>
 8007e80:	9a06      	ldr	r2, [sp, #24]
 8007e82:	2a01      	cmp	r2, #1
 8007e84:	f300 80ba 	bgt.w	8007ffc <_dtoa_r+0x884>
 8007e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80b2 	beq.w	8007ff4 <_dtoa_r+0x87c>
 8007e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e94:	9e07      	ldr	r6, [sp, #28]
 8007e96:	9d04      	ldr	r5, [sp, #16]
 8007e98:	9a04      	ldr	r2, [sp, #16]
 8007e9a:	441a      	add	r2, r3
 8007e9c:	9204      	str	r2, [sp, #16]
 8007e9e:	9a05      	ldr	r2, [sp, #20]
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	441a      	add	r2, r3
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	9205      	str	r2, [sp, #20]
 8007ea8:	f7ff f84e 	bl	8006f48 <__i2b>
 8007eac:	4607      	mov	r7, r0
 8007eae:	2d00      	cmp	r5, #0
 8007eb0:	dd0c      	ble.n	8007ecc <_dtoa_r+0x754>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd09      	ble.n	8007ecc <_dtoa_r+0x754>
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	9a04      	ldr	r2, [sp, #16]
 8007ebc:	bfa8      	it	ge
 8007ebe:	462b      	movge	r3, r5
 8007ec0:	1ad2      	subs	r2, r2, r3
 8007ec2:	9204      	str	r2, [sp, #16]
 8007ec4:	9a05      	ldr	r2, [sp, #20]
 8007ec6:	1aed      	subs	r5, r5, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	9305      	str	r3, [sp, #20]
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	b31b      	cbz	r3, 8007f18 <_dtoa_r+0x7a0>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80af 	beq.w	8008036 <_dtoa_r+0x8be>
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	dd13      	ble.n	8007f04 <_dtoa_r+0x78c>
 8007edc:	4639      	mov	r1, r7
 8007ede:	4632      	mov	r2, r6
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f7ff f8f1 	bl	80070c8 <__pow5mult>
 8007ee6:	ee18 2a10 	vmov	r2, s16
 8007eea:	4601      	mov	r1, r0
 8007eec:	4607      	mov	r7, r0
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff f840 	bl	8006f74 <__multiply>
 8007ef4:	ee18 1a10 	vmov	r1, s16
 8007ef8:	4680      	mov	r8, r0
 8007efa:	4620      	mov	r0, r4
 8007efc:	f7fe ff6c 	bl	8006dd8 <_Bfree>
 8007f00:	ee08 8a10 	vmov	s16, r8
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	1b9a      	subs	r2, r3, r6
 8007f08:	d006      	beq.n	8007f18 <_dtoa_r+0x7a0>
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f7ff f8da 	bl	80070c8 <__pow5mult>
 8007f14:	ee08 0a10 	vmov	s16, r0
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7ff f814 	bl	8006f48 <__i2b>
 8007f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	4606      	mov	r6, r0
 8007f26:	f340 8088 	ble.w	800803a <_dtoa_r+0x8c2>
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4601      	mov	r1, r0
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7ff f8ca 	bl	80070c8 <__pow5mult>
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f340 8081 	ble.w	8008040 <_dtoa_r+0x8c8>
 8007f3e:	f04f 0800 	mov.w	r8, #0
 8007f42:	6933      	ldr	r3, [r6, #16]
 8007f44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f48:	6918      	ldr	r0, [r3, #16]
 8007f4a:	f7fe ffad 	bl	8006ea8 <__hi0bits>
 8007f4e:	f1c0 0020 	rsb	r0, r0, #32
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	4418      	add	r0, r3
 8007f56:	f010 001f 	ands.w	r0, r0, #31
 8007f5a:	f000 8092 	beq.w	8008082 <_dtoa_r+0x90a>
 8007f5e:	f1c0 0320 	rsb	r3, r0, #32
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	f340 808a 	ble.w	800807c <_dtoa_r+0x904>
 8007f68:	f1c0 001c 	rsb	r0, r0, #28
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	4403      	add	r3, r0
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	4403      	add	r3, r0
 8007f76:	4405      	add	r5, r0
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	9b04      	ldr	r3, [sp, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd07      	ble.n	8007f90 <_dtoa_r+0x818>
 8007f80:	ee18 1a10 	vmov	r1, s16
 8007f84:	461a      	mov	r2, r3
 8007f86:	4620      	mov	r0, r4
 8007f88:	f7ff f8f8 	bl	800717c <__lshift>
 8007f8c:	ee08 0a10 	vmov	s16, r0
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x82a>
 8007f96:	4631      	mov	r1, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f7ff f8ee 	bl	800717c <__lshift>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d06e      	beq.n	8008086 <_dtoa_r+0x90e>
 8007fa8:	ee18 0a10 	vmov	r0, s16
 8007fac:	4631      	mov	r1, r6
 8007fae:	f7ff f955 	bl	800725c <__mcmp>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	da67      	bge.n	8008086 <_dtoa_r+0x90e>
 8007fb6:	9b00      	ldr	r3, [sp, #0]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	ee18 1a10 	vmov	r1, s16
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7fe ff29 	bl	8006e1c <__multadd>
 8007fca:	9b08      	ldr	r3, [sp, #32]
 8007fcc:	ee08 0a10 	vmov	s16, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 81b1 	beq.w	8008338 <_dtoa_r+0xbc0>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	4639      	mov	r1, r7
 8007fda:	220a      	movs	r2, #10
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7fe ff1d 	bl	8006e1c <__multadd>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	f300 808e 	bgt.w	8008108 <_dtoa_r+0x990>
 8007fec:	9b06      	ldr	r3, [sp, #24]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	dc51      	bgt.n	8008096 <_dtoa_r+0x91e>
 8007ff2:	e089      	b.n	8008108 <_dtoa_r+0x990>
 8007ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ffa:	e74b      	b.n	8007e94 <_dtoa_r+0x71c>
 8007ffc:	9b03      	ldr	r3, [sp, #12]
 8007ffe:	1e5e      	subs	r6, r3, #1
 8008000:	9b07      	ldr	r3, [sp, #28]
 8008002:	42b3      	cmp	r3, r6
 8008004:	bfbf      	itttt	lt
 8008006:	9b07      	ldrlt	r3, [sp, #28]
 8008008:	9607      	strlt	r6, [sp, #28]
 800800a:	1af2      	sublt	r2, r6, r3
 800800c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800800e:	bfb6      	itet	lt
 8008010:	189b      	addlt	r3, r3, r2
 8008012:	1b9e      	subge	r6, r3, r6
 8008014:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	bfb8      	it	lt
 800801a:	2600      	movlt	r6, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfb7      	itett	lt
 8008020:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008024:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008028:	1a9d      	sublt	r5, r3, r2
 800802a:	2300      	movlt	r3, #0
 800802c:	e734      	b.n	8007e98 <_dtoa_r+0x720>
 800802e:	9e07      	ldr	r6, [sp, #28]
 8008030:	9d04      	ldr	r5, [sp, #16]
 8008032:	9f08      	ldr	r7, [sp, #32]
 8008034:	e73b      	b.n	8007eae <_dtoa_r+0x736>
 8008036:	9a07      	ldr	r2, [sp, #28]
 8008038:	e767      	b.n	8007f0a <_dtoa_r+0x792>
 800803a:	9b06      	ldr	r3, [sp, #24]
 800803c:	2b01      	cmp	r3, #1
 800803e:	dc18      	bgt.n	8008072 <_dtoa_r+0x8fa>
 8008040:	f1ba 0f00 	cmp.w	sl, #0
 8008044:	d115      	bne.n	8008072 <_dtoa_r+0x8fa>
 8008046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800804a:	b993      	cbnz	r3, 8008072 <_dtoa_r+0x8fa>
 800804c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008050:	0d1b      	lsrs	r3, r3, #20
 8008052:	051b      	lsls	r3, r3, #20
 8008054:	b183      	cbz	r3, 8008078 <_dtoa_r+0x900>
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	9b05      	ldr	r3, [sp, #20]
 800805e:	3301      	adds	r3, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f04f 0801 	mov.w	r8, #1
 8008066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f af6a 	bne.w	8007f42 <_dtoa_r+0x7ca>
 800806e:	2001      	movs	r0, #1
 8008070:	e76f      	b.n	8007f52 <_dtoa_r+0x7da>
 8008072:	f04f 0800 	mov.w	r8, #0
 8008076:	e7f6      	b.n	8008066 <_dtoa_r+0x8ee>
 8008078:	4698      	mov	r8, r3
 800807a:	e7f4      	b.n	8008066 <_dtoa_r+0x8ee>
 800807c:	f43f af7d 	beq.w	8007f7a <_dtoa_r+0x802>
 8008080:	4618      	mov	r0, r3
 8008082:	301c      	adds	r0, #28
 8008084:	e772      	b.n	8007f6c <_dtoa_r+0x7f4>
 8008086:	9b03      	ldr	r3, [sp, #12]
 8008088:	2b00      	cmp	r3, #0
 800808a:	dc37      	bgt.n	80080fc <_dtoa_r+0x984>
 800808c:	9b06      	ldr	r3, [sp, #24]
 800808e:	2b02      	cmp	r3, #2
 8008090:	dd34      	ble.n	80080fc <_dtoa_r+0x984>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	9302      	str	r3, [sp, #8]
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	b96b      	cbnz	r3, 80080b6 <_dtoa_r+0x93e>
 800809a:	4631      	mov	r1, r6
 800809c:	2205      	movs	r2, #5
 800809e:	4620      	mov	r0, r4
 80080a0:	f7fe febc 	bl	8006e1c <__multadd>
 80080a4:	4601      	mov	r1, r0
 80080a6:	4606      	mov	r6, r0
 80080a8:	ee18 0a10 	vmov	r0, s16
 80080ac:	f7ff f8d6 	bl	800725c <__mcmp>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f73f adbb 	bgt.w	8007c2c <_dtoa_r+0x4b4>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	9d01      	ldr	r5, [sp, #4]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	4631      	mov	r1, r6
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7fe fe87 	bl	8006dd8 <_Bfree>
 80080ca:	2f00      	cmp	r7, #0
 80080cc:	f43f aea4 	beq.w	8007e18 <_dtoa_r+0x6a0>
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	d005      	beq.n	80080e2 <_dtoa_r+0x96a>
 80080d6:	45b8      	cmp	r8, r7
 80080d8:	d003      	beq.n	80080e2 <_dtoa_r+0x96a>
 80080da:	4641      	mov	r1, r8
 80080dc:	4620      	mov	r0, r4
 80080de:	f7fe fe7b 	bl	8006dd8 <_Bfree>
 80080e2:	4639      	mov	r1, r7
 80080e4:	4620      	mov	r0, r4
 80080e6:	f7fe fe77 	bl	8006dd8 <_Bfree>
 80080ea:	e695      	b.n	8007e18 <_dtoa_r+0x6a0>
 80080ec:	2600      	movs	r6, #0
 80080ee:	4637      	mov	r7, r6
 80080f0:	e7e1      	b.n	80080b6 <_dtoa_r+0x93e>
 80080f2:	9700      	str	r7, [sp, #0]
 80080f4:	4637      	mov	r7, r6
 80080f6:	e599      	b.n	8007c2c <_dtoa_r+0x4b4>
 80080f8:	40240000 	.word	0x40240000
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 80ca 	beq.w	8008298 <_dtoa_r+0xb20>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	9302      	str	r3, [sp, #8]
 8008108:	2d00      	cmp	r5, #0
 800810a:	dd05      	ble.n	8008118 <_dtoa_r+0x9a0>
 800810c:	4639      	mov	r1, r7
 800810e:	462a      	mov	r2, r5
 8008110:	4620      	mov	r0, r4
 8008112:	f7ff f833 	bl	800717c <__lshift>
 8008116:	4607      	mov	r7, r0
 8008118:	f1b8 0f00 	cmp.w	r8, #0
 800811c:	d05b      	beq.n	80081d6 <_dtoa_r+0xa5e>
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4620      	mov	r0, r4
 8008122:	f7fe fe19 	bl	8006d58 <_Balloc>
 8008126:	4605      	mov	r5, r0
 8008128:	b928      	cbnz	r0, 8008136 <_dtoa_r+0x9be>
 800812a:	4b87      	ldr	r3, [pc, #540]	; (8008348 <_dtoa_r+0xbd0>)
 800812c:	4602      	mov	r2, r0
 800812e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008132:	f7ff bb3b 	b.w	80077ac <_dtoa_r+0x34>
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	f107 010c 	add.w	r1, r7, #12
 8008140:	300c      	adds	r0, #12
 8008142:	f000 f921 	bl	8008388 <memcpy>
 8008146:	2201      	movs	r2, #1
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff f816 	bl	800717c <__lshift>
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	f103 0901 	add.w	r9, r3, #1
 8008156:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800815a:	4413      	add	r3, r2
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	f00a 0301 	and.w	r3, sl, #1
 8008162:	46b8      	mov	r8, r7
 8008164:	9304      	str	r3, [sp, #16]
 8008166:	4607      	mov	r7, r0
 8008168:	4631      	mov	r1, r6
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f7ff fa75 	bl	800765c <quorem>
 8008172:	4641      	mov	r1, r8
 8008174:	9002      	str	r0, [sp, #8]
 8008176:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800817a:	ee18 0a10 	vmov	r0, s16
 800817e:	f7ff f86d 	bl	800725c <__mcmp>
 8008182:	463a      	mov	r2, r7
 8008184:	9003      	str	r0, [sp, #12]
 8008186:	4631      	mov	r1, r6
 8008188:	4620      	mov	r0, r4
 800818a:	f7ff f883 	bl	8007294 <__mdiff>
 800818e:	68c2      	ldr	r2, [r0, #12]
 8008190:	f109 3bff 	add.w	fp, r9, #4294967295
 8008194:	4605      	mov	r5, r0
 8008196:	bb02      	cbnz	r2, 80081da <_dtoa_r+0xa62>
 8008198:	4601      	mov	r1, r0
 800819a:	ee18 0a10 	vmov	r0, s16
 800819e:	f7ff f85d 	bl	800725c <__mcmp>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4629      	mov	r1, r5
 80081a6:	4620      	mov	r0, r4
 80081a8:	9207      	str	r2, [sp, #28]
 80081aa:	f7fe fe15 	bl	8006dd8 <_Bfree>
 80081ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081b2:	ea43 0102 	orr.w	r1, r3, r2
 80081b6:	9b04      	ldr	r3, [sp, #16]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	464d      	mov	r5, r9
 80081bc:	d10f      	bne.n	80081de <_dtoa_r+0xa66>
 80081be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081c2:	d02a      	beq.n	800821a <_dtoa_r+0xaa2>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	dd02      	ble.n	80081d0 <_dtoa_r+0xa58>
 80081ca:	9b02      	ldr	r3, [sp, #8]
 80081cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081d0:	f88b a000 	strb.w	sl, [fp]
 80081d4:	e775      	b.n	80080c2 <_dtoa_r+0x94a>
 80081d6:	4638      	mov	r0, r7
 80081d8:	e7ba      	b.n	8008150 <_dtoa_r+0x9d8>
 80081da:	2201      	movs	r2, #1
 80081dc:	e7e2      	b.n	80081a4 <_dtoa_r+0xa2c>
 80081de:	9b03      	ldr	r3, [sp, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	db04      	blt.n	80081ee <_dtoa_r+0xa76>
 80081e4:	9906      	ldr	r1, [sp, #24]
 80081e6:	430b      	orrs	r3, r1
 80081e8:	9904      	ldr	r1, [sp, #16]
 80081ea:	430b      	orrs	r3, r1
 80081ec:	d122      	bne.n	8008234 <_dtoa_r+0xabc>
 80081ee:	2a00      	cmp	r2, #0
 80081f0:	ddee      	ble.n	80081d0 <_dtoa_r+0xa58>
 80081f2:	ee18 1a10 	vmov	r1, s16
 80081f6:	2201      	movs	r2, #1
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7fe ffbf 	bl	800717c <__lshift>
 80081fe:	4631      	mov	r1, r6
 8008200:	ee08 0a10 	vmov	s16, r0
 8008204:	f7ff f82a 	bl	800725c <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	dc03      	bgt.n	8008214 <_dtoa_r+0xa9c>
 800820c:	d1e0      	bne.n	80081d0 <_dtoa_r+0xa58>
 800820e:	f01a 0f01 	tst.w	sl, #1
 8008212:	d0dd      	beq.n	80081d0 <_dtoa_r+0xa58>
 8008214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008218:	d1d7      	bne.n	80081ca <_dtoa_r+0xa52>
 800821a:	2339      	movs	r3, #57	; 0x39
 800821c:	f88b 3000 	strb.w	r3, [fp]
 8008220:	462b      	mov	r3, r5
 8008222:	461d      	mov	r5, r3
 8008224:	3b01      	subs	r3, #1
 8008226:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800822a:	2a39      	cmp	r2, #57	; 0x39
 800822c:	d071      	beq.n	8008312 <_dtoa_r+0xb9a>
 800822e:	3201      	adds	r2, #1
 8008230:	701a      	strb	r2, [r3, #0]
 8008232:	e746      	b.n	80080c2 <_dtoa_r+0x94a>
 8008234:	2a00      	cmp	r2, #0
 8008236:	dd07      	ble.n	8008248 <_dtoa_r+0xad0>
 8008238:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800823c:	d0ed      	beq.n	800821a <_dtoa_r+0xaa2>
 800823e:	f10a 0301 	add.w	r3, sl, #1
 8008242:	f88b 3000 	strb.w	r3, [fp]
 8008246:	e73c      	b.n	80080c2 <_dtoa_r+0x94a>
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800824e:	4599      	cmp	r9, r3
 8008250:	d047      	beq.n	80082e2 <_dtoa_r+0xb6a>
 8008252:	ee18 1a10 	vmov	r1, s16
 8008256:	2300      	movs	r3, #0
 8008258:	220a      	movs	r2, #10
 800825a:	4620      	mov	r0, r4
 800825c:	f7fe fdde 	bl	8006e1c <__multadd>
 8008260:	45b8      	cmp	r8, r7
 8008262:	ee08 0a10 	vmov	s16, r0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	f04f 020a 	mov.w	r2, #10
 800826e:	4641      	mov	r1, r8
 8008270:	4620      	mov	r0, r4
 8008272:	d106      	bne.n	8008282 <_dtoa_r+0xb0a>
 8008274:	f7fe fdd2 	bl	8006e1c <__multadd>
 8008278:	4680      	mov	r8, r0
 800827a:	4607      	mov	r7, r0
 800827c:	f109 0901 	add.w	r9, r9, #1
 8008280:	e772      	b.n	8008168 <_dtoa_r+0x9f0>
 8008282:	f7fe fdcb 	bl	8006e1c <__multadd>
 8008286:	4639      	mov	r1, r7
 8008288:	4680      	mov	r8, r0
 800828a:	2300      	movs	r3, #0
 800828c:	220a      	movs	r2, #10
 800828e:	4620      	mov	r0, r4
 8008290:	f7fe fdc4 	bl	8006e1c <__multadd>
 8008294:	4607      	mov	r7, r0
 8008296:	e7f1      	b.n	800827c <_dtoa_r+0xb04>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	9302      	str	r3, [sp, #8]
 800829c:	9d01      	ldr	r5, [sp, #4]
 800829e:	ee18 0a10 	vmov	r0, s16
 80082a2:	4631      	mov	r1, r6
 80082a4:	f7ff f9da 	bl	800765c <quorem>
 80082a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	f805 ab01 	strb.w	sl, [r5], #1
 80082b2:	1aea      	subs	r2, r5, r3
 80082b4:	9b02      	ldr	r3, [sp, #8]
 80082b6:	4293      	cmp	r3, r2
 80082b8:	dd09      	ble.n	80082ce <_dtoa_r+0xb56>
 80082ba:	ee18 1a10 	vmov	r1, s16
 80082be:	2300      	movs	r3, #0
 80082c0:	220a      	movs	r2, #10
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7fe fdaa 	bl	8006e1c <__multadd>
 80082c8:	ee08 0a10 	vmov	s16, r0
 80082cc:	e7e7      	b.n	800829e <_dtoa_r+0xb26>
 80082ce:	9b02      	ldr	r3, [sp, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfc8      	it	gt
 80082d4:	461d      	movgt	r5, r3
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	bfd8      	it	le
 80082da:	2501      	movle	r5, #1
 80082dc:	441d      	add	r5, r3
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	ee18 1a10 	vmov	r1, s16
 80082e6:	2201      	movs	r2, #1
 80082e8:	4620      	mov	r0, r4
 80082ea:	f7fe ff47 	bl	800717c <__lshift>
 80082ee:	4631      	mov	r1, r6
 80082f0:	ee08 0a10 	vmov	s16, r0
 80082f4:	f7fe ffb2 	bl	800725c <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	dc91      	bgt.n	8008220 <_dtoa_r+0xaa8>
 80082fc:	d102      	bne.n	8008304 <_dtoa_r+0xb8c>
 80082fe:	f01a 0f01 	tst.w	sl, #1
 8008302:	d18d      	bne.n	8008220 <_dtoa_r+0xaa8>
 8008304:	462b      	mov	r3, r5
 8008306:	461d      	mov	r5, r3
 8008308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800830c:	2a30      	cmp	r2, #48	; 0x30
 800830e:	d0fa      	beq.n	8008306 <_dtoa_r+0xb8e>
 8008310:	e6d7      	b.n	80080c2 <_dtoa_r+0x94a>
 8008312:	9a01      	ldr	r2, [sp, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d184      	bne.n	8008222 <_dtoa_r+0xaaa>
 8008318:	9b00      	ldr	r3, [sp, #0]
 800831a:	3301      	adds	r3, #1
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2331      	movs	r3, #49	; 0x31
 8008320:	7013      	strb	r3, [r2, #0]
 8008322:	e6ce      	b.n	80080c2 <_dtoa_r+0x94a>
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <_dtoa_r+0xbd4>)
 8008326:	f7ff ba95 	b.w	8007854 <_dtoa_r+0xdc>
 800832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800832c:	2b00      	cmp	r3, #0
 800832e:	f47f aa6e 	bne.w	800780e <_dtoa_r+0x96>
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <_dtoa_r+0xbd8>)
 8008334:	f7ff ba8e 	b.w	8007854 <_dtoa_r+0xdc>
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	dcae      	bgt.n	800829c <_dtoa_r+0xb24>
 800833e:	9b06      	ldr	r3, [sp, #24]
 8008340:	2b02      	cmp	r3, #2
 8008342:	f73f aea8 	bgt.w	8008096 <_dtoa_r+0x91e>
 8008346:	e7a9      	b.n	800829c <_dtoa_r+0xb24>
 8008348:	0800928b 	.word	0x0800928b
 800834c:	080093e5 	.word	0x080093e5
 8008350:	080093d8 	.word	0x080093d8

08008354 <fiprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	b503      	push	{r0, r1, lr}
 8008358:	4601      	mov	r1, r0
 800835a:	ab03      	add	r3, sp, #12
 800835c:	4805      	ldr	r0, [pc, #20]	; (8008374 <fiprintf+0x20>)
 800835e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	f000 f89f 	bl	80084a8 <_vfiprintf_r>
 800836a:	b002      	add	sp, #8
 800836c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008370:	b003      	add	sp, #12
 8008372:	4770      	bx	lr
 8008374:	2000000c 	.word	0x2000000c

08008378 <malloc>:
 8008378:	4b02      	ldr	r3, [pc, #8]	; (8008384 <malloc+0xc>)
 800837a:	4601      	mov	r1, r0
 800837c:	6818      	ldr	r0, [r3, #0]
 800837e:	f7ff b8c3 	b.w	8007508 <_malloc_r>
 8008382:	bf00      	nop
 8008384:	2000000c 	.word	0x2000000c

08008388 <memcpy>:
 8008388:	440a      	add	r2, r1
 800838a:	4291      	cmp	r1, r2
 800838c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008390:	d100      	bne.n	8008394 <memcpy+0xc>
 8008392:	4770      	bx	lr
 8008394:	b510      	push	{r4, lr}
 8008396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800839e:	4291      	cmp	r1, r2
 80083a0:	d1f9      	bne.n	8008396 <memcpy+0xe>
 80083a2:	bd10      	pop	{r4, pc}

080083a4 <__malloc_lock>:
 80083a4:	4801      	ldr	r0, [pc, #4]	; (80083ac <__malloc_lock+0x8>)
 80083a6:	f000 bdc3 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 80083aa:	bf00      	nop
 80083ac:	20000794 	.word	0x20000794

080083b0 <__malloc_unlock>:
 80083b0:	4801      	ldr	r0, [pc, #4]	; (80083b8 <__malloc_unlock+0x8>)
 80083b2:	f000 bdbe 	b.w	8008f32 <__retarget_lock_release_recursive>
 80083b6:	bf00      	nop
 80083b8:	20000794 	.word	0x20000794

080083bc <_free_r>:
 80083bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083be:	2900      	cmp	r1, #0
 80083c0:	d044      	beq.n	800844c <_free_r+0x90>
 80083c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c6:	9001      	str	r0, [sp, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f1a1 0404 	sub.w	r4, r1, #4
 80083ce:	bfb8      	it	lt
 80083d0:	18e4      	addlt	r4, r4, r3
 80083d2:	f7ff ffe7 	bl	80083a4 <__malloc_lock>
 80083d6:	4a1e      	ldr	r2, [pc, #120]	; (8008450 <_free_r+0x94>)
 80083d8:	9801      	ldr	r0, [sp, #4]
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	b933      	cbnz	r3, 80083ec <_free_r+0x30>
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	6014      	str	r4, [r2, #0]
 80083e2:	b003      	add	sp, #12
 80083e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e8:	f7ff bfe2 	b.w	80083b0 <__malloc_unlock>
 80083ec:	42a3      	cmp	r3, r4
 80083ee:	d908      	bls.n	8008402 <_free_r+0x46>
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	1961      	adds	r1, r4, r5
 80083f4:	428b      	cmp	r3, r1
 80083f6:	bf01      	itttt	eq
 80083f8:	6819      	ldreq	r1, [r3, #0]
 80083fa:	685b      	ldreq	r3, [r3, #4]
 80083fc:	1949      	addeq	r1, r1, r5
 80083fe:	6021      	streq	r1, [r4, #0]
 8008400:	e7ed      	b.n	80083de <_free_r+0x22>
 8008402:	461a      	mov	r2, r3
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	b10b      	cbz	r3, 800840c <_free_r+0x50>
 8008408:	42a3      	cmp	r3, r4
 800840a:	d9fa      	bls.n	8008402 <_free_r+0x46>
 800840c:	6811      	ldr	r1, [r2, #0]
 800840e:	1855      	adds	r5, r2, r1
 8008410:	42a5      	cmp	r5, r4
 8008412:	d10b      	bne.n	800842c <_free_r+0x70>
 8008414:	6824      	ldr	r4, [r4, #0]
 8008416:	4421      	add	r1, r4
 8008418:	1854      	adds	r4, r2, r1
 800841a:	42a3      	cmp	r3, r4
 800841c:	6011      	str	r1, [r2, #0]
 800841e:	d1e0      	bne.n	80083e2 <_free_r+0x26>
 8008420:	681c      	ldr	r4, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	6053      	str	r3, [r2, #4]
 8008426:	4421      	add	r1, r4
 8008428:	6011      	str	r1, [r2, #0]
 800842a:	e7da      	b.n	80083e2 <_free_r+0x26>
 800842c:	d902      	bls.n	8008434 <_free_r+0x78>
 800842e:	230c      	movs	r3, #12
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	e7d6      	b.n	80083e2 <_free_r+0x26>
 8008434:	6825      	ldr	r5, [r4, #0]
 8008436:	1961      	adds	r1, r4, r5
 8008438:	428b      	cmp	r3, r1
 800843a:	bf04      	itt	eq
 800843c:	6819      	ldreq	r1, [r3, #0]
 800843e:	685b      	ldreq	r3, [r3, #4]
 8008440:	6063      	str	r3, [r4, #4]
 8008442:	bf04      	itt	eq
 8008444:	1949      	addeq	r1, r1, r5
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	6054      	str	r4, [r2, #4]
 800844a:	e7ca      	b.n	80083e2 <_free_r+0x26>
 800844c:	b003      	add	sp, #12
 800844e:	bd30      	pop	{r4, r5, pc}
 8008450:	20000788 	.word	0x20000788

08008454 <__sfputc_r>:
 8008454:	6893      	ldr	r3, [r2, #8]
 8008456:	3b01      	subs	r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	b410      	push	{r4}
 800845c:	6093      	str	r3, [r2, #8]
 800845e:	da08      	bge.n	8008472 <__sfputc_r+0x1e>
 8008460:	6994      	ldr	r4, [r2, #24]
 8008462:	42a3      	cmp	r3, r4
 8008464:	db01      	blt.n	800846a <__sfputc_r+0x16>
 8008466:	290a      	cmp	r1, #10
 8008468:	d103      	bne.n	8008472 <__sfputc_r+0x1e>
 800846a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800846e:	f000 badf 	b.w	8008a30 <__swbuf_r>
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	1c58      	adds	r0, r3, #1
 8008476:	6010      	str	r0, [r2, #0]
 8008478:	7019      	strb	r1, [r3, #0]
 800847a:	4608      	mov	r0, r1
 800847c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008480:	4770      	bx	lr

08008482 <__sfputs_r>:
 8008482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	4614      	mov	r4, r2
 800848a:	18d5      	adds	r5, r2, r3
 800848c:	42ac      	cmp	r4, r5
 800848e:	d101      	bne.n	8008494 <__sfputs_r+0x12>
 8008490:	2000      	movs	r0, #0
 8008492:	e007      	b.n	80084a4 <__sfputs_r+0x22>
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	463a      	mov	r2, r7
 800849a:	4630      	mov	r0, r6
 800849c:	f7ff ffda 	bl	8008454 <__sfputc_r>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d1f3      	bne.n	800848c <__sfputs_r+0xa>
 80084a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084a8 <_vfiprintf_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	460d      	mov	r5, r1
 80084ae:	b09d      	sub	sp, #116	; 0x74
 80084b0:	4614      	mov	r4, r2
 80084b2:	4698      	mov	r8, r3
 80084b4:	4606      	mov	r6, r0
 80084b6:	b118      	cbz	r0, 80084c0 <_vfiprintf_r+0x18>
 80084b8:	6983      	ldr	r3, [r0, #24]
 80084ba:	b90b      	cbnz	r3, 80084c0 <_vfiprintf_r+0x18>
 80084bc:	f000 fc9a 	bl	8008df4 <__sinit>
 80084c0:	4b89      	ldr	r3, [pc, #548]	; (80086e8 <_vfiprintf_r+0x240>)
 80084c2:	429d      	cmp	r5, r3
 80084c4:	d11b      	bne.n	80084fe <_vfiprintf_r+0x56>
 80084c6:	6875      	ldr	r5, [r6, #4]
 80084c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ca:	07d9      	lsls	r1, r3, #31
 80084cc:	d405      	bmi.n	80084da <_vfiprintf_r+0x32>
 80084ce:	89ab      	ldrh	r3, [r5, #12]
 80084d0:	059a      	lsls	r2, r3, #22
 80084d2:	d402      	bmi.n	80084da <_vfiprintf_r+0x32>
 80084d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084d6:	f000 fd2b 	bl	8008f30 <__retarget_lock_acquire_recursive>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	071b      	lsls	r3, r3, #28
 80084de:	d501      	bpl.n	80084e4 <_vfiprintf_r+0x3c>
 80084e0:	692b      	ldr	r3, [r5, #16]
 80084e2:	b9eb      	cbnz	r3, 8008520 <_vfiprintf_r+0x78>
 80084e4:	4629      	mov	r1, r5
 80084e6:	4630      	mov	r0, r6
 80084e8:	f000 faf4 	bl	8008ad4 <__swsetup_r>
 80084ec:	b1c0      	cbz	r0, 8008520 <_vfiprintf_r+0x78>
 80084ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f0:	07dc      	lsls	r4, r3, #31
 80084f2:	d50e      	bpl.n	8008512 <_vfiprintf_r+0x6a>
 80084f4:	f04f 30ff 	mov.w	r0, #4294967295
 80084f8:	b01d      	add	sp, #116	; 0x74
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	4b7b      	ldr	r3, [pc, #492]	; (80086ec <_vfiprintf_r+0x244>)
 8008500:	429d      	cmp	r5, r3
 8008502:	d101      	bne.n	8008508 <_vfiprintf_r+0x60>
 8008504:	68b5      	ldr	r5, [r6, #8]
 8008506:	e7df      	b.n	80084c8 <_vfiprintf_r+0x20>
 8008508:	4b79      	ldr	r3, [pc, #484]	; (80086f0 <_vfiprintf_r+0x248>)
 800850a:	429d      	cmp	r5, r3
 800850c:	bf08      	it	eq
 800850e:	68f5      	ldreq	r5, [r6, #12]
 8008510:	e7da      	b.n	80084c8 <_vfiprintf_r+0x20>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	0598      	lsls	r0, r3, #22
 8008516:	d4ed      	bmi.n	80084f4 <_vfiprintf_r+0x4c>
 8008518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800851a:	f000 fd0a 	bl	8008f32 <__retarget_lock_release_recursive>
 800851e:	e7e9      	b.n	80084f4 <_vfiprintf_r+0x4c>
 8008520:	2300      	movs	r3, #0
 8008522:	9309      	str	r3, [sp, #36]	; 0x24
 8008524:	2320      	movs	r3, #32
 8008526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800852a:	f8cd 800c 	str.w	r8, [sp, #12]
 800852e:	2330      	movs	r3, #48	; 0x30
 8008530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086f4 <_vfiprintf_r+0x24c>
 8008534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008538:	f04f 0901 	mov.w	r9, #1
 800853c:	4623      	mov	r3, r4
 800853e:	469a      	mov	sl, r3
 8008540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008544:	b10a      	cbz	r2, 800854a <_vfiprintf_r+0xa2>
 8008546:	2a25      	cmp	r2, #37	; 0x25
 8008548:	d1f9      	bne.n	800853e <_vfiprintf_r+0x96>
 800854a:	ebba 0b04 	subs.w	fp, sl, r4
 800854e:	d00b      	beq.n	8008568 <_vfiprintf_r+0xc0>
 8008550:	465b      	mov	r3, fp
 8008552:	4622      	mov	r2, r4
 8008554:	4629      	mov	r1, r5
 8008556:	4630      	mov	r0, r6
 8008558:	f7ff ff93 	bl	8008482 <__sfputs_r>
 800855c:	3001      	adds	r0, #1
 800855e:	f000 80aa 	beq.w	80086b6 <_vfiprintf_r+0x20e>
 8008562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008564:	445a      	add	r2, fp
 8008566:	9209      	str	r2, [sp, #36]	; 0x24
 8008568:	f89a 3000 	ldrb.w	r3, [sl]
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a2 	beq.w	80086b6 <_vfiprintf_r+0x20e>
 8008572:	2300      	movs	r3, #0
 8008574:	f04f 32ff 	mov.w	r2, #4294967295
 8008578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800857c:	f10a 0a01 	add.w	sl, sl, #1
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	9307      	str	r3, [sp, #28]
 8008584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008588:	931a      	str	r3, [sp, #104]	; 0x68
 800858a:	4654      	mov	r4, sl
 800858c:	2205      	movs	r2, #5
 800858e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008592:	4858      	ldr	r0, [pc, #352]	; (80086f4 <_vfiprintf_r+0x24c>)
 8008594:	f7f7 fe44 	bl	8000220 <memchr>
 8008598:	9a04      	ldr	r2, [sp, #16]
 800859a:	b9d8      	cbnz	r0, 80085d4 <_vfiprintf_r+0x12c>
 800859c:	06d1      	lsls	r1, r2, #27
 800859e:	bf44      	itt	mi
 80085a0:	2320      	movmi	r3, #32
 80085a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a6:	0713      	lsls	r3, r2, #28
 80085a8:	bf44      	itt	mi
 80085aa:	232b      	movmi	r3, #43	; 0x2b
 80085ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b0:	f89a 3000 	ldrb.w	r3, [sl]
 80085b4:	2b2a      	cmp	r3, #42	; 0x2a
 80085b6:	d015      	beq.n	80085e4 <_vfiprintf_r+0x13c>
 80085b8:	9a07      	ldr	r2, [sp, #28]
 80085ba:	4654      	mov	r4, sl
 80085bc:	2000      	movs	r0, #0
 80085be:	f04f 0c0a 	mov.w	ip, #10
 80085c2:	4621      	mov	r1, r4
 80085c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c8:	3b30      	subs	r3, #48	; 0x30
 80085ca:	2b09      	cmp	r3, #9
 80085cc:	d94e      	bls.n	800866c <_vfiprintf_r+0x1c4>
 80085ce:	b1b0      	cbz	r0, 80085fe <_vfiprintf_r+0x156>
 80085d0:	9207      	str	r2, [sp, #28]
 80085d2:	e014      	b.n	80085fe <_vfiprintf_r+0x156>
 80085d4:	eba0 0308 	sub.w	r3, r0, r8
 80085d8:	fa09 f303 	lsl.w	r3, r9, r3
 80085dc:	4313      	orrs	r3, r2
 80085de:	9304      	str	r3, [sp, #16]
 80085e0:	46a2      	mov	sl, r4
 80085e2:	e7d2      	b.n	800858a <_vfiprintf_r+0xe2>
 80085e4:	9b03      	ldr	r3, [sp, #12]
 80085e6:	1d19      	adds	r1, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	9103      	str	r1, [sp, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bfbb      	ittet	lt
 80085f0:	425b      	neglt	r3, r3
 80085f2:	f042 0202 	orrlt.w	r2, r2, #2
 80085f6:	9307      	strge	r3, [sp, #28]
 80085f8:	9307      	strlt	r3, [sp, #28]
 80085fa:	bfb8      	it	lt
 80085fc:	9204      	strlt	r2, [sp, #16]
 80085fe:	7823      	ldrb	r3, [r4, #0]
 8008600:	2b2e      	cmp	r3, #46	; 0x2e
 8008602:	d10c      	bne.n	800861e <_vfiprintf_r+0x176>
 8008604:	7863      	ldrb	r3, [r4, #1]
 8008606:	2b2a      	cmp	r3, #42	; 0x2a
 8008608:	d135      	bne.n	8008676 <_vfiprintf_r+0x1ce>
 800860a:	9b03      	ldr	r3, [sp, #12]
 800860c:	1d1a      	adds	r2, r3, #4
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	9203      	str	r2, [sp, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	bfb8      	it	lt
 8008616:	f04f 33ff 	movlt.w	r3, #4294967295
 800861a:	3402      	adds	r4, #2
 800861c:	9305      	str	r3, [sp, #20]
 800861e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008704 <_vfiprintf_r+0x25c>
 8008622:	7821      	ldrb	r1, [r4, #0]
 8008624:	2203      	movs	r2, #3
 8008626:	4650      	mov	r0, sl
 8008628:	f7f7 fdfa 	bl	8000220 <memchr>
 800862c:	b140      	cbz	r0, 8008640 <_vfiprintf_r+0x198>
 800862e:	2340      	movs	r3, #64	; 0x40
 8008630:	eba0 000a 	sub.w	r0, r0, sl
 8008634:	fa03 f000 	lsl.w	r0, r3, r0
 8008638:	9b04      	ldr	r3, [sp, #16]
 800863a:	4303      	orrs	r3, r0
 800863c:	3401      	adds	r4, #1
 800863e:	9304      	str	r3, [sp, #16]
 8008640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008644:	482c      	ldr	r0, [pc, #176]	; (80086f8 <_vfiprintf_r+0x250>)
 8008646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800864a:	2206      	movs	r2, #6
 800864c:	f7f7 fde8 	bl	8000220 <memchr>
 8008650:	2800      	cmp	r0, #0
 8008652:	d03f      	beq.n	80086d4 <_vfiprintf_r+0x22c>
 8008654:	4b29      	ldr	r3, [pc, #164]	; (80086fc <_vfiprintf_r+0x254>)
 8008656:	bb1b      	cbnz	r3, 80086a0 <_vfiprintf_r+0x1f8>
 8008658:	9b03      	ldr	r3, [sp, #12]
 800865a:	3307      	adds	r3, #7
 800865c:	f023 0307 	bic.w	r3, r3, #7
 8008660:	3308      	adds	r3, #8
 8008662:	9303      	str	r3, [sp, #12]
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	443b      	add	r3, r7
 8008668:	9309      	str	r3, [sp, #36]	; 0x24
 800866a:	e767      	b.n	800853c <_vfiprintf_r+0x94>
 800866c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008670:	460c      	mov	r4, r1
 8008672:	2001      	movs	r0, #1
 8008674:	e7a5      	b.n	80085c2 <_vfiprintf_r+0x11a>
 8008676:	2300      	movs	r3, #0
 8008678:	3401      	adds	r4, #1
 800867a:	9305      	str	r3, [sp, #20]
 800867c:	4619      	mov	r1, r3
 800867e:	f04f 0c0a 	mov.w	ip, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008688:	3a30      	subs	r2, #48	; 0x30
 800868a:	2a09      	cmp	r2, #9
 800868c:	d903      	bls.n	8008696 <_vfiprintf_r+0x1ee>
 800868e:	2b00      	cmp	r3, #0
 8008690:	d0c5      	beq.n	800861e <_vfiprintf_r+0x176>
 8008692:	9105      	str	r1, [sp, #20]
 8008694:	e7c3      	b.n	800861e <_vfiprintf_r+0x176>
 8008696:	fb0c 2101 	mla	r1, ip, r1, r2
 800869a:	4604      	mov	r4, r0
 800869c:	2301      	movs	r3, #1
 800869e:	e7f0      	b.n	8008682 <_vfiprintf_r+0x1da>
 80086a0:	ab03      	add	r3, sp, #12
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	462a      	mov	r2, r5
 80086a6:	4b16      	ldr	r3, [pc, #88]	; (8008700 <_vfiprintf_r+0x258>)
 80086a8:	a904      	add	r1, sp, #16
 80086aa:	4630      	mov	r0, r6
 80086ac:	f3af 8000 	nop.w
 80086b0:	4607      	mov	r7, r0
 80086b2:	1c78      	adds	r0, r7, #1
 80086b4:	d1d6      	bne.n	8008664 <_vfiprintf_r+0x1bc>
 80086b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086b8:	07d9      	lsls	r1, r3, #31
 80086ba:	d405      	bmi.n	80086c8 <_vfiprintf_r+0x220>
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	059a      	lsls	r2, r3, #22
 80086c0:	d402      	bmi.n	80086c8 <_vfiprintf_r+0x220>
 80086c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086c4:	f000 fc35 	bl	8008f32 <__retarget_lock_release_recursive>
 80086c8:	89ab      	ldrh	r3, [r5, #12]
 80086ca:	065b      	lsls	r3, r3, #25
 80086cc:	f53f af12 	bmi.w	80084f4 <_vfiprintf_r+0x4c>
 80086d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d2:	e711      	b.n	80084f8 <_vfiprintf_r+0x50>
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	462a      	mov	r2, r5
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <_vfiprintf_r+0x258>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4630      	mov	r0, r6
 80086e0:	f000 f880 	bl	80087e4 <_printf_i>
 80086e4:	e7e4      	b.n	80086b0 <_vfiprintf_r+0x208>
 80086e6:	bf00      	nop
 80086e8:	08009498 	.word	0x08009498
 80086ec:	080094b8 	.word	0x080094b8
 80086f0:	08009478 	.word	0x08009478
 80086f4:	08009442 	.word	0x08009442
 80086f8:	0800944c 	.word	0x0800944c
 80086fc:	00000000 	.word	0x00000000
 8008700:	08008483 	.word	0x08008483
 8008704:	08009448 	.word	0x08009448

08008708 <_printf_common>:
 8008708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870c:	4616      	mov	r6, r2
 800870e:	4699      	mov	r9, r3
 8008710:	688a      	ldr	r2, [r1, #8]
 8008712:	690b      	ldr	r3, [r1, #16]
 8008714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008718:	4293      	cmp	r3, r2
 800871a:	bfb8      	it	lt
 800871c:	4613      	movlt	r3, r2
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008724:	4607      	mov	r7, r0
 8008726:	460c      	mov	r4, r1
 8008728:	b10a      	cbz	r2, 800872e <_printf_common+0x26>
 800872a:	3301      	adds	r3, #1
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	0699      	lsls	r1, r3, #26
 8008732:	bf42      	ittt	mi
 8008734:	6833      	ldrmi	r3, [r6, #0]
 8008736:	3302      	addmi	r3, #2
 8008738:	6033      	strmi	r3, [r6, #0]
 800873a:	6825      	ldr	r5, [r4, #0]
 800873c:	f015 0506 	ands.w	r5, r5, #6
 8008740:	d106      	bne.n	8008750 <_printf_common+0x48>
 8008742:	f104 0a19 	add.w	sl, r4, #25
 8008746:	68e3      	ldr	r3, [r4, #12]
 8008748:	6832      	ldr	r2, [r6, #0]
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	42ab      	cmp	r3, r5
 800874e:	dc26      	bgt.n	800879e <_printf_common+0x96>
 8008750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008754:	1e13      	subs	r3, r2, #0
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	bf18      	it	ne
 800875a:	2301      	movne	r3, #1
 800875c:	0692      	lsls	r2, r2, #26
 800875e:	d42b      	bmi.n	80087b8 <_printf_common+0xb0>
 8008760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d01e      	beq.n	80087ac <_printf_common+0xa4>
 800876e:	6823      	ldr	r3, [r4, #0]
 8008770:	68e5      	ldr	r5, [r4, #12]
 8008772:	6832      	ldr	r2, [r6, #0]
 8008774:	f003 0306 	and.w	r3, r3, #6
 8008778:	2b04      	cmp	r3, #4
 800877a:	bf08      	it	eq
 800877c:	1aad      	subeq	r5, r5, r2
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	6922      	ldr	r2, [r4, #16]
 8008782:	bf0c      	ite	eq
 8008784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008788:	2500      	movne	r5, #0
 800878a:	4293      	cmp	r3, r2
 800878c:	bfc4      	itt	gt
 800878e:	1a9b      	subgt	r3, r3, r2
 8008790:	18ed      	addgt	r5, r5, r3
 8008792:	2600      	movs	r6, #0
 8008794:	341a      	adds	r4, #26
 8008796:	42b5      	cmp	r5, r6
 8008798:	d11a      	bne.n	80087d0 <_printf_common+0xc8>
 800879a:	2000      	movs	r0, #0
 800879c:	e008      	b.n	80087b0 <_printf_common+0xa8>
 800879e:	2301      	movs	r3, #1
 80087a0:	4652      	mov	r2, sl
 80087a2:	4649      	mov	r1, r9
 80087a4:	4638      	mov	r0, r7
 80087a6:	47c0      	blx	r8
 80087a8:	3001      	adds	r0, #1
 80087aa:	d103      	bne.n	80087b4 <_printf_common+0xac>
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	3501      	adds	r5, #1
 80087b6:	e7c6      	b.n	8008746 <_printf_common+0x3e>
 80087b8:	18e1      	adds	r1, r4, r3
 80087ba:	1c5a      	adds	r2, r3, #1
 80087bc:	2030      	movs	r0, #48	; 0x30
 80087be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087c2:	4422      	add	r2, r4
 80087c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087cc:	3302      	adds	r3, #2
 80087ce:	e7c7      	b.n	8008760 <_printf_common+0x58>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4622      	mov	r2, r4
 80087d4:	4649      	mov	r1, r9
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c0      	blx	r8
 80087da:	3001      	adds	r0, #1
 80087dc:	d0e6      	beq.n	80087ac <_printf_common+0xa4>
 80087de:	3601      	adds	r6, #1
 80087e0:	e7d9      	b.n	8008796 <_printf_common+0x8e>
	...

080087e4 <_printf_i>:
 80087e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	7e0f      	ldrb	r7, [r1, #24]
 80087ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087ec:	2f78      	cmp	r7, #120	; 0x78
 80087ee:	4691      	mov	r9, r2
 80087f0:	4680      	mov	r8, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	469a      	mov	sl, r3
 80087f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087fa:	d807      	bhi.n	800880c <_printf_i+0x28>
 80087fc:	2f62      	cmp	r7, #98	; 0x62
 80087fe:	d80a      	bhi.n	8008816 <_printf_i+0x32>
 8008800:	2f00      	cmp	r7, #0
 8008802:	f000 80d8 	beq.w	80089b6 <_printf_i+0x1d2>
 8008806:	2f58      	cmp	r7, #88	; 0x58
 8008808:	f000 80a3 	beq.w	8008952 <_printf_i+0x16e>
 800880c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008814:	e03a      	b.n	800888c <_printf_i+0xa8>
 8008816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800881a:	2b15      	cmp	r3, #21
 800881c:	d8f6      	bhi.n	800880c <_printf_i+0x28>
 800881e:	a101      	add	r1, pc, #4	; (adr r1, 8008824 <_printf_i+0x40>)
 8008820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008824:	0800887d 	.word	0x0800887d
 8008828:	08008891 	.word	0x08008891
 800882c:	0800880d 	.word	0x0800880d
 8008830:	0800880d 	.word	0x0800880d
 8008834:	0800880d 	.word	0x0800880d
 8008838:	0800880d 	.word	0x0800880d
 800883c:	08008891 	.word	0x08008891
 8008840:	0800880d 	.word	0x0800880d
 8008844:	0800880d 	.word	0x0800880d
 8008848:	0800880d 	.word	0x0800880d
 800884c:	0800880d 	.word	0x0800880d
 8008850:	0800899d 	.word	0x0800899d
 8008854:	080088c1 	.word	0x080088c1
 8008858:	0800897f 	.word	0x0800897f
 800885c:	0800880d 	.word	0x0800880d
 8008860:	0800880d 	.word	0x0800880d
 8008864:	080089bf 	.word	0x080089bf
 8008868:	0800880d 	.word	0x0800880d
 800886c:	080088c1 	.word	0x080088c1
 8008870:	0800880d 	.word	0x0800880d
 8008874:	0800880d 	.word	0x0800880d
 8008878:	08008987 	.word	0x08008987
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	1d1a      	adds	r2, r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800888c:	2301      	movs	r3, #1
 800888e:	e0a3      	b.n	80089d8 <_printf_i+0x1f4>
 8008890:	6820      	ldr	r0, [r4, #0]
 8008892:	6829      	ldr	r1, [r5, #0]
 8008894:	0606      	lsls	r6, r0, #24
 8008896:	f101 0304 	add.w	r3, r1, #4
 800889a:	d50a      	bpl.n	80088b2 <_printf_i+0xce>
 800889c:	680e      	ldr	r6, [r1, #0]
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	2e00      	cmp	r6, #0
 80088a2:	da03      	bge.n	80088ac <_printf_i+0xc8>
 80088a4:	232d      	movs	r3, #45	; 0x2d
 80088a6:	4276      	negs	r6, r6
 80088a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ac:	485e      	ldr	r0, [pc, #376]	; (8008a28 <_printf_i+0x244>)
 80088ae:	230a      	movs	r3, #10
 80088b0:	e019      	b.n	80088e6 <_printf_i+0x102>
 80088b2:	680e      	ldr	r6, [r1, #0]
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088ba:	bf18      	it	ne
 80088bc:	b236      	sxthne	r6, r6
 80088be:	e7ef      	b.n	80088a0 <_printf_i+0xbc>
 80088c0:	682b      	ldr	r3, [r5, #0]
 80088c2:	6820      	ldr	r0, [r4, #0]
 80088c4:	1d19      	adds	r1, r3, #4
 80088c6:	6029      	str	r1, [r5, #0]
 80088c8:	0601      	lsls	r1, r0, #24
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0xec>
 80088cc:	681e      	ldr	r6, [r3, #0]
 80088ce:	e002      	b.n	80088d6 <_printf_i+0xf2>
 80088d0:	0646      	lsls	r6, r0, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0xe8>
 80088d4:	881e      	ldrh	r6, [r3, #0]
 80088d6:	4854      	ldr	r0, [pc, #336]	; (8008a28 <_printf_i+0x244>)
 80088d8:	2f6f      	cmp	r7, #111	; 0x6f
 80088da:	bf0c      	ite	eq
 80088dc:	2308      	moveq	r3, #8
 80088de:	230a      	movne	r3, #10
 80088e0:	2100      	movs	r1, #0
 80088e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088e6:	6865      	ldr	r5, [r4, #4]
 80088e8:	60a5      	str	r5, [r4, #8]
 80088ea:	2d00      	cmp	r5, #0
 80088ec:	bfa2      	ittt	ge
 80088ee:	6821      	ldrge	r1, [r4, #0]
 80088f0:	f021 0104 	bicge.w	r1, r1, #4
 80088f4:	6021      	strge	r1, [r4, #0]
 80088f6:	b90e      	cbnz	r6, 80088fc <_printf_i+0x118>
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	d04d      	beq.n	8008998 <_printf_i+0x1b4>
 80088fc:	4615      	mov	r5, r2
 80088fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8008902:	fb03 6711 	mls	r7, r3, r1, r6
 8008906:	5dc7      	ldrb	r7, [r0, r7]
 8008908:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800890c:	4637      	mov	r7, r6
 800890e:	42bb      	cmp	r3, r7
 8008910:	460e      	mov	r6, r1
 8008912:	d9f4      	bls.n	80088fe <_printf_i+0x11a>
 8008914:	2b08      	cmp	r3, #8
 8008916:	d10b      	bne.n	8008930 <_printf_i+0x14c>
 8008918:	6823      	ldr	r3, [r4, #0]
 800891a:	07de      	lsls	r6, r3, #31
 800891c:	d508      	bpl.n	8008930 <_printf_i+0x14c>
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	6861      	ldr	r1, [r4, #4]
 8008922:	4299      	cmp	r1, r3
 8008924:	bfde      	ittt	le
 8008926:	2330      	movle	r3, #48	; 0x30
 8008928:	f805 3c01 	strble.w	r3, [r5, #-1]
 800892c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008930:	1b52      	subs	r2, r2, r5
 8008932:	6122      	str	r2, [r4, #16]
 8008934:	f8cd a000 	str.w	sl, [sp]
 8008938:	464b      	mov	r3, r9
 800893a:	aa03      	add	r2, sp, #12
 800893c:	4621      	mov	r1, r4
 800893e:	4640      	mov	r0, r8
 8008940:	f7ff fee2 	bl	8008708 <_printf_common>
 8008944:	3001      	adds	r0, #1
 8008946:	d14c      	bne.n	80089e2 <_printf_i+0x1fe>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	b004      	add	sp, #16
 800894e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008952:	4835      	ldr	r0, [pc, #212]	; (8008a28 <_printf_i+0x244>)
 8008954:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008958:	6829      	ldr	r1, [r5, #0]
 800895a:	6823      	ldr	r3, [r4, #0]
 800895c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008960:	6029      	str	r1, [r5, #0]
 8008962:	061d      	lsls	r5, r3, #24
 8008964:	d514      	bpl.n	8008990 <_printf_i+0x1ac>
 8008966:	07df      	lsls	r7, r3, #31
 8008968:	bf44      	itt	mi
 800896a:	f043 0320 	orrmi.w	r3, r3, #32
 800896e:	6023      	strmi	r3, [r4, #0]
 8008970:	b91e      	cbnz	r6, 800897a <_printf_i+0x196>
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	f023 0320 	bic.w	r3, r3, #32
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	2310      	movs	r3, #16
 800897c:	e7b0      	b.n	80088e0 <_printf_i+0xfc>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	f043 0320 	orr.w	r3, r3, #32
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	2378      	movs	r3, #120	; 0x78
 8008988:	4828      	ldr	r0, [pc, #160]	; (8008a2c <_printf_i+0x248>)
 800898a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800898e:	e7e3      	b.n	8008958 <_printf_i+0x174>
 8008990:	0659      	lsls	r1, r3, #25
 8008992:	bf48      	it	mi
 8008994:	b2b6      	uxthmi	r6, r6
 8008996:	e7e6      	b.n	8008966 <_printf_i+0x182>
 8008998:	4615      	mov	r5, r2
 800899a:	e7bb      	b.n	8008914 <_printf_i+0x130>
 800899c:	682b      	ldr	r3, [r5, #0]
 800899e:	6826      	ldr	r6, [r4, #0]
 80089a0:	6961      	ldr	r1, [r4, #20]
 80089a2:	1d18      	adds	r0, r3, #4
 80089a4:	6028      	str	r0, [r5, #0]
 80089a6:	0635      	lsls	r5, r6, #24
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	d501      	bpl.n	80089b0 <_printf_i+0x1cc>
 80089ac:	6019      	str	r1, [r3, #0]
 80089ae:	e002      	b.n	80089b6 <_printf_i+0x1d2>
 80089b0:	0670      	lsls	r0, r6, #25
 80089b2:	d5fb      	bpl.n	80089ac <_printf_i+0x1c8>
 80089b4:	8019      	strh	r1, [r3, #0]
 80089b6:	2300      	movs	r3, #0
 80089b8:	6123      	str	r3, [r4, #16]
 80089ba:	4615      	mov	r5, r2
 80089bc:	e7ba      	b.n	8008934 <_printf_i+0x150>
 80089be:	682b      	ldr	r3, [r5, #0]
 80089c0:	1d1a      	adds	r2, r3, #4
 80089c2:	602a      	str	r2, [r5, #0]
 80089c4:	681d      	ldr	r5, [r3, #0]
 80089c6:	6862      	ldr	r2, [r4, #4]
 80089c8:	2100      	movs	r1, #0
 80089ca:	4628      	mov	r0, r5
 80089cc:	f7f7 fc28 	bl	8000220 <memchr>
 80089d0:	b108      	cbz	r0, 80089d6 <_printf_i+0x1f2>
 80089d2:	1b40      	subs	r0, r0, r5
 80089d4:	6060      	str	r0, [r4, #4]
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	6123      	str	r3, [r4, #16]
 80089da:	2300      	movs	r3, #0
 80089dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e0:	e7a8      	b.n	8008934 <_printf_i+0x150>
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	462a      	mov	r2, r5
 80089e6:	4649      	mov	r1, r9
 80089e8:	4640      	mov	r0, r8
 80089ea:	47d0      	blx	sl
 80089ec:	3001      	adds	r0, #1
 80089ee:	d0ab      	beq.n	8008948 <_printf_i+0x164>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	079b      	lsls	r3, r3, #30
 80089f4:	d413      	bmi.n	8008a1e <_printf_i+0x23a>
 80089f6:	68e0      	ldr	r0, [r4, #12]
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	4298      	cmp	r0, r3
 80089fc:	bfb8      	it	lt
 80089fe:	4618      	movlt	r0, r3
 8008a00:	e7a4      	b.n	800894c <_printf_i+0x168>
 8008a02:	2301      	movs	r3, #1
 8008a04:	4632      	mov	r2, r6
 8008a06:	4649      	mov	r1, r9
 8008a08:	4640      	mov	r0, r8
 8008a0a:	47d0      	blx	sl
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d09b      	beq.n	8008948 <_printf_i+0x164>
 8008a10:	3501      	adds	r5, #1
 8008a12:	68e3      	ldr	r3, [r4, #12]
 8008a14:	9903      	ldr	r1, [sp, #12]
 8008a16:	1a5b      	subs	r3, r3, r1
 8008a18:	42ab      	cmp	r3, r5
 8008a1a:	dcf2      	bgt.n	8008a02 <_printf_i+0x21e>
 8008a1c:	e7eb      	b.n	80089f6 <_printf_i+0x212>
 8008a1e:	2500      	movs	r5, #0
 8008a20:	f104 0619 	add.w	r6, r4, #25
 8008a24:	e7f5      	b.n	8008a12 <_printf_i+0x22e>
 8008a26:	bf00      	nop
 8008a28:	08009453 	.word	0x08009453
 8008a2c:	08009464 	.word	0x08009464

08008a30 <__swbuf_r>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	460e      	mov	r6, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	4605      	mov	r5, r0
 8008a38:	b118      	cbz	r0, 8008a42 <__swbuf_r+0x12>
 8008a3a:	6983      	ldr	r3, [r0, #24]
 8008a3c:	b90b      	cbnz	r3, 8008a42 <__swbuf_r+0x12>
 8008a3e:	f000 f9d9 	bl	8008df4 <__sinit>
 8008a42:	4b21      	ldr	r3, [pc, #132]	; (8008ac8 <__swbuf_r+0x98>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d12b      	bne.n	8008aa0 <__swbuf_r+0x70>
 8008a48:	686c      	ldr	r4, [r5, #4]
 8008a4a:	69a3      	ldr	r3, [r4, #24]
 8008a4c:	60a3      	str	r3, [r4, #8]
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	071a      	lsls	r2, r3, #28
 8008a52:	d52f      	bpl.n	8008ab4 <__swbuf_r+0x84>
 8008a54:	6923      	ldr	r3, [r4, #16]
 8008a56:	b36b      	cbz	r3, 8008ab4 <__swbuf_r+0x84>
 8008a58:	6923      	ldr	r3, [r4, #16]
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1ac0      	subs	r0, r0, r3
 8008a5e:	6963      	ldr	r3, [r4, #20]
 8008a60:	b2f6      	uxtb	r6, r6
 8008a62:	4283      	cmp	r3, r0
 8008a64:	4637      	mov	r7, r6
 8008a66:	dc04      	bgt.n	8008a72 <__swbuf_r+0x42>
 8008a68:	4621      	mov	r1, r4
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f000 f92e 	bl	8008ccc <_fflush_r>
 8008a70:	bb30      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	3b01      	subs	r3, #1
 8008a76:	60a3      	str	r3, [r4, #8]
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	1c5a      	adds	r2, r3, #1
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	701e      	strb	r6, [r3, #0]
 8008a80:	6963      	ldr	r3, [r4, #20]
 8008a82:	3001      	adds	r0, #1
 8008a84:	4283      	cmp	r3, r0
 8008a86:	d004      	beq.n	8008a92 <__swbuf_r+0x62>
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	07db      	lsls	r3, r3, #31
 8008a8c:	d506      	bpl.n	8008a9c <__swbuf_r+0x6c>
 8008a8e:	2e0a      	cmp	r6, #10
 8008a90:	d104      	bne.n	8008a9c <__swbuf_r+0x6c>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f000 f919 	bl	8008ccc <_fflush_r>
 8008a9a:	b988      	cbnz	r0, 8008ac0 <__swbuf_r+0x90>
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <__swbuf_r+0x9c>)
 8008aa2:	429c      	cmp	r4, r3
 8008aa4:	d101      	bne.n	8008aaa <__swbuf_r+0x7a>
 8008aa6:	68ac      	ldr	r4, [r5, #8]
 8008aa8:	e7cf      	b.n	8008a4a <__swbuf_r+0x1a>
 8008aaa:	4b09      	ldr	r3, [pc, #36]	; (8008ad0 <__swbuf_r+0xa0>)
 8008aac:	429c      	cmp	r4, r3
 8008aae:	bf08      	it	eq
 8008ab0:	68ec      	ldreq	r4, [r5, #12]
 8008ab2:	e7ca      	b.n	8008a4a <__swbuf_r+0x1a>
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	f000 f80c 	bl	8008ad4 <__swsetup_r>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0cb      	beq.n	8008a58 <__swbuf_r+0x28>
 8008ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ac4:	e7ea      	b.n	8008a9c <__swbuf_r+0x6c>
 8008ac6:	bf00      	nop
 8008ac8:	08009498 	.word	0x08009498
 8008acc:	080094b8 	.word	0x080094b8
 8008ad0:	08009478 	.word	0x08009478

08008ad4 <__swsetup_r>:
 8008ad4:	4b32      	ldr	r3, [pc, #200]	; (8008ba0 <__swsetup_r+0xcc>)
 8008ad6:	b570      	push	{r4, r5, r6, lr}
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	4606      	mov	r6, r0
 8008adc:	460c      	mov	r4, r1
 8008ade:	b125      	cbz	r5, 8008aea <__swsetup_r+0x16>
 8008ae0:	69ab      	ldr	r3, [r5, #24]
 8008ae2:	b913      	cbnz	r3, 8008aea <__swsetup_r+0x16>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 f985 	bl	8008df4 <__sinit>
 8008aea:	4b2e      	ldr	r3, [pc, #184]	; (8008ba4 <__swsetup_r+0xd0>)
 8008aec:	429c      	cmp	r4, r3
 8008aee:	d10f      	bne.n	8008b10 <__swsetup_r+0x3c>
 8008af0:	686c      	ldr	r4, [r5, #4]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008af8:	0719      	lsls	r1, r3, #28
 8008afa:	d42c      	bmi.n	8008b56 <__swsetup_r+0x82>
 8008afc:	06dd      	lsls	r5, r3, #27
 8008afe:	d411      	bmi.n	8008b24 <__swsetup_r+0x50>
 8008b00:	2309      	movs	r3, #9
 8008b02:	6033      	str	r3, [r6, #0]
 8008b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b08:	81a3      	strh	r3, [r4, #12]
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0e:	e03e      	b.n	8008b8e <__swsetup_r+0xba>
 8008b10:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <__swsetup_r+0xd4>)
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d101      	bne.n	8008b1a <__swsetup_r+0x46>
 8008b16:	68ac      	ldr	r4, [r5, #8]
 8008b18:	e7eb      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <__swsetup_r+0xd8>)
 8008b1c:	429c      	cmp	r4, r3
 8008b1e:	bf08      	it	eq
 8008b20:	68ec      	ldreq	r4, [r5, #12]
 8008b22:	e7e6      	b.n	8008af2 <__swsetup_r+0x1e>
 8008b24:	0758      	lsls	r0, r3, #29
 8008b26:	d512      	bpl.n	8008b4e <__swsetup_r+0x7a>
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	b141      	cbz	r1, 8008b3e <__swsetup_r+0x6a>
 8008b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d002      	beq.n	8008b3a <__swsetup_r+0x66>
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7ff fc41 	bl	80083bc <_free_r>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b44:	81a3      	strh	r3, [r4, #12]
 8008b46:	2300      	movs	r3, #0
 8008b48:	6063      	str	r3, [r4, #4]
 8008b4a:	6923      	ldr	r3, [r4, #16]
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	81a3      	strh	r3, [r4, #12]
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	b94b      	cbnz	r3, 8008b6e <__swsetup_r+0x9a>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b64:	d003      	beq.n	8008b6e <__swsetup_r+0x9a>
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f000 fa09 	bl	8008f80 <__smakebuf_r>
 8008b6e:	89a0      	ldrh	r0, [r4, #12]
 8008b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b74:	f010 0301 	ands.w	r3, r0, #1
 8008b78:	d00a      	beq.n	8008b90 <__swsetup_r+0xbc>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60a3      	str	r3, [r4, #8]
 8008b7e:	6963      	ldr	r3, [r4, #20]
 8008b80:	425b      	negs	r3, r3
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	b943      	cbnz	r3, 8008b9a <__swsetup_r+0xc6>
 8008b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b8c:	d1ba      	bne.n	8008b04 <__swsetup_r+0x30>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0781      	lsls	r1, r0, #30
 8008b92:	bf58      	it	pl
 8008b94:	6963      	ldrpl	r3, [r4, #20]
 8008b96:	60a3      	str	r3, [r4, #8]
 8008b98:	e7f4      	b.n	8008b84 <__swsetup_r+0xb0>
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	e7f7      	b.n	8008b8e <__swsetup_r+0xba>
 8008b9e:	bf00      	nop
 8008ba0:	2000000c 	.word	0x2000000c
 8008ba4:	08009498 	.word	0x08009498
 8008ba8:	080094b8 	.word	0x080094b8
 8008bac:	08009478 	.word	0x08009478

08008bb0 <abort>:
 8008bb0:	b508      	push	{r3, lr}
 8008bb2:	2006      	movs	r0, #6
 8008bb4:	f000 fa4c 	bl	8009050 <raise>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7f8 ff2b 	bl	8001a14 <_exit>
	...

08008bc0 <__sflush_r>:
 8008bc0:	898a      	ldrh	r2, [r1, #12]
 8008bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	0710      	lsls	r0, r2, #28
 8008bca:	460c      	mov	r4, r1
 8008bcc:	d458      	bmi.n	8008c80 <__sflush_r+0xc0>
 8008bce:	684b      	ldr	r3, [r1, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	dc05      	bgt.n	8008be0 <__sflush_r+0x20>
 8008bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc02      	bgt.n	8008be0 <__sflush_r+0x20>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008be2:	2e00      	cmp	r6, #0
 8008be4:	d0f9      	beq.n	8008bda <__sflush_r+0x1a>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bec:	682f      	ldr	r7, [r5, #0]
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	d032      	beq.n	8008c58 <__sflush_r+0x98>
 8008bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	075a      	lsls	r2, r3, #29
 8008bf8:	d505      	bpl.n	8008c06 <__sflush_r+0x46>
 8008bfa:	6863      	ldr	r3, [r4, #4]
 8008bfc:	1ac0      	subs	r0, r0, r3
 8008bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c00:	b10b      	cbz	r3, 8008c06 <__sflush_r+0x46>
 8008c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c04:	1ac0      	subs	r0, r0, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c0c:	6a21      	ldr	r1, [r4, #32]
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b0      	blx	r6
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	d106      	bne.n	8008c26 <__sflush_r+0x66>
 8008c18:	6829      	ldr	r1, [r5, #0]
 8008c1a:	291d      	cmp	r1, #29
 8008c1c:	d82c      	bhi.n	8008c78 <__sflush_r+0xb8>
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <__sflush_r+0x108>)
 8008c20:	40ca      	lsrs	r2, r1
 8008c22:	07d6      	lsls	r6, r2, #31
 8008c24:	d528      	bpl.n	8008c78 <__sflush_r+0xb8>
 8008c26:	2200      	movs	r2, #0
 8008c28:	6062      	str	r2, [r4, #4]
 8008c2a:	04d9      	lsls	r1, r3, #19
 8008c2c:	6922      	ldr	r2, [r4, #16]
 8008c2e:	6022      	str	r2, [r4, #0]
 8008c30:	d504      	bpl.n	8008c3c <__sflush_r+0x7c>
 8008c32:	1c42      	adds	r2, r0, #1
 8008c34:	d101      	bne.n	8008c3a <__sflush_r+0x7a>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	b903      	cbnz	r3, 8008c3c <__sflush_r+0x7c>
 8008c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c3e:	602f      	str	r7, [r5, #0]
 8008c40:	2900      	cmp	r1, #0
 8008c42:	d0ca      	beq.n	8008bda <__sflush_r+0x1a>
 8008c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c48:	4299      	cmp	r1, r3
 8008c4a:	d002      	beq.n	8008c52 <__sflush_r+0x92>
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7ff fbb5 	bl	80083bc <_free_r>
 8008c52:	2000      	movs	r0, #0
 8008c54:	6360      	str	r0, [r4, #52]	; 0x34
 8008c56:	e7c1      	b.n	8008bdc <__sflush_r+0x1c>
 8008c58:	6a21      	ldr	r1, [r4, #32]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b0      	blx	r6
 8008c60:	1c41      	adds	r1, r0, #1
 8008c62:	d1c7      	bne.n	8008bf4 <__sflush_r+0x34>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0c4      	beq.n	8008bf4 <__sflush_r+0x34>
 8008c6a:	2b1d      	cmp	r3, #29
 8008c6c:	d001      	beq.n	8008c72 <__sflush_r+0xb2>
 8008c6e:	2b16      	cmp	r3, #22
 8008c70:	d101      	bne.n	8008c76 <__sflush_r+0xb6>
 8008c72:	602f      	str	r7, [r5, #0]
 8008c74:	e7b1      	b.n	8008bda <__sflush_r+0x1a>
 8008c76:	89a3      	ldrh	r3, [r4, #12]
 8008c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7c:	81a3      	strh	r3, [r4, #12]
 8008c7e:	e7ad      	b.n	8008bdc <__sflush_r+0x1c>
 8008c80:	690f      	ldr	r7, [r1, #16]
 8008c82:	2f00      	cmp	r7, #0
 8008c84:	d0a9      	beq.n	8008bda <__sflush_r+0x1a>
 8008c86:	0793      	lsls	r3, r2, #30
 8008c88:	680e      	ldr	r6, [r1, #0]
 8008c8a:	bf08      	it	eq
 8008c8c:	694b      	ldreq	r3, [r1, #20]
 8008c8e:	600f      	str	r7, [r1, #0]
 8008c90:	bf18      	it	ne
 8008c92:	2300      	movne	r3, #0
 8008c94:	eba6 0807 	sub.w	r8, r6, r7
 8008c98:	608b      	str	r3, [r1, #8]
 8008c9a:	f1b8 0f00 	cmp.w	r8, #0
 8008c9e:	dd9c      	ble.n	8008bda <__sflush_r+0x1a>
 8008ca0:	6a21      	ldr	r1, [r4, #32]
 8008ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	463a      	mov	r2, r7
 8008ca8:	4628      	mov	r0, r5
 8008caa:	47b0      	blx	r6
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dc06      	bgt.n	8008cbe <__sflush_r+0xfe>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e78e      	b.n	8008bdc <__sflush_r+0x1c>
 8008cbe:	4407      	add	r7, r0
 8008cc0:	eba8 0800 	sub.w	r8, r8, r0
 8008cc4:	e7e9      	b.n	8008c9a <__sflush_r+0xda>
 8008cc6:	bf00      	nop
 8008cc8:	20400001 	.word	0x20400001

08008ccc <_fflush_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	690b      	ldr	r3, [r1, #16]
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	b913      	cbnz	r3, 8008cdc <_fflush_r+0x10>
 8008cd6:	2500      	movs	r5, #0
 8008cd8:	4628      	mov	r0, r5
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	b118      	cbz	r0, 8008ce6 <_fflush_r+0x1a>
 8008cde:	6983      	ldr	r3, [r0, #24]
 8008ce0:	b90b      	cbnz	r3, 8008ce6 <_fflush_r+0x1a>
 8008ce2:	f000 f887 	bl	8008df4 <__sinit>
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <_fflush_r+0x6c>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d11b      	bne.n	8008d24 <_fflush_r+0x58>
 8008cec:	686c      	ldr	r4, [r5, #4]
 8008cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0ef      	beq.n	8008cd6 <_fflush_r+0xa>
 8008cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d404      	bmi.n	8008d06 <_fflush_r+0x3a>
 8008cfc:	0599      	lsls	r1, r3, #22
 8008cfe:	d402      	bmi.n	8008d06 <_fflush_r+0x3a>
 8008d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d02:	f000 f915 	bl	8008f30 <__retarget_lock_acquire_recursive>
 8008d06:	4628      	mov	r0, r5
 8008d08:	4621      	mov	r1, r4
 8008d0a:	f7ff ff59 	bl	8008bc0 <__sflush_r>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d10:	07da      	lsls	r2, r3, #31
 8008d12:	4605      	mov	r5, r0
 8008d14:	d4e0      	bmi.n	8008cd8 <_fflush_r+0xc>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	059b      	lsls	r3, r3, #22
 8008d1a:	d4dd      	bmi.n	8008cd8 <_fflush_r+0xc>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1e:	f000 f908 	bl	8008f32 <__retarget_lock_release_recursive>
 8008d22:	e7d9      	b.n	8008cd8 <_fflush_r+0xc>
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <_fflush_r+0x70>)
 8008d26:	429c      	cmp	r4, r3
 8008d28:	d101      	bne.n	8008d2e <_fflush_r+0x62>
 8008d2a:	68ac      	ldr	r4, [r5, #8]
 8008d2c:	e7df      	b.n	8008cee <_fflush_r+0x22>
 8008d2e:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <_fflush_r+0x74>)
 8008d30:	429c      	cmp	r4, r3
 8008d32:	bf08      	it	eq
 8008d34:	68ec      	ldreq	r4, [r5, #12]
 8008d36:	e7da      	b.n	8008cee <_fflush_r+0x22>
 8008d38:	08009498 	.word	0x08009498
 8008d3c:	080094b8 	.word	0x080094b8
 8008d40:	08009478 	.word	0x08009478

08008d44 <std>:
 8008d44:	2300      	movs	r3, #0
 8008d46:	b510      	push	{r4, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d52:	6083      	str	r3, [r0, #8]
 8008d54:	8181      	strh	r1, [r0, #12]
 8008d56:	6643      	str	r3, [r0, #100]	; 0x64
 8008d58:	81c2      	strh	r2, [r0, #14]
 8008d5a:	6183      	str	r3, [r0, #24]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	2208      	movs	r2, #8
 8008d60:	305c      	adds	r0, #92	; 0x5c
 8008d62:	f7fd feb9 	bl	8006ad8 <memset>
 8008d66:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <std+0x38>)
 8008d68:	6263      	str	r3, [r4, #36]	; 0x24
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x3c>)
 8008d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x40>)
 8008d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x44>)
 8008d74:	6224      	str	r4, [r4, #32]
 8008d76:	6323      	str	r3, [r4, #48]	; 0x30
 8008d78:	bd10      	pop	{r4, pc}
 8008d7a:	bf00      	nop
 8008d7c:	08009089 	.word	0x08009089
 8008d80:	080090ab 	.word	0x080090ab
 8008d84:	080090e3 	.word	0x080090e3
 8008d88:	08009107 	.word	0x08009107

08008d8c <_cleanup_r>:
 8008d8c:	4901      	ldr	r1, [pc, #4]	; (8008d94 <_cleanup_r+0x8>)
 8008d8e:	f000 b8af 	b.w	8008ef0 <_fwalk_reent>
 8008d92:	bf00      	nop
 8008d94:	08008ccd 	.word	0x08008ccd

08008d98 <__sfmoreglue>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	2268      	movs	r2, #104	; 0x68
 8008d9c:	1e4d      	subs	r5, r1, #1
 8008d9e:	4355      	muls	r5, r2
 8008da0:	460e      	mov	r6, r1
 8008da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008da6:	f7fe fbaf 	bl	8007508 <_malloc_r>
 8008daa:	4604      	mov	r4, r0
 8008dac:	b140      	cbz	r0, 8008dc0 <__sfmoreglue+0x28>
 8008dae:	2100      	movs	r1, #0
 8008db0:	e9c0 1600 	strd	r1, r6, [r0]
 8008db4:	300c      	adds	r0, #12
 8008db6:	60a0      	str	r0, [r4, #8]
 8008db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dbc:	f7fd fe8c 	bl	8006ad8 <memset>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}

08008dc4 <__sfp_lock_acquire>:
 8008dc4:	4801      	ldr	r0, [pc, #4]	; (8008dcc <__sfp_lock_acquire+0x8>)
 8008dc6:	f000 b8b3 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 8008dca:	bf00      	nop
 8008dcc:	20000795 	.word	0x20000795

08008dd0 <__sfp_lock_release>:
 8008dd0:	4801      	ldr	r0, [pc, #4]	; (8008dd8 <__sfp_lock_release+0x8>)
 8008dd2:	f000 b8ae 	b.w	8008f32 <__retarget_lock_release_recursive>
 8008dd6:	bf00      	nop
 8008dd8:	20000795 	.word	0x20000795

08008ddc <__sinit_lock_acquire>:
 8008ddc:	4801      	ldr	r0, [pc, #4]	; (8008de4 <__sinit_lock_acquire+0x8>)
 8008dde:	f000 b8a7 	b.w	8008f30 <__retarget_lock_acquire_recursive>
 8008de2:	bf00      	nop
 8008de4:	20000796 	.word	0x20000796

08008de8 <__sinit_lock_release>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__sinit_lock_release+0x8>)
 8008dea:	f000 b8a2 	b.w	8008f32 <__retarget_lock_release_recursive>
 8008dee:	bf00      	nop
 8008df0:	20000796 	.word	0x20000796

08008df4 <__sinit>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	4604      	mov	r4, r0
 8008df8:	f7ff fff0 	bl	8008ddc <__sinit_lock_acquire>
 8008dfc:	69a3      	ldr	r3, [r4, #24]
 8008dfe:	b11b      	cbz	r3, 8008e08 <__sinit+0x14>
 8008e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e04:	f7ff bff0 	b.w	8008de8 <__sinit_lock_release>
 8008e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <__sinit+0x68>)
 8008e10:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <__sinit+0x6c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	bf04      	itt	eq
 8008e1a:	2301      	moveq	r3, #1
 8008e1c:	61a3      	streq	r3, [r4, #24]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 f820 	bl	8008e64 <__sfp>
 8008e24:	6060      	str	r0, [r4, #4]
 8008e26:	4620      	mov	r0, r4
 8008e28:	f000 f81c 	bl	8008e64 <__sfp>
 8008e2c:	60a0      	str	r0, [r4, #8]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 f818 	bl	8008e64 <__sfp>
 8008e34:	2200      	movs	r2, #0
 8008e36:	60e0      	str	r0, [r4, #12]
 8008e38:	2104      	movs	r1, #4
 8008e3a:	6860      	ldr	r0, [r4, #4]
 8008e3c:	f7ff ff82 	bl	8008d44 <std>
 8008e40:	68a0      	ldr	r0, [r4, #8]
 8008e42:	2201      	movs	r2, #1
 8008e44:	2109      	movs	r1, #9
 8008e46:	f7ff ff7d 	bl	8008d44 <std>
 8008e4a:	68e0      	ldr	r0, [r4, #12]
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	2112      	movs	r1, #18
 8008e50:	f7ff ff78 	bl	8008d44 <std>
 8008e54:	2301      	movs	r3, #1
 8008e56:	61a3      	str	r3, [r4, #24]
 8008e58:	e7d2      	b.n	8008e00 <__sinit+0xc>
 8008e5a:	bf00      	nop
 8008e5c:	08009214 	.word	0x08009214
 8008e60:	08008d8d 	.word	0x08008d8d

08008e64 <__sfp>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	4607      	mov	r7, r0
 8008e68:	f7ff ffac 	bl	8008dc4 <__sfp_lock_acquire>
 8008e6c:	4b1e      	ldr	r3, [pc, #120]	; (8008ee8 <__sfp+0x84>)
 8008e6e:	681e      	ldr	r6, [r3, #0]
 8008e70:	69b3      	ldr	r3, [r6, #24]
 8008e72:	b913      	cbnz	r3, 8008e7a <__sfp+0x16>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffbd 	bl	8008df4 <__sinit>
 8008e7a:	3648      	adds	r6, #72	; 0x48
 8008e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	d503      	bpl.n	8008e8c <__sfp+0x28>
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	b30b      	cbz	r3, 8008ecc <__sfp+0x68>
 8008e88:	6836      	ldr	r6, [r6, #0]
 8008e8a:	e7f7      	b.n	8008e7c <__sfp+0x18>
 8008e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e90:	b9d5      	cbnz	r5, 8008ec8 <__sfp+0x64>
 8008e92:	4b16      	ldr	r3, [pc, #88]	; (8008eec <__sfp+0x88>)
 8008e94:	60e3      	str	r3, [r4, #12]
 8008e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e9c:	f000 f847 	bl	8008f2e <__retarget_lock_init_recursive>
 8008ea0:	f7ff ff96 	bl	8008dd0 <__sfp_lock_release>
 8008ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008eac:	6025      	str	r5, [r4, #0]
 8008eae:	61a5      	str	r5, [r4, #24]
 8008eb0:	2208      	movs	r2, #8
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008eb8:	f7fd fe0e 	bl	8006ad8 <memset>
 8008ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ec8:	3468      	adds	r4, #104	; 0x68
 8008eca:	e7d9      	b.n	8008e80 <__sfp+0x1c>
 8008ecc:	2104      	movs	r1, #4
 8008ece:	4638      	mov	r0, r7
 8008ed0:	f7ff ff62 	bl	8008d98 <__sfmoreglue>
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	6030      	str	r0, [r6, #0]
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1d5      	bne.n	8008e88 <__sfp+0x24>
 8008edc:	f7ff ff78 	bl	8008dd0 <__sfp_lock_release>
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	603b      	str	r3, [r7, #0]
 8008ee4:	e7ee      	b.n	8008ec4 <__sfp+0x60>
 8008ee6:	bf00      	nop
 8008ee8:	08009214 	.word	0x08009214
 8008eec:	ffff0001 	.word	0xffff0001

08008ef0 <_fwalk_reent>:
 8008ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	4688      	mov	r8, r1
 8008ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008efc:	2700      	movs	r7, #0
 8008efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f02:	f1b9 0901 	subs.w	r9, r9, #1
 8008f06:	d505      	bpl.n	8008f14 <_fwalk_reent+0x24>
 8008f08:	6824      	ldr	r4, [r4, #0]
 8008f0a:	2c00      	cmp	r4, #0
 8008f0c:	d1f7      	bne.n	8008efe <_fwalk_reent+0xe>
 8008f0e:	4638      	mov	r0, r7
 8008f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f14:	89ab      	ldrh	r3, [r5, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d907      	bls.n	8008f2a <_fwalk_reent+0x3a>
 8008f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	d003      	beq.n	8008f2a <_fwalk_reent+0x3a>
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	47c0      	blx	r8
 8008f28:	4307      	orrs	r7, r0
 8008f2a:	3568      	adds	r5, #104	; 0x68
 8008f2c:	e7e9      	b.n	8008f02 <_fwalk_reent+0x12>

08008f2e <__retarget_lock_init_recursive>:
 8008f2e:	4770      	bx	lr

08008f30 <__retarget_lock_acquire_recursive>:
 8008f30:	4770      	bx	lr

08008f32 <__retarget_lock_release_recursive>:
 8008f32:	4770      	bx	lr

08008f34 <__swhatbuf_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	460e      	mov	r6, r1
 8008f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f3c:	2900      	cmp	r1, #0
 8008f3e:	b096      	sub	sp, #88	; 0x58
 8008f40:	4614      	mov	r4, r2
 8008f42:	461d      	mov	r5, r3
 8008f44:	da08      	bge.n	8008f58 <__swhatbuf_r+0x24>
 8008f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	602a      	str	r2, [r5, #0]
 8008f4e:	061a      	lsls	r2, r3, #24
 8008f50:	d410      	bmi.n	8008f74 <__swhatbuf_r+0x40>
 8008f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f56:	e00e      	b.n	8008f76 <__swhatbuf_r+0x42>
 8008f58:	466a      	mov	r2, sp
 8008f5a:	f000 f8fb 	bl	8009154 <_fstat_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	dbf1      	blt.n	8008f46 <__swhatbuf_r+0x12>
 8008f62:	9a01      	ldr	r2, [sp, #4]
 8008f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f6c:	425a      	negs	r2, r3
 8008f6e:	415a      	adcs	r2, r3
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	e7ee      	b.n	8008f52 <__swhatbuf_r+0x1e>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	2000      	movs	r0, #0
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	b016      	add	sp, #88	; 0x58
 8008f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f80 <__smakebuf_r>:
 8008f80:	898b      	ldrh	r3, [r1, #12]
 8008f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f84:	079d      	lsls	r5, r3, #30
 8008f86:	4606      	mov	r6, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	d507      	bpl.n	8008f9c <__smakebuf_r+0x1c>
 8008f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	2301      	movs	r3, #1
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	b002      	add	sp, #8
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	ab01      	add	r3, sp, #4
 8008f9e:	466a      	mov	r2, sp
 8008fa0:	f7ff ffc8 	bl	8008f34 <__swhatbuf_r>
 8008fa4:	9900      	ldr	r1, [sp, #0]
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7fe faad 	bl	8007508 <_malloc_r>
 8008fae:	b948      	cbnz	r0, 8008fc4 <__smakebuf_r+0x44>
 8008fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d4ef      	bmi.n	8008f98 <__smakebuf_r+0x18>
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7e3      	b.n	8008f8c <__smakebuf_r+0xc>
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <__smakebuf_r+0x7c>)
 8008fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6163      	str	r3, [r4, #20]
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	6120      	str	r0, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x74>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f8c9 	bl	8009178 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x74>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a0      	ldrh	r0, [r4, #12]
 8008ff6:	4305      	orrs	r5, r0
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cd      	b.n	8008f98 <__smakebuf_r+0x18>
 8008ffc:	08008d8d 	.word	0x08008d8d

08009000 <_raise_r>:
 8009000:	291f      	cmp	r1, #31
 8009002:	b538      	push	{r3, r4, r5, lr}
 8009004:	4604      	mov	r4, r0
 8009006:	460d      	mov	r5, r1
 8009008:	d904      	bls.n	8009014 <_raise_r+0x14>
 800900a:	2316      	movs	r3, #22
 800900c:	6003      	str	r3, [r0, #0]
 800900e:	f04f 30ff 	mov.w	r0, #4294967295
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009016:	b112      	cbz	r2, 800901e <_raise_r+0x1e>
 8009018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800901c:	b94b      	cbnz	r3, 8009032 <_raise_r+0x32>
 800901e:	4620      	mov	r0, r4
 8009020:	f000 f830 	bl	8009084 <_getpid_r>
 8009024:	462a      	mov	r2, r5
 8009026:	4601      	mov	r1, r0
 8009028:	4620      	mov	r0, r4
 800902a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800902e:	f000 b817 	b.w	8009060 <_kill_r>
 8009032:	2b01      	cmp	r3, #1
 8009034:	d00a      	beq.n	800904c <_raise_r+0x4c>
 8009036:	1c59      	adds	r1, r3, #1
 8009038:	d103      	bne.n	8009042 <_raise_r+0x42>
 800903a:	2316      	movs	r3, #22
 800903c:	6003      	str	r3, [r0, #0]
 800903e:	2001      	movs	r0, #1
 8009040:	e7e7      	b.n	8009012 <_raise_r+0x12>
 8009042:	2400      	movs	r4, #0
 8009044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009048:	4628      	mov	r0, r5
 800904a:	4798      	blx	r3
 800904c:	2000      	movs	r0, #0
 800904e:	e7e0      	b.n	8009012 <_raise_r+0x12>

08009050 <raise>:
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <raise+0xc>)
 8009052:	4601      	mov	r1, r0
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	f7ff bfd3 	b.w	8009000 <_raise_r>
 800905a:	bf00      	nop
 800905c:	2000000c 	.word	0x2000000c

08009060 <_kill_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d07      	ldr	r5, [pc, #28]	; (8009080 <_kill_r+0x20>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	602b      	str	r3, [r5, #0]
 800906e:	f7f8 fcc1 	bl	80019f4 <_kill>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	d102      	bne.n	800907c <_kill_r+0x1c>
 8009076:	682b      	ldr	r3, [r5, #0]
 8009078:	b103      	cbz	r3, 800907c <_kill_r+0x1c>
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	bd38      	pop	{r3, r4, r5, pc}
 800907e:	bf00      	nop
 8009080:	20000790 	.word	0x20000790

08009084 <_getpid_r>:
 8009084:	f7f8 bcae 	b.w	80019e4 <_getpid>

08009088 <__sread>:
 8009088:	b510      	push	{r4, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	f000 f894 	bl	80091bc <_read_r>
 8009094:	2800      	cmp	r0, #0
 8009096:	bfab      	itete	ge
 8009098:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800909a:	89a3      	ldrhlt	r3, [r4, #12]
 800909c:	181b      	addge	r3, r3, r0
 800909e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80090a2:	bfac      	ite	ge
 80090a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80090a6:	81a3      	strhlt	r3, [r4, #12]
 80090a8:	bd10      	pop	{r4, pc}

080090aa <__swrite>:
 80090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ae:	461f      	mov	r7, r3
 80090b0:	898b      	ldrh	r3, [r1, #12]
 80090b2:	05db      	lsls	r3, r3, #23
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4616      	mov	r6, r2
 80090ba:	d505      	bpl.n	80090c8 <__swrite+0x1e>
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	2302      	movs	r3, #2
 80090c2:	2200      	movs	r2, #0
 80090c4:	f000 f868 	bl	8009198 <_lseek_r>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d2:	81a3      	strh	r3, [r4, #12]
 80090d4:	4632      	mov	r2, r6
 80090d6:	463b      	mov	r3, r7
 80090d8:	4628      	mov	r0, r5
 80090da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090de:	f000 b817 	b.w	8009110 <_write_r>

080090e2 <__sseek>:
 80090e2:	b510      	push	{r4, lr}
 80090e4:	460c      	mov	r4, r1
 80090e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ea:	f000 f855 	bl	8009198 <_lseek_r>
 80090ee:	1c43      	adds	r3, r0, #1
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	bf15      	itete	ne
 80090f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090fe:	81a3      	strheq	r3, [r4, #12]
 8009100:	bf18      	it	ne
 8009102:	81a3      	strhne	r3, [r4, #12]
 8009104:	bd10      	pop	{r4, pc}

08009106 <__sclose>:
 8009106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800910a:	f000 b813 	b.w	8009134 <_close_r>
	...

08009110 <_write_r>:
 8009110:	b538      	push	{r3, r4, r5, lr}
 8009112:	4d07      	ldr	r5, [pc, #28]	; (8009130 <_write_r+0x20>)
 8009114:	4604      	mov	r4, r0
 8009116:	4608      	mov	r0, r1
 8009118:	4611      	mov	r1, r2
 800911a:	2200      	movs	r2, #0
 800911c:	602a      	str	r2, [r5, #0]
 800911e:	461a      	mov	r2, r3
 8009120:	f7f8 fc9f 	bl	8001a62 <_write>
 8009124:	1c43      	adds	r3, r0, #1
 8009126:	d102      	bne.n	800912e <_write_r+0x1e>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	b103      	cbz	r3, 800912e <_write_r+0x1e>
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	bd38      	pop	{r3, r4, r5, pc}
 8009130:	20000790 	.word	0x20000790

08009134 <_close_r>:
 8009134:	b538      	push	{r3, r4, r5, lr}
 8009136:	4d06      	ldr	r5, [pc, #24]	; (8009150 <_close_r+0x1c>)
 8009138:	2300      	movs	r3, #0
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	602b      	str	r3, [r5, #0]
 8009140:	f7f8 fcab 	bl	8001a9a <_close>
 8009144:	1c43      	adds	r3, r0, #1
 8009146:	d102      	bne.n	800914e <_close_r+0x1a>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	b103      	cbz	r3, 800914e <_close_r+0x1a>
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	20000790 	.word	0x20000790

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	; (8009174 <_fstat_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 fca6 	bl	8001ab2 <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000790 	.word	0x20000790

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	; (8009194 <_isatty_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 fca5 	bl	8001ad2 <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000790 	.word	0x20000790

08009198 <_lseek_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	; (80091b8 <_lseek_r+0x20>)
 800919c:	4604      	mov	r4, r0
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	2200      	movs	r2, #0
 80091a4:	602a      	str	r2, [r5, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f7f8 fc9e 	bl	8001ae8 <_lseek>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d102      	bne.n	80091b6 <_lseek_r+0x1e>
 80091b0:	682b      	ldr	r3, [r5, #0]
 80091b2:	b103      	cbz	r3, 80091b6 <_lseek_r+0x1e>
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
 80091b8:	20000790 	.word	0x20000790

080091bc <_read_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4d07      	ldr	r5, [pc, #28]	; (80091dc <_read_r+0x20>)
 80091c0:	4604      	mov	r4, r0
 80091c2:	4608      	mov	r0, r1
 80091c4:	4611      	mov	r1, r2
 80091c6:	2200      	movs	r2, #0
 80091c8:	602a      	str	r2, [r5, #0]
 80091ca:	461a      	mov	r2, r3
 80091cc:	f7f8 fc2c 	bl	8001a28 <_read>
 80091d0:	1c43      	adds	r3, r0, #1
 80091d2:	d102      	bne.n	80091da <_read_r+0x1e>
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	b103      	cbz	r3, 80091da <_read_r+0x1e>
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	bd38      	pop	{r3, r4, r5, pc}
 80091dc:	20000790 	.word	0x20000790

080091e0 <_init>:
 80091e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091e2:	bf00      	nop
 80091e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e6:	bc08      	pop	{r3}
 80091e8:	469e      	mov	lr, r3
 80091ea:	4770      	bx	lr

080091ec <_fini>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr
