
Projektv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800c158  0800c158  0001c158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e8  0800c5e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e8  0800c5e8  0001c5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5f0  0800c5f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5f4  0800c5f4  0001c5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  200001e0  0800c7d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a70  0800c7d8  00020a70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce80  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca9  00000000  00000000  0003d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00040d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001480  00000000  00000000  00042398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a158  00000000  00000000  00043818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0a6  00000000  00000000  0006d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7cac  00000000  00000000  0008ba16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001836c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007100  00000000  00000000  00183788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000cd  00000000  00000000  0018a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c13c 	.word	0x0800c13c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c13c 	.word	0x0800c13c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <controller_init>:
#include "controller.h"

void controller_init(struct Controller* controller, float MAX_CONTROL_SIGNAL, float MIN_CONTROL_SIGNAL, float START_CONTROL_SIGNAL, float MIN_ERROR, float MAX_ERROR)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b087      	sub	sp, #28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6178      	str	r0, [r7, #20]
 8000ef4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ef8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000efc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f00:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f04:	ed87 2a00 	vstr	s4, [r7]
	controller->MAX_CONTROL_SIGNAL = MAX_CONTROL_SIGNAL;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	601a      	str	r2, [r3, #0]
	controller->MIN_CONTROL_SIGNAL = MIN_CONTROL_SIGNAL;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	605a      	str	r2, [r3, #4]
	controller->START_CONTROL_SIGNAL = START_CONTROL_SIGNAL;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	609a      	str	r2, [r3, #8]
	controller->MIN_ERROR = MIN_ERROR;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	60da      	str	r2, [r3, #12]
	controller->MAX_ERROR = MAX_ERROR;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	611a      	str	r2, [r3, #16]
	controller->previous_error = 0;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <controller_control_signal>:

float controller_control_signal(struct Controller* controller, float error)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	ed87 0a00 	vstr	s0, [r7]
	controller->previous_error = error;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	615a      	str	r2, [r3, #20]
	if(error < -controller->MAX_ERROR)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f54:	eef1 7a67 	vneg.f32	s15, s15
 8000f58:	ed97 7a00 	vldr	s14, [r7]
 8000f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f64:	d503      	bpl.n	8000f6e <controller_control_signal+0x32>
	{
		return controller->MAX_CONTROL_SIGNAL;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	e04f      	b.n	800100e <controller_control_signal+0xd2>
	}
	else if(error < -controller->MIN_ERROR)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f74:	eef1 7a67 	vneg.f32	s15, s15
 8000f78:	ed97 7a00 	vldr	s14, [r7]
 8000f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f84:	d513      	bpl.n	8000fae <controller_control_signal+0x72>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error + controller->START_CONTROL_SIGNAL;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	edd3 6a00 	vldr	s13, [r3]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f96:	edd7 7a00 	vldr	s15, [r7]
 8000f9a:	eef1 7a67 	vneg.f32	s15, s15
 8000f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	e02f      	b.n	800100e <controller_control_signal+0xd2>
	}
	else if(error < controller->MIN_ERROR)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fb4:	ed97 7a00 	vldr	s14, [r7]
 8000fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d502      	bpl.n	8000fc8 <controller_control_signal+0x8c>
	{
		return 0;
 8000fc2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800101c <controller_control_signal+0xe0>
 8000fc6:	e022      	b.n	800100e <controller_control_signal+0xd2>
	}
	else if(error < controller->MAX_ERROR)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fce:	ed97 7a00 	vldr	s14, [r7]
 8000fd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d513      	bpl.n	8001004 <controller_control_signal+0xc8>
	{
		return (controller->MAX_CONTROL_SIGNAL/controller->MAX_ERROR)*-error - controller->START_CONTROL_SIGNAL;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edd3 6a00 	vldr	s13, [r3]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fe8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000fec:	edd7 7a00 	vldr	s15, [r7]
 8000ff0:	eef1 7a67 	vneg.f32	s15, s15
 8000ff4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001002:	e004      	b.n	800100e <controller_control_signal+0xd2>
	}
	else
	{
		return -controller->MAX_CONTROL_SIGNAL;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 800100e:	eeb0 0a67 	vmov.f32	s0, s15
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	00000000 	.word	0x00000000

08001020 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	4b77      	ldr	r3, [pc, #476]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a76      	ldr	r2, [pc, #472]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800103c:	f043 0304 	orr.w	r3, r3, #4
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b74      	ldr	r3, [pc, #464]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0304 	and.w	r3, r3, #4
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	4b71      	ldr	r3, [pc, #452]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a70      	ldr	r2, [pc, #448]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a6a      	ldr	r2, [pc, #424]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b65      	ldr	r3, [pc, #404]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a64      	ldr	r2, [pc, #400]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	4b5f      	ldr	r3, [pc, #380]	; (8001214 <MX_GPIO_Init+0x1f4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a5e      	ldr	r2, [pc, #376]	; (8001214 <MX_GPIO_Init+0x1f4>)
 800109c:	f043 0310 	orr.w	r3, r3, #16
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a58      	ldr	r2, [pc, #352]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010b4:	f043 0308 	orr.w	r3, r3, #8
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b56      	ldr	r3, [pc, #344]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a52      	ldr	r2, [pc, #328]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <MX_GPIO_Init+0x1f4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2130      	movs	r1, #48	; 0x30
 80010e2:	484d      	ldr	r0, [pc, #308]	; (8001218 <MX_GPIO_Init+0x1f8>)
 80010e4:	f002 f948 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|BACKWARD_MOTOR_2_Pin|FORWARD_MOTOR_2_Pin|LD3_Pin
 80010e8:	2200      	movs	r2, #0
 80010ea:	f244 0187 	movw	r1, #16519	; 0x4087
 80010ee:	484b      	ldr	r0, [pc, #300]	; (800121c <MX_GPIO_Init+0x1fc>)
 80010f0:	f002 f942 	bl	8003378 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4849      	ldr	r0, [pc, #292]	; (8001220 <MX_GPIO_Init+0x200>)
 80010fa:	f002 f93d 	bl	8003378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001104:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4843      	ldr	r0, [pc, #268]	; (8001224 <MX_GPIO_Init+0x204>)
 8001116:	f001 ff6b 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800111a:	2332      	movs	r3, #50	; 0x32
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001126:	2303      	movs	r3, #3
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112a:	230b      	movs	r3, #11
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	483b      	ldr	r0, [pc, #236]	; (8001224 <MX_GPIO_Init+0x204>)
 8001136:	f001 ff5b 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800113a:	2386      	movs	r3, #134	; 0x86
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114a:	230b      	movs	r3, #11
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4830      	ldr	r0, [pc, #192]	; (8001218 <MX_GPIO_Init+0x1f8>)
 8001156:	f001 ff4b 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = FORWARD_MOTOR_1_Pin|BACKWARD_MOTOR_1_Pin;
 800115a:	2330      	movs	r3, #48	; 0x30
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_GPIO_Init+0x1f8>)
 8001172:	f001 ff3d 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|BACKWARD_MOTOR_2_Pin|FORWARD_MOTOR_2_Pin|LD3_Pin
 8001176:	f244 0387 	movw	r3, #16519	; 0x4087
 800117a:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <MX_GPIO_Init+0x1fc>)
 8001190:	f001 ff2e 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a6:	230b      	movs	r3, #11
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	481a      	ldr	r0, [pc, #104]	; (800121c <MX_GPIO_Init+0x1fc>)
 80011b2:	f001 ff1d 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011b6:	2340      	movs	r3, #64	; 0x40
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4814      	ldr	r0, [pc, #80]	; (8001220 <MX_GPIO_Init+0x200>)
 80011ce:	f001 ff0f 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <MX_GPIO_Init+0x200>)
 80011e6:	f001 ff03 	bl	8002ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fc:	230b      	movs	r3, #11
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_GPIO_Init+0x200>)
 8001208:	f001 fef2 	bl	8002ff0 <HAL_GPIO_Init>

}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40021800 	.word	0x40021800
 8001224:	40020800 	.word	0x40020800

08001228 <hc_sr04_init>:
#include "hcsr04.h"

#define HC_SR04_US_TO_CM_CONVERTER	58

void hc_sr04_init(struct us_sensor_str *us_sensor, TIM_HandleTypeDef *htim_echo, TIM_HandleTypeDef *htim_trig, TIM_Channel trig_channel)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	us_sensor->htim_echo = htim_echo;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	601a      	str	r2, [r3, #0]
	us_sensor->htim_trig = htim_trig;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	605a      	str	r2, [r3, #4]
	us_sensor->trig_channel = trig_channel;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	609a      	str	r2, [r3, #8]

	HAL_TIM_IC_Start_IT(us_sensor->htim_echo, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2104      	movs	r1, #4
 800124e:	4618      	mov	r0, r3
 8001250:	f004 f950 	bl	80054f4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_PWM_Start(us_sensor->htim_trig, us_sensor->trig_channel);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f003 ffec 	bl	800523c <HAL_TIM_PWM_Start>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <hc_sr04_convert_us_to_cm>:

float hc_sr04_convert_us_to_cm(float distance_us)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	ed87 0a01 	vstr	s0, [r7, #4]
	return (distance_us / HC_SR04_US_TO_CM_CONVERTER);
 8001276:	edd7 7a01 	vldr	s15, [r7, #4]
 800127a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001294 <hc_sr04_convert_us_to_cm+0x28>
 800127e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001282:	eef0 7a66 	vmov.f32	s15, s13
}
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	42680000 	.word	0x42680000

08001298 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_I2C1_Init+0x74>)
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <MX_I2C1_Init+0x78>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <MX_I2C1_Init+0x74>)
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <MX_I2C1_Init+0x7c>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <MX_I2C1_Init+0x74>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <MX_I2C1_Init+0x74>)
 80012d4:	f002 f86a 	bl	80033ac <HAL_I2C_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012de:	f000 fb95 	bl	8001a0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4809      	ldr	r0, [pc, #36]	; (800130c <MX_I2C1_Init+0x74>)
 80012e6:	f002 fbd7 	bl	8003a98 <HAL_I2CEx_ConfigAnalogFilter>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012f0:	f000 fb8c 	bl	8001a0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_I2C1_Init+0x74>)
 80012f8:	f002 fc19 	bl	8003b2e <HAL_I2CEx_ConfigDigitalFilter>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001302:	f000 fb83 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001fc 	.word	0x200001fc
 8001310:	40005400 	.word	0x40005400
 8001314:	00808cd2 	.word	0x00808cd2

08001318 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b0aa      	sub	sp, #168	; 0xa8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	2284      	movs	r2, #132	; 0x84
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fb51 	bl	80089e0 <memset>
  if(i2cHandle->Instance==I2C1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_I2C_MspInit+0xb4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d13c      	bne.n	80013c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001348:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800134c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800134e:	2300      	movs	r3, #0
 8001350:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	4618      	mov	r0, r3
 8001358:	f003 fa58 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001362:	f000 fb53 	bl	8001a0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800137e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001398:	2304      	movs	r3, #4
 800139a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013a2:	4619      	mov	r1, r3
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <HAL_I2C_MspInit+0xbc>)
 80013a6:	f001 fe23 	bl	8002ff0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_I2C_MspInit+0xb8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c2:	bf00      	nop
 80013c4:	37a8      	adds	r7, #168	; 0xa8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40005400 	.word	0x40005400
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 80013ee:	2308      	movs	r3, #8
 80013f0:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 80013f2:	2028      	movs	r0, #40	; 0x28
 80013f4:	f001 fc34 	bl	8002c60 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	2130      	movs	r1, #48	; 0x30
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f829 	bl	8001458 <lcd_write>
	HAL_Delay(5);
 8001406:	2005      	movs	r0, #5
 8001408:	f001 fc2a 	bl	8002c60 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	2130      	movs	r1, #48	; 0x30
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f81f 	bl	8001458 <lcd_write>
	HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f001 fc20 	bl	8002c60 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	2130      	movs	r1, #48	; 0x30
 8001428:	4618      	mov	r0, r3
 800142a:	f000 f815 	bl	8001458 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	2102      	movs	r1, #2
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f80e 	bl	8001458 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	210c      	movs	r1, #12
 8001444:	4618      	mov	r0, r3
 8001446:	f000 f807 	bl	8001458 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f89f 	bl	800158e <lcd_clear>

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af02      	add	r7, sp, #8
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	460b      	mov	r3, r1
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	4613      	mov	r3, r2
 8001468:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800146a:	79bb      	ldrb	r3, [r7, #6]
 800146c:	f023 030f 	bic.w	r3, r3, #15
 8001470:	b2da      	uxtb	r2, r3
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	b2db      	uxtb	r3, r3
 800147e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001480:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001484:	f023 030f 	bic.w	r3, r3, #15
 8001488:	b25a      	sxtb	r2, r3
 800148a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800148e:	4313      	orrs	r3, r2
 8001490:	b25b      	sxtb	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001496:	79bb      	ldrb	r3, [r7, #6]
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	b2da      	uxtb	r2, r3
 800149c:	797b      	ldrb	r3, [r7, #5]
 800149e:	4313      	orrs	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	b25a      	sxtb	r2, r3
 80014b0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b25b      	sxtb	r3, r3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	b299      	uxth	r1, r3
 80014c0:	f107 020c 	add.w	r2, r7, #12
 80014c4:	2364      	movs	r3, #100	; 0x64
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	2304      	movs	r3, #4
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <lcd_write+0x88>)
 80014cc:	f001 fffe 	bl	80034cc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80014d0:	2005      	movs	r0, #5
 80014d2:	f001 fbc5 	bl	8002c60 <HAL_Delay>
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001fc 	.word	0x200001fc

080014e4 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	2300      	movs	r3, #0
 80014f2:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 80014fe:	2308      	movs	r3, #8
 8001500:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f843 	bl	800158e <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ffa1 	bl	8001458 <lcd_write>
	while(lcd->f_line[i])
 8001516:	e00f      	b.n	8001538 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7818      	ldrb	r0, [r3, #0]
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	7859      	ldrb	r1, [r3, #1]
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	b2db      	uxtb	r3, r3
 800152c:	461a      	mov	r2, r3
 800152e:	f7ff ff93 	bl	8001458 <lcd_write>
		i++;
 8001532:	7bbb      	ldrb	r3, [r7, #14]
 8001534:	3301      	adds	r3, #1
 8001536:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001538:	7bbb      	ldrb	r3, [r7, #14]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e9      	bne.n	8001518 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	21c0      	movs	r1, #192	; 0xc0
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff81 	bl	8001458 <lcd_write>
	while(lcd->s_line[i])
 8001556:	e00f      	b.n	8001578 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7818      	ldrb	r0, [r3, #0]
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	7c99      	ldrb	r1, [r3, #18]
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	f7ff ff73 	bl	8001458 <lcd_write>
		i++;
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	3301      	adds	r3, #1
 8001576:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001578:	7bbb      	ldrb	r3, [r7, #14]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	7c9b      	ldrb	r3, [r3, #18]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e9      	bne.n	8001558 <lcd_display+0x74>
	}
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80015a4:	2308      	movs	r3, #8
 80015a6:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff51 	bl	8001458 <lcd_write>
}
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_TIM_IC_CaptureCallback>:
char messegeDown[16];



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(TIM1 == htim->Instance)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_TIM_IC_CaptureCallback+0x54>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d11c      	bne.n	800160c <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		uint32_t echo_us;

		echo_us = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80015d2:	2104      	movs	r1, #4
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f004 fded 	bl	80061b4 <HAL_TIM_ReadCapturedValue>
 80015da:	60f8      	str	r0, [r7, #12]
		distance_sensor.distance_cm = hc_sr04_convert_us_to_cm(echo_us);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	f7ff fe3f 	bl	800126c <hc_sr04_convert_us_to_cm>
 80015ee:	eef0 7a40 	vmov.f32	s15, s0
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x58>)
 80015f4:	edc3 7a03 	vstr	s15, [r3, #12]
//		arm_fir_f32(&fir, &distance_sensor.distance_cm, &robot.position, 1);
		robot_linear_update(&robot, distance_sensor.distance_cm, 1/16);
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <HAL_TIM_IC_CaptureCallback+0x58>)
 80015fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80015fe:	eddf 0a07 	vldr	s1, [pc, #28]	; 800161c <HAL_TIM_IC_CaptureCallback+0x5c>
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001608:	f000 fc49 	bl	8001e9e <robot_linear_update>
	}
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010000 	.word	0x40010000
 8001618:	20000274 	.word	0x20000274
 800161c:	00000000 	.word	0x00000000
 8001620:	200002cc 	.word	0x200002cc

08001624 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(TIM4 == htim->Instance)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d115      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		float error = robot_error(&robot);
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001638:	f000 fc64 	bl	8001f04 <robot_error>
 800163c:	ed87 0a03 	vstr	s0, [r7, #12]
		float duty = controller_control_signal(&controller, error);
 8001640:	ed97 0a03 	vldr	s0, [r7, #12]
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001646:	f7ff fc79 	bl	8000f3c <controller_control_signal>
 800164a:	ed87 0a02 	vstr	s0, [r7, #8]
		motor_move(&left_motor, duty);
 800164e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001654:	f000 fa86 	bl	8001b64 <motor_move>
		motor_move(&right_motor, duty);
 8001658:	ed97 0a02 	vldr	s0, [r7, #8]
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800165e:	f000 fa81 	bl	8001b64 <motor_move>
	}
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40000800 	.word	0x40000800
 8001670:	200002cc 	.word	0x200002cc
 8001674:	20000284 	.word	0x20000284
 8001678:	2000029c 	.word	0x2000029c
 800167c:	200002b4 	.word	0x200002b4

08001680 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a16      	ldr	r2, [pc, #88]	; (80016e8 <HAL_UART_RxCpltCallback+0x68>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d125      	bne.n	80016de <HAL_UART_RxCpltCallback+0x5e>
	{
		char distance[3];

		sscanf((char*)buffer, "%c%c%c", &distance[0], &distance[1], &distance[2]);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	3302      	adds	r3, #2
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	460b      	mov	r3, r1
 80016a6:	4911      	ldr	r1, [pc, #68]	; (80016ec <HAL_UART_RxCpltCallback+0x6c>)
 80016a8:	4811      	ldr	r0, [pc, #68]	; (80016f0 <HAL_UART_RxCpltCallback+0x70>)
 80016aa:	f007 fe2b 	bl	8009304 <siscanf>

		robot_set_end_position(&robot, atoi(distance));
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4618      	mov	r0, r3
 80016b4:	f007 f966 	bl	8008984 <atoi>
 80016b8:	ee07 0a90 	vmov	s15, r0
 80016bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	480b      	ldr	r0, [pc, #44]	; (80016f4 <HAL_UART_RxCpltCallback+0x74>)
 80016c6:	f000 fc0e 	bl	8001ee6 <robot_set_end_position>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)buffer, strlen(buffer));
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <HAL_UART_RxCpltCallback+0x70>)
 80016cc:	f7fe fda0 	bl	8000210 <strlen>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	461a      	mov	r2, r3
 80016d6:	4906      	ldr	r1, [pc, #24]	; (80016f0 <HAL_UART_RxCpltCallback+0x70>)
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <HAL_UART_RxCpltCallback+0x78>)
 80016da:	f005 fc43 	bl	8006f64 <HAL_UART_Receive_IT>
	}
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40004800 	.word	0x40004800
 80016ec:	0800c158 	.word	0x0800c158
 80016f0:	20000000 	.word	0x20000000
 80016f4:	200002cc 	.word	0x200002cc
 80016f8:	200004cc 	.word	0x200004cc

080016fc <update_lcd>:

//funkcja wyświelająca
void update_lcd(int count)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(count%2 != 0)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d021      	beq.n	8001752 <update_lcd+0x56>
	{
		//zadana wartosc
		sprintf((char *)messegeUp, "zadana: %f", robot.end_position);
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <update_lcd+0x98>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff38 	bl	8000588 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	491e      	ldr	r1, [pc, #120]	; (8001798 <update_lcd+0x9c>)
 800171e:	481f      	ldr	r0, [pc, #124]	; (800179c <update_lcd+0xa0>)
 8001720:	f007 fdd0 	bl	80092c4 <siprintf>
		sprintf((char *)disp.f_line, messegeUp);
 8001724:	491d      	ldr	r1, [pc, #116]	; (800179c <update_lcd+0xa0>)
 8001726:	481e      	ldr	r0, [pc, #120]	; (80017a0 <update_lcd+0xa4>)
 8001728:	f007 fdcc 	bl	80092c4 <siprintf>
		sprintf((char *)messegeDown, "aktualna: %f", robot.position);
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <update_lcd+0x98>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe ff29 	bl	8000588 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	491a      	ldr	r1, [pc, #104]	; (80017a4 <update_lcd+0xa8>)
 800173c:	481a      	ldr	r0, [pc, #104]	; (80017a8 <update_lcd+0xac>)
 800173e:	f007 fdc1 	bl	80092c4 <siprintf>
		sprintf((char *)disp.s_line, messegeDown);
 8001742:	4919      	ldr	r1, [pc, #100]	; (80017a8 <update_lcd+0xac>)
 8001744:	4819      	ldr	r0, [pc, #100]	; (80017ac <update_lcd+0xb0>)
 8001746:	f007 fdbd 	bl	80092c4 <siprintf>
		lcd_display(&disp);
 800174a:	4819      	ldr	r0, [pc, #100]	; (80017b0 <update_lcd+0xb4>)
 800174c:	f7ff feca 	bl	80014e4 <lcd_display>
		sprintf((char *)messegeUp, "uchyb: %f", robot.end_position - robot.position);
		sprintf((char *)disp.f_line, messegeUp);
		sprintf((char *)disp.s_line, "AiR          ");
		lcd_display(&disp);
	}
}
 8001750:	e01c      	b.n	800178c <update_lcd+0x90>
		sprintf((char *)messegeUp, "uchyb: %f", robot.end_position - robot.position);
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <update_lcd+0x98>)
 8001754:	ed93 7a06 	vldr	s14, [r3, #24]
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <update_lcd+0x98>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001762:	ee17 0a90 	vmov	r0, s15
 8001766:	f7fe ff0f 	bl	8000588 <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4911      	ldr	r1, [pc, #68]	; (80017b4 <update_lcd+0xb8>)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <update_lcd+0xa0>)
 8001772:	f007 fda7 	bl	80092c4 <siprintf>
		sprintf((char *)disp.f_line, messegeUp);
 8001776:	4909      	ldr	r1, [pc, #36]	; (800179c <update_lcd+0xa0>)
 8001778:	4809      	ldr	r0, [pc, #36]	; (80017a0 <update_lcd+0xa4>)
 800177a:	f007 fda3 	bl	80092c4 <siprintf>
		sprintf((char *)disp.s_line, "AiR          ");
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <update_lcd+0xbc>)
 8001780:	480a      	ldr	r0, [pc, #40]	; (80017ac <update_lcd+0xb0>)
 8001782:	f007 fd9f 	bl	80092c4 <siprintf>
		lcd_display(&disp);
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <update_lcd+0xb4>)
 8001788:	f7ff feac 	bl	80014e4 <lcd_display>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200002cc 	.word	0x200002cc
 8001798:	0800c160 	.word	0x0800c160
 800179c:	2000032c 	.word	0x2000032c
 80017a0:	20000251 	.word	0x20000251
 80017a4:	0800c16c 	.word	0x0800c16c
 80017a8:	2000033c 	.word	0x2000033c
 80017ac:	20000262 	.word	0x20000262
 80017b0:	20000250 	.word	0x20000250
 80017b4:	0800c17c 	.word	0x0800c17c
 80017b8:	0800c188 	.word	0x0800c188

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c2:	f001 f9f0 	bl	8002ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c6:	f000 f8b9 	bl	800193c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ca:	f7ff fc29 	bl	8001020 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80017ce:	f001 f881 	bl	80028d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017d2:	f001 f917 	bl	8002a04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80017d6:	f000 fcf7 	bl	80021c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80017da:	f000 fd99 	bl	8002310 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017de:	f000 fdf1 	bl	80023c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017e2:	f000 fe71 	bl	80024c8 <MX_TIM4_Init>
  MX_I2C1_Init();
 80017e6:	f7ff fd57 	bl	8001298 <MX_I2C1_Init>
  MX_TIM8_Init();
 80017ea:	f000 febb 	bl	8002564 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  arm_fir_init_f32(&fir, BL, B, fir_state, 1);
 80017ee:	230d      	movs	r3, #13
 80017f0:	b299      	uxth	r1, r3
 80017f2:	2301      	movs	r3, #1
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <main+0x118>)
 80017f8:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <main+0x11c>)
 80017fa:	4838      	ldr	r0, [pc, #224]	; (80018dc <main+0x120>)
 80017fc:	f007 f8b0 	bl	8008960 <arm_fir_init_f32>
  hc_sr04_init(&distance_sensor, &htim1, &htim2, TIM_CHANNEL_3);
 8001800:	2308      	movs	r3, #8
 8001802:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <main+0x124>)
 8001804:	4937      	ldr	r1, [pc, #220]	; (80018e4 <main+0x128>)
 8001806:	4838      	ldr	r0, [pc, #224]	; (80018e8 <main+0x12c>)
 8001808:	f7ff fd0e 	bl	8001228 <hc_sr04_init>
  robot_init(&robot, distance_sensor.distance_cm, 0);
 800180c:	4b36      	ldr	r3, [pc, #216]	; (80018e8 <main+0x12c>)
 800180e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001812:	eddf 0a36 	vldr	s1, [pc, #216]	; 80018ec <main+0x130>
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	4835      	ldr	r0, [pc, #212]	; (80018f0 <main+0x134>)
 800181c:	f000 fb1d 	bl	8001e5a <robot_init>
  robot_set_end_position(&robot, INPUT_VALUE);
 8001820:	ed9f 0a34 	vldr	s0, [pc, #208]	; 80018f4 <main+0x138>
 8001824:	4832      	ldr	r0, [pc, #200]	; (80018f0 <main+0x134>)
 8001826:	f000 fb5e 	bl	8001ee6 <robot_set_end_position>
  controller_init(&controller, MAX_PWM, 300, MIN_PWM, MIN_ERROR, MAX_ERROR);
 800182a:	ed9f 2a33 	vldr	s4, [pc, #204]	; 80018f8 <main+0x13c>
 800182e:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8001832:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80018fc <main+0x140>
 8001836:	eddf 0a32 	vldr	s1, [pc, #200]	; 8001900 <main+0x144>
 800183a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001904 <main+0x148>
 800183e:	4832      	ldr	r0, [pc, #200]	; (8001908 <main+0x14c>)
 8001840:	f7ff fb54 	bl	8000eec <controller_init>
  motor_init(&left_motor, &htim3, TIM_CHANNEL_1, FORWARD_MOTOR_1_GPIO_Port, BACKWARD_MOTOR_1_GPIO_Port, FORWARD_MOTOR_1_Pin, BACKWARD_MOTOR_1_Pin);
 8001844:	2320      	movs	r3, #32
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2310      	movs	r3, #16
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b2f      	ldr	r3, [pc, #188]	; (800190c <main+0x150>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b2e      	ldr	r3, [pc, #184]	; (800190c <main+0x150>)
 8001852:	2200      	movs	r2, #0
 8001854:	492e      	ldr	r1, [pc, #184]	; (8001910 <main+0x154>)
 8001856:	482f      	ldr	r0, [pc, #188]	; (8001914 <main+0x158>)
 8001858:	f000 f8dd 	bl	8001a16 <motor_init>
  motor_init(&right_motor, &htim3, TIM_CHANNEL_2, FORWARD_MOTOR_2_GPIO_Port, BACKWARD_MOTOR_2_GPIO_Port, FORWARD_MOTOR_2_Pin, BACKWARD_MOTOR_2_Pin);
 800185c:	2302      	movs	r3, #2
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	2304      	movs	r3, #4
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <main+0x15c>)
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <main+0x15c>)
 800186a:	2204      	movs	r2, #4
 800186c:	4928      	ldr	r1, [pc, #160]	; (8001910 <main+0x154>)
 800186e:	482b      	ldr	r0, [pc, #172]	; (800191c <main+0x160>)
 8001870:	f000 f8d1 	bl	8001a16 <motor_init>

  HAL_TIM_Base_Start_IT(&htim4);
 8001874:	482a      	ldr	r0, [pc, #168]	; (8001920 <main+0x164>)
 8001876:	f003 fc11 	bl	800509c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t*)buffer, strlen(buffer));
 800187a:	482a      	ldr	r0, [pc, #168]	; (8001924 <main+0x168>)
 800187c:	f7fe fcc8 	bl	8000210 <strlen>
 8001880:	4603      	mov	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <main+0x168>)
 8001888:	4827      	ldr	r0, [pc, #156]	; (8001928 <main+0x16c>)
 800188a:	f005 fb6b 	bl	8006f64 <HAL_UART_Receive_IT>

  //zegar enkodera
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 800188e:	2100      	movs	r1, #0
 8001890:	4826      	ldr	r0, [pc, #152]	; (800192c <main+0x170>)
 8001892:	f004 f825 	bl	80058e0 <HAL_TIM_Encoder_Start>

  //inicjalizacja wyswietlacza
  disp.addr = (0x27 << 1);
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <main+0x174>)
 8001898:	224e      	movs	r2, #78	; 0x4e
 800189a:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 800189c:	4b24      	ldr	r3, [pc, #144]	; (8001930 <main+0x174>)
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  lcd_init(&disp);
 80018a4:	4822      	ldr	r0, [pc, #136]	; (8001930 <main+0x174>)
 80018a6:	f7ff fd97 	bl	80013d8 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count = __HAL_TIM_GET_COUNTER(&htim8);
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <main+0x170>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <main+0x178>)
 80018b4:	601a      	str	r2, [r3, #0]
	//wyswielacz
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 1)
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	481f      	ldr	r0, [pc, #124]	; (8001938 <main+0x17c>)
 80018bc:	f001 fd44 	bl	8003348 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d1f1      	bne.n	80018aa <main+0xee>
	  {
			update_lcd(count);
 80018c6:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <main+0x178>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff16 	bl	80016fc <update_lcd>
	  count = __HAL_TIM_GET_COUNTER(&htim8);
 80018d0:	e7eb      	b.n	80018aa <main+0xee>
 80018d2:	bf00      	nop
 80018d4:	200002f4 	.word	0x200002f4
 80018d8:	0800c1a4 	.word	0x0800c1a4
 80018dc:	200002e8 	.word	0x200002e8
 80018e0:	2000039c 	.word	0x2000039c
 80018e4:	20000350 	.word	0x20000350
 80018e8:	20000274 	.word	0x20000274
 80018ec:	00000000 	.word	0x00000000
 80018f0:	200002cc 	.word	0x200002cc
 80018f4:	42c80000 	.word	0x42c80000
 80018f8:	43480000 	.word	0x43480000
 80018fc:	442f0000 	.word	0x442f0000
 8001900:	43960000 	.word	0x43960000
 8001904:	447a0000 	.word	0x447a0000
 8001908:	20000284 	.word	0x20000284
 800190c:	40020000 	.word	0x40020000
 8001910:	200003e8 	.word	0x200003e8
 8001914:	2000029c 	.word	0x2000029c
 8001918:	40020400 	.word	0x40020400
 800191c:	200002b4 	.word	0x200002b4
 8001920:	20000434 	.word	0x20000434
 8001924:	20000000 	.word	0x20000000
 8001928:	200004cc 	.word	0x200004cc
 800192c:	20000480 	.word	0x20000480
 8001930:	20000250 	.word	0x20000250
 8001934:	20000328 	.word	0x20000328
 8001938:	40020800 	.word	0x40020800

0800193c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	; 0x50
 8001940:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001942:	f107 0320 	add.w	r3, r7, #32
 8001946:	2230      	movs	r2, #48	; 0x30
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f007 f848 	bl	80089e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001960:	f002 fa7a 	bl	8003e58 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001964:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <SystemClock_Config+0xc8>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <SystemClock_Config+0xc8>)
 800196a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196e:	6413      	str	r3, [r2, #64]	; 0x40
 8001970:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <SystemClock_Config+0xc8>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <SystemClock_Config+0xcc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001984:	4a20      	ldr	r2, [pc, #128]	; (8001a08 <SystemClock_Config+0xcc>)
 8001986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <SystemClock_Config+0xcc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001998:	2301      	movs	r3, #1
 800199a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800199c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a2:	2302      	movs	r3, #2
 80019a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019ac:	2304      	movs	r3, #4
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019b0:	2348      	movs	r3, #72	; 0x48
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019b8:	2303      	movs	r3, #3
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019bc:	f107 0320 	add.w	r3, r7, #32
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fa59 	bl	8003e78 <HAL_RCC_OscConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019cc:	f000 f81e 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d0:	230f      	movs	r3, #15
 80019d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d4:	2302      	movs	r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2102      	movs	r1, #2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fce7 	bl	80043c0 <HAL_RCC_ClockConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019f8:	f000 f808 	bl	8001a0c <Error_Handler>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	; 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>

08001a16 <motor_init>:
#include "motor.h"

void motor_init(struct Motor* motor,TIM_HandleTypeDef* htim, uint32_t PWM_CHANNEL, GPIO_TypeDef* FORWARD_PORT, GPIO_TypeDef* BACKWARD_PORT, uint16_t FORWARD_PIN, uint16_t BACKWARD_PIN){
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
	static _Bool tim = 0;
	motor->duty = 0;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
	motor->htim = htim;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	601a      	str	r2, [r3, #0]
	motor->PWM_CHANNEL = PWM_CHANNEL;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	605a      	str	r2, [r3, #4]
	motor->FORWARD_PORT = FORWARD_PORT;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	609a      	str	r2, [r3, #8]
	motor->BACKWARD_PORT = BACKWARD_PORT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	60da      	str	r2, [r3, #12]
	motor->FORWARD_PIN = FORWARD_PIN;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8bba      	ldrh	r2, [r7, #28]
 8001a48:	821a      	strh	r2, [r3, #16]
	motor->BACKWARD_PIN = BACKWARD_PIN;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8c3a      	ldrh	r2, [r7, #32]
 8001a4e:	825a      	strh	r2, [r3, #18]

	HAL_TIM_PWM_Start(motor->htim, PWM_CHANNEL);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fbf0 	bl	800523c <HAL_TIM_PWM_Start>

	motor_stop(motor);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f832 	bl	8001ac6 <motor_stop>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <motor_set_direction>:
//	motor->duty = duty;
//	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, abs(duty));
//}

void motor_set_direction(struct Motor* motor, _Bool direction)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
	if(direction)
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <motor_set_direction+0x34>
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6898      	ldr	r0, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	8a1b      	ldrh	r3, [r3, #16]
 8001a84:	2200      	movs	r2, #0
 8001a86:	4619      	mov	r1, r3
 8001a88:	f001 fc76 	bl	8003378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68d8      	ldr	r0, [r3, #12]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	8a5b      	ldrh	r3, [r3, #18]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	f001 fc6e 	bl	8003378 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 1);
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
	}
}
 8001a9c:	e00f      	b.n	8001abe <motor_set_direction+0x54>
		HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6898      	ldr	r0, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	8a1b      	ldrh	r3, [r3, #16]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f001 fc65 	bl	8003378 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68d8      	ldr	r0, [r3, #12]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8a5b      	ldrh	r3, [r3, #18]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f001 fc5d 	bl	8003378 <HAL_GPIO_WritePin>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <motor_stop>:

void motor_stop(struct Motor* motor)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->FORWARD_PORT, motor->FORWARD_PIN, 0);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6898      	ldr	r0, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	8a1b      	ldrh	r3, [r3, #16]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f001 fc4d 	bl	8003378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->BACKWARD_PORT, motor->BACKWARD_PIN, 0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68d8      	ldr	r0, [r3, #12]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	8a5b      	ldrh	r3, [r3, #18]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f001 fc45 	bl	8003378 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <motor_stop+0x3c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b00:	e02c      	b.n	8001b5c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d105      	bne.n	8001b16 <motor_stop+0x50>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b14:	e022      	b.n	8001b5c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b08      	cmp	r3, #8
 8001b1c:	d105      	bne.n	8001b2a <motor_stop+0x64>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b28:	e018      	b.n	8001b5c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d105      	bne.n	8001b3e <motor_stop+0x78>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b3c:	e00e      	b.n	8001b5c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d105      	bne.n	8001b52 <motor_stop+0x8c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001b50:	e004      	b.n	8001b5c <motor_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, 0);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <motor_move>:

void motor_move(struct Motor* motor, float duty)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	ed87 0a00 	vstr	s0, [r7]
	motor->duty = duty;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	615a      	str	r2, [r3, #20]
	if(motor->duty > 0)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b84:	dd7b      	ble.n	8001c7e <motor_move+0x11a>
	{
		motor_set_direction(motor, 1);
 8001b86:	2101      	movs	r1, #1
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff ff6e 	bl	8001a6a <motor_set_direction>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, abs(motor->duty));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <motor_move+0x52>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba0:	ee17 3a90 	vmov	r3, s15
 8001ba4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ba8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb4:	e063      	b.n	8001c7e <motor_move+0x11a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d110      	bne.n	8001be0 <motor_move+0x7c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc8:	ee17 3a90 	vmov	r3, s15
 8001bcc:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001bd0:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	6393      	str	r3, [r2, #56]	; 0x38
 8001bde:	e04e      	b.n	8001c7e <motor_move+0x11a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d110      	bne.n	8001c0a <motor_move+0xa6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	edd3 7a05 	vldr	s15, [r3, #20]
 8001bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf2:	ee17 3a90 	vmov	r3, s15
 8001bf6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001bfa:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	460b      	mov	r3, r1
 8001c06:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c08:	e039      	b.n	8001c7e <motor_move+0x11a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d110      	bne.n	8001c34 <motor_move+0xd0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1c:	ee17 3a90 	vmov	r3, s15
 8001c20:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001c24:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	e024      	b.n	8001c7e <motor_move+0x11a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d110      	bne.n	8001c5e <motor_move+0xfa>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001c4e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c5c:	e00f      	b.n	8001c7e <motor_move+0x11a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c68:	ee17 3a90 	vmov	r3, s15
 8001c6c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001c70:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->duty < 0)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	d57b      	bpl.n	8001d86 <motor_move+0x222>
	{
		motor_set_direction(motor, 0);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff feea 	bl	8001a6a <motor_set_direction>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, abs(motor->duty));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10f      	bne.n	8001cbe <motor_move+0x15a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001cb0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
 8001cbc:	e063      	b.n	8001d86 <motor_move+0x222>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d110      	bne.n	8001ce8 <motor_move+0x184>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd0:	ee17 3a90 	vmov	r3, s15
 8001cd4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001cd8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	6393      	str	r3, [r2, #56]	; 0x38
 8001ce6:	e04e      	b.n	8001d86 <motor_move+0x222>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d110      	bne.n	8001d12 <motor_move+0x1ae>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfa:	ee17 3a90 	vmov	r3, s15
 8001cfe:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d02:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d10:	e039      	b.n	8001d86 <motor_move+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d110      	bne.n	8001d3c <motor_move+0x1d8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d24:	ee17 3a90 	vmov	r3, s15
 8001d28:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d2c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	460b      	mov	r3, r1
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	e024      	b.n	8001d86 <motor_move+0x222>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d110      	bne.n	8001d66 <motor_move+0x202>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d56:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	460b      	mov	r3, r1
 8001d62:	6593      	str	r3, [r2, #88]	; 0x58
 8001d64:	e00f      	b.n	8001d86 <motor_move+0x222>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d70:	ee17 3a90 	vmov	r3, s15
 8001d74:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001d78:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	460b      	mov	r3, r1
 8001d84:	65d3      	str	r3, [r2, #92]	; 0x5c
	}
	if(motor->duty == 0)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d94:	d15d      	bne.n	8001e52 <motor_move+0x2ee>
	{
		motor_stop(motor);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff fe95 	bl	8001ac6 <motor_stop>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10b      	bne.n	8001dbc <motor_move+0x258>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db4:	ee17 2a90 	vmov	r2, s15
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8001dba:	e04a      	b.n	8001e52 <motor_move+0x2ee>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d10b      	bne.n	8001ddc <motor_move+0x278>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd4:	ee17 3a90 	vmov	r3, s15
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dda:	e03a      	b.n	8001e52 <motor_move+0x2ee>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d10b      	bne.n	8001dfc <motor_move+0x298>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001dfa:	e02a      	b.n	8001e52 <motor_move+0x2ee>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d10b      	bne.n	8001e1c <motor_move+0x2b8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e14:	ee17 3a90 	vmov	r3, s15
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e1a:	e01a      	b.n	8001e52 <motor_move+0x2ee>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b10      	cmp	r3, #16
 8001e22:	d10b      	bne.n	8001e3c <motor_move+0x2d8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001e3a:	e00a      	b.n	8001e52 <motor_move+0x2ee>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->PWM_CHANNEL, motor->duty);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <robot_init>:
#include "robot.h"

void robot_init(struct Robot* robot, float position, float orientation)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b085      	sub	sp, #20
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e66:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->previous_position = position;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	605a      	str	r2, [r3, #4]
	robot->position = position;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	601a      	str	r2, [r3, #0]
	robot->orientation = orientation;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
	robot->previous_orientation = orientation;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	60da      	str	r2, [r3, #12]
	robot->linear_velocity = 0;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
	robot->angular_velocity = 0;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <robot_linear_update>:

void robot_linear_update(struct Robot* robot, float measurement, float time)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	ed87 0a02 	vstr	s0, [r7, #8]
 8001eaa:	edc7 0a01 	vstr	s1, [r7, #4]
	robot->position = measurement;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	601a      	str	r2, [r3, #0]
	robot->linear_velocity = (robot->position - robot->previous_position )/time;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ec4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edc3 7a04 	vstr	s15, [r3, #16]
	robot->previous_position = robot->position;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	605a      	str	r2, [r3, #4]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <robot_set_end_position>:
	robot->angular_velocity = (robot->previous_orientation - robot->orientation)/time;
	robot->previous_orientation = robot->orientation;
}

void robot_set_end_position(struct Robot* robot, float end_position)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	ed87 0a00 	vstr	s0, [r7]
	robot->end_position = end_position;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	619a      	str	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <robot_error>:

float robot_error(struct Robot* robot)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	return robot->end_position - robot->position;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	edd3 7a00 	vldr	s15, [r3]
 8001f18:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_MspInit+0x44>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <HAL_MspInit+0x44>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <HAL_MspInit+0x44>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_MspInit+0x44>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <HAL_MspInit+0x44>)
 8001f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_MspInit+0x44>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc0:	f000 fe2e 	bl	8002c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM1_CC_IRQHandler+0x10>)
 8001fce:	f003 fd15 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000350 	.word	0x20000350

08001fdc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM3_IRQHandler+0x10>)
 8001fe2:	f003 fd0b 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200003e8 	.word	0x200003e8

08001ff0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <TIM4_IRQHandler+0x10>)
 8001ff6:	f003 fd01 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000434 	.word	0x20000434

08002004 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002008:	4802      	ldr	r0, [pc, #8]	; (8002014 <USART3_IRQHandler+0x10>)
 800200a:	f004 ffef 	bl	8006fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200004cc 	.word	0x200004cc

08002018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
	return 1;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_kill>:

int _kill(int pid, int sig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002032:	f006 fcab 	bl	800898c <__errno>
 8002036:	4603      	mov	r3, r0
 8002038:	2216      	movs	r2, #22
 800203a:	601a      	str	r2, [r3, #0]
	return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_exit>:

void _exit (int status)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffe7 	bl	8002028 <_kill>
	while (1) {}		/* Make sure we hang here */
 800205a:	e7fe      	b.n	800205a <_exit+0x12>

0800205c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e00a      	b.n	8002084 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800206e:	f3af 8000 	nop.w
 8002072:	4601      	mov	r1, r0
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60ba      	str	r2, [r7, #8]
 800207a:	b2ca      	uxtb	r2, r1
 800207c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	3301      	adds	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	429a      	cmp	r2, r3
 800208a:	dbf0      	blt.n	800206e <_read+0x12>
	}

return len;
 800208c:	687b      	ldr	r3, [r7, #4]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e009      	b.n	80020bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	60ba      	str	r2, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf1      	blt.n	80020a8 <_write+0x12>
	}
	return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_close>:

int _close(int file)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
	return -1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020f6:	605a      	str	r2, [r3, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <_isatty>:

int _isatty(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
	return 0;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002140:	4a14      	ldr	r2, [pc, #80]	; (8002194 <_sbrk+0x5c>)
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <_sbrk+0x60>)
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <_sbrk+0x64>)
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <_sbrk+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002168:	f006 fc10 	bl	800898c <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e009      	b.n	800218c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a05      	ldr	r2, [pc, #20]	; (800219c <_sbrk+0x64>)
 8002188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20050000 	.word	0x20050000
 8002198:	00000400 	.word	0x00000400
 800219c:	2000034c 	.word	0x2000034c
 80021a0:	20000a70 	.word	0x20000a70

080021a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <SystemInit+0x20>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <SystemInit+0x20>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fa:	463b      	mov	r3, r7
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <MX_TIM1_Init+0x140>)
 8002206:	4a41      	ldr	r2, [pc, #260]	; (800230c <MX_TIM1_Init+0x144>)
 8002208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <MX_TIM1_Init+0x140>)
 800220c:	2247      	movs	r2, #71	; 0x47
 800220e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <MX_TIM1_Init+0x140>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002216:	4b3c      	ldr	r3, [pc, #240]	; (8002308 <MX_TIM1_Init+0x140>)
 8002218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <MX_TIM1_Init+0x140>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <MX_TIM1_Init+0x140>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <MX_TIM1_Init+0x140>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002230:	4835      	ldr	r0, [pc, #212]	; (8002308 <MX_TIM1_Init+0x140>)
 8002232:	f002 fedb 	bl	8004fec <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800223c:	f7ff fbe6 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224a:	4619      	mov	r1, r3
 800224c:	482e      	ldr	r0, [pc, #184]	; (8002308 <MX_TIM1_Init+0x140>)
 800224e:	f003 fea5 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002258:	f7ff fbd8 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800225c:	482a      	ldr	r0, [pc, #168]	; (8002308 <MX_TIM1_Init+0x140>)
 800225e:	f003 f8e7 	bl	8005430 <HAL_TIM_IC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002268:	f7ff fbd0 	bl	8001a0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800226c:	2304      	movs	r3, #4
 800226e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002270:	2350      	movs	r3, #80	; 0x50
 8002272:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4820      	ldr	r0, [pc, #128]	; (8002308 <MX_TIM1_Init+0x140>)
 8002288:	f003 ff52 	bl	8006130 <HAL_TIM_SlaveConfigSynchro>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8002292:	f7ff fbbb 	bl	8001a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800229a:	2301      	movs	r3, #1
 800229c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	2200      	movs	r2, #0
 80022ac:	4619      	mov	r1, r3
 80022ae:	4816      	ldr	r0, [pc, #88]	; (8002308 <MX_TIM1_Init+0x140>)
 80022b0:	f003 fcc3 	bl	8005c3a <HAL_TIM_IC_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80022ba:	f7ff fba7 	bl	8001a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022be:	2302      	movs	r3, #2
 80022c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022c2:	2302      	movs	r3, #2
 80022c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2204      	movs	r2, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <MX_TIM1_Init+0x140>)
 80022d0:	f003 fcb3 	bl	8005c3a <HAL_TIM_IC_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80022da:	f7ff fb97 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <MX_TIM1_Init+0x140>)
 80022f0:	f004 fd3e 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80022fa:	f7ff fb87 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3740      	adds	r7, #64	; 0x40
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000350 	.word	0x20000350
 800230c:	40010000 	.word	0x40010000

08002310 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002316:	f107 031c 	add.w	r3, r7, #28
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002322:	463b      	mov	r3, r7
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
 8002330:	615a      	str	r2, [r3, #20]
 8002332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002334:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <MX_TIM2_Init+0xb0>)
 8002336:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800233a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <MX_TIM2_Init+0xb0>)
 800233e:	2247      	movs	r2, #71	; 0x47
 8002340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <MX_TIM2_Init+0xb0>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <MX_TIM2_Init+0xb0>)
 800234a:	f24f 4223 	movw	r2, #62499	; 0xf423
 800234e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_TIM2_Init+0xb0>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_TIM2_Init+0xb0>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <MX_TIM2_Init+0xb0>)
 800235e:	f002 ff15 	bl	800518c <HAL_TIM_PWM_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002368:	f7ff fb50 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4811      	ldr	r0, [pc, #68]	; (80023c0 <MX_TIM2_Init+0xb0>)
 800237c:	f004 fcf8 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002386:	f7ff fb41 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238a:	2360      	movs	r3, #96	; 0x60
 800238c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 800238e:	230a      	movs	r3, #10
 8002390:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800239a:	463b      	mov	r3, r7
 800239c:	2208      	movs	r2, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <MX_TIM2_Init+0xb0>)
 80023a2:	f003 fce7 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80023ac:	f7ff fb2e 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <MX_TIM2_Init+0xb0>)
 80023b2:	f000 fa17 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 80023b6:	bf00      	nop
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000039c 	.word	0x2000039c

080023c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e4:	463b      	mov	r3, r7
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
 80023f2:	615a      	str	r2, [r3, #20]
 80023f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023f6:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <MX_TIM3_Init+0xfc>)
 80023f8:	4a32      	ldr	r2, [pc, #200]	; (80024c4 <MX_TIM3_Init+0x100>)
 80023fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80023fc:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <MX_TIM3_Init+0xfc>)
 80023fe:	2247      	movs	r2, #71	; 0x47
 8002400:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002402:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <MX_TIM3_Init+0xfc>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002408:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <MX_TIM3_Init+0xfc>)
 800240a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800240e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <MX_TIM3_Init+0xfc>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <MX_TIM3_Init+0xfc>)
 8002418:	2280      	movs	r2, #128	; 0x80
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800241c:	4828      	ldr	r0, [pc, #160]	; (80024c0 <MX_TIM3_Init+0xfc>)
 800241e:	f002 fde5 	bl	8004fec <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002428:	f7ff faf0 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002432:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002436:	4619      	mov	r1, r3
 8002438:	4821      	ldr	r0, [pc, #132]	; (80024c0 <MX_TIM3_Init+0xfc>)
 800243a:	f003 fdaf 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002444:	f7ff fae2 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002448:	481d      	ldr	r0, [pc, #116]	; (80024c0 <MX_TIM3_Init+0xfc>)
 800244a:	f002 fe9f 	bl	800518c <HAL_TIM_PWM_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002454:	f7ff fada 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	4816      	ldr	r0, [pc, #88]	; (80024c0 <MX_TIM3_Init+0xfc>)
 8002468:	f004 fc82 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002472:	f7ff facb 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002476:	2360      	movs	r3, #96	; 0x60
 8002478:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002486:	463b      	mov	r3, r7
 8002488:	2200      	movs	r2, #0
 800248a:	4619      	mov	r1, r3
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <MX_TIM3_Init+0xfc>)
 800248e:	f003 fc71 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002498:	f7ff fab8 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800249c:	463b      	mov	r3, r7
 800249e:	2204      	movs	r2, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4807      	ldr	r0, [pc, #28]	; (80024c0 <MX_TIM3_Init+0xfc>)
 80024a4:	f003 fc66 	bl	8005d74 <HAL_TIM_PWM_ConfigChannel>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80024ae:	f7ff faad 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024b2:	4803      	ldr	r0, [pc, #12]	; (80024c0 <MX_TIM3_Init+0xfc>)
 80024b4:	f000 f996 	bl	80027e4 <HAL_TIM_MspPostInit>

}
 80024b8:	bf00      	nop
 80024ba:	3738      	adds	r7, #56	; 0x38
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200003e8 	.word	0x200003e8
 80024c4:	40000400 	.word	0x40000400

080024c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0310 	add.w	r3, r7, #16
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <MX_TIM4_Init+0x94>)
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <MX_TIM4_Init+0x98>)
 80024ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <MX_TIM4_Init+0x94>)
 80024ee:	2247      	movs	r2, #71	; 0x47
 80024f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_TIM4_Init+0x94>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <MX_TIM4_Init+0x94>)
 80024fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80024fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002500:	4b16      	ldr	r3, [pc, #88]	; (800255c <MX_TIM4_Init+0x94>)
 8002502:	2200      	movs	r2, #0
 8002504:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002506:	4b15      	ldr	r3, [pc, #84]	; (800255c <MX_TIM4_Init+0x94>)
 8002508:	2200      	movs	r2, #0
 800250a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800250c:	4813      	ldr	r0, [pc, #76]	; (800255c <MX_TIM4_Init+0x94>)
 800250e:	f002 fd6d 	bl	8004fec <HAL_TIM_Base_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002518:	f7ff fa78 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	4619      	mov	r1, r3
 8002528:	480c      	ldr	r0, [pc, #48]	; (800255c <MX_TIM4_Init+0x94>)
 800252a:	f003 fd37 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002534:	f7ff fa6a 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <MX_TIM4_Init+0x94>)
 8002546:	f004 fc13 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002550:	f7ff fa5c 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000434 	.word	0x20000434
 8002560:	40000800 	.word	0x40000800

08002564 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	; 0x30
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f006 fa34 	bl	80089e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <MX_TIM8_Init+0xac>)
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <MX_TIM8_Init+0xb0>)
 8002586:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <MX_TIM8_Init+0xac>)
 800258a:	2200      	movs	r2, #0
 800258c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <MX_TIM8_Init+0xac>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 29;
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <MX_TIM8_Init+0xac>)
 8002596:	221d      	movs	r2, #29
 8002598:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <MX_TIM8_Init+0xac>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_TIM8_Init+0xac>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_TIM8_Init+0xac>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025c0:	2300      	movs	r3, #0
 80025c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025c4:	2301      	movs	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	4619      	mov	r1, r3
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <MX_TIM8_Init+0xac>)
 80025d8:	f003 f8dc 	bl	8005794 <HAL_TIM_Encoder_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80025e2:	f7ff fa13 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e6:	2300      	movs	r3, #0
 80025e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_TIM8_Init+0xac>)
 80025f8:	f004 fbba 	bl	8006d70 <HAL_TIMEx_MasterConfigSynchronization>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8002602:	f7ff fa03 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000480 	.word	0x20000480
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08c      	sub	sp, #48	; 0x30
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <HAL_TIM_Base_MspInit+0xf4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d131      	bne.n	800269e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b32      	ldr	r3, [pc, #200]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	61bb      	str	r3, [r7, #24]
 8002650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a2e      	ldr	r2, [pc, #184]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800266a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	4823      	ldr	r0, [pc, #140]	; (8002714 <HAL_TIM_Base_MspInit+0xfc>)
 8002688:	f000 fcb2 	bl	8002ff0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	201b      	movs	r0, #27
 8002692:	f000 fbe4 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002696:	201b      	movs	r0, #27
 8002698:	f000 fbfd 	bl	8002e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800269c:	e032      	b.n	8002704 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM3)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <HAL_TIM_Base_MspInit+0x100>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d114      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	6413      	str	r3, [r2, #64]	; 0x40
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	2100      	movs	r1, #0
 80026c4:	201d      	movs	r0, #29
 80026c6:	f000 fbca 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026ca:	201d      	movs	r0, #29
 80026cc:	f000 fbe3 	bl	8002e96 <HAL_NVIC_EnableIRQ>
}
 80026d0:	e018      	b.n	8002704 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM4)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_TIM_Base_MspInit+0x104>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d113      	bne.n	8002704 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a0b      	ldr	r2, [pc, #44]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_TIM_Base_MspInit+0xf8>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	201e      	movs	r0, #30
 80026fa:	f000 fbb0 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026fe:	201e      	movs	r0, #30
 8002700:	f000 fbc9 	bl	8002e96 <HAL_NVIC_EnableIRQ>
}
 8002704:	bf00      	nop
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010000 	.word	0x40010000
 8002710:	40023800 	.word	0x40023800
 8002714:	40021000 	.word	0x40021000
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800

08002720 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002730:	d10b      	bne.n	800274a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_TIM_PWM_MspInit+0x38>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_TIM_PWM_MspInit+0x38>)
 8002738:	f043 0301 	orr.w	r3, r3, #1
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_TIM_PWM_MspInit+0x38>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d127      	bne.n	80027ce <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6453      	str	r3, [r2, #68]	; 0x44
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_TIM_Encoder_MspInit+0x80>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80027be:	2303      	movs	r3, #3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <HAL_TIM_Encoder_MspInit+0x84>)
 80027ca:	f000 fc11 	bl	8002ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80027ce:	bf00      	nop
 80027d0:	3728      	adds	r7, #40	; 0x28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40010400 	.word	0x40010400
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020800 	.word	0x40020800

080027e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002804:	d11d      	bne.n	8002842 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800281e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002830:	2301      	movs	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4823      	ldr	r0, [pc, #140]	; (80028c8 <HAL_TIM_MspPostInit+0xe4>)
 800283c:	f000 fbd8 	bl	8002ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002840:	e03c      	b.n	80028bc <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a21      	ldr	r2, [pc, #132]	; (80028cc <HAL_TIM_MspPostInit+0xe8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d137      	bne.n	80028bc <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_TIM_MspPostInit+0xe0>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800287c:	2340      	movs	r3, #64	; 0x40
 800287e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800288c:	2302      	movs	r3, #2
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	480e      	ldr	r0, [pc, #56]	; (80028d0 <HAL_TIM_MspPostInit+0xec>)
 8002898:	f000 fbaa 	bl	8002ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800289c:	2320      	movs	r3, #32
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028ac:	2302      	movs	r3, #2
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4804      	ldr	r0, [pc, #16]	; (80028c8 <HAL_TIM_MspPostInit+0xe4>)
 80028b8:	f000 fb9a 	bl	8002ff0 <HAL_GPIO_Init>
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40020000 	.word	0x40020000

080028d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80028d8:	4b14      	ldr	r3, [pc, #80]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028da:	4a15      	ldr	r2, [pc, #84]	; (8002930 <MX_USART3_UART_Init+0x5c>)
 80028dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028de:	4b13      	ldr	r3, [pc, #76]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b0e      	ldr	r3, [pc, #56]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_USART3_UART_Init+0x58>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b0b      	ldr	r3, [pc, #44]	; (800292c <MX_USART3_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_USART3_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800290a:	4b08      	ldr	r3, [pc, #32]	; (800292c <MX_USART3_UART_Init+0x58>)
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <MX_USART3_UART_Init+0x58>)
 8002912:	2200      	movs	r2, #0
 8002914:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <MX_USART3_UART_Init+0x58>)
 8002918:	f004 fad6 	bl	8006ec8 <HAL_UART_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002922:	f7ff f873 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200004cc 	.word	0x200004cc
 8002930:	40004800 	.word	0x40004800

08002934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0aa      	sub	sp, #168	; 0xa8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
 8002948:	60da      	str	r2, [r3, #12]
 800294a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	2284      	movs	r2, #132	; 0x84
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f006 f843 	bl	80089e0 <memset>
  if(uartHandle->Instance==USART3)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a26      	ldr	r2, [pc, #152]	; (80029f8 <HAL_UART_MspInit+0xc4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d144      	bne.n	80029ee <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800296a:	2300      	movs	r3, #0
 800296c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4618      	mov	r0, r3
 8002974:	f001 ff4a 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800297e:	f7ff f845 	bl	8001a0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002982:	4b1e      	ldr	r3, [pc, #120]	; (80029fc <HAL_UART_MspInit+0xc8>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <HAL_UART_MspInit+0xc8>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <HAL_UART_MspInit+0xc8>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0xc8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_UART_MspInit+0xc8>)
 80029a0:	f043 0308 	orr.w	r3, r3, #8
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0xc8>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ba:	2302      	movs	r3, #2
 80029bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c6:	2303      	movs	r3, #3
 80029c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029cc:	2307      	movs	r3, #7
 80029ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029d6:	4619      	mov	r1, r3
 80029d8:	4809      	ldr	r0, [pc, #36]	; (8002a00 <HAL_UART_MspInit+0xcc>)
 80029da:	f000 fb09 	bl	8002ff0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029de:	2200      	movs	r2, #0
 80029e0:	2100      	movs	r1, #0
 80029e2:	2027      	movs	r0, #39	; 0x27
 80029e4:	f000 fa3b 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029e8:	2027      	movs	r0, #39	; 0x27
 80029ea:	f000 fa54 	bl	8002e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80029ee:	bf00      	nop
 80029f0:	37a8      	adds	r7, #168	; 0xa8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40004800 	.word	0x40004800
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020c00 	.word	0x40020c00

08002a04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a12:	2206      	movs	r2, #6
 8002a14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a18:	2202      	movs	r2, #2
 8002a1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a34:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a46:	4805      	ldr	r0, [pc, #20]	; (8002a5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002a48:	f001 f8bd 	bl	8003bc6 <HAL_PCD_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002a52:	f7fe ffdb 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000554 	.word	0x20000554

08002a60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0ac      	sub	sp, #176	; 0xb0
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2284      	movs	r2, #132	; 0x84
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 ffad 	bl	80089e0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8e:	d159      	bne.n	8002b44 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 feb3 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002aac:	f7fe ffae 	bl	8001a0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b26      	ldr	r3, [pc, #152]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6313      	str	r3, [r2, #48]	; 0x30
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ac8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ae2:	230a      	movs	r3, #10
 8002ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aec:	4619      	mov	r1, r3
 8002aee:	4818      	ldr	r0, [pc, #96]	; (8002b50 <HAL_PCD_MspInit+0xf0>)
 8002af0:	f000 fa7e 	bl	8002ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002b08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4810      	ldr	r0, [pc, #64]	; (8002b50 <HAL_PCD_MspInit+0xf0>)
 8002b10:	f000 fa6e 	bl	8002ff0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	6353      	str	r3, [r2, #52]	; 0x34
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b36:	6453      	str	r3, [r2, #68]	; 0x44
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_PCD_MspInit+0xec>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b44:	bf00      	nop
 8002b46:	37b0      	adds	r7, #176	; 0xb0
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000

08002b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b58:	480d      	ldr	r0, [pc, #52]	; (8002b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b5a:	490e      	ldr	r1, [pc, #56]	; (8002b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b70:	4c0b      	ldr	r4, [pc, #44]	; (8002ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b7e:	f7ff fb11 	bl	80021a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b82:	f005 ff09 	bl	8008998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b86:	f7fe fe19 	bl	80017bc <main>
  bx  lr    
 8002b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002b98:	0800c5f8 	.word	0x0800c5f8
  ldr r2, =_sbss
 8002b9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ba0:	20000a70 	.word	0x20000a70

08002ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC_IRQHandler>

08002ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002baa:	2003      	movs	r0, #3
 8002bac:	f000 f94c 	bl	8002e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f000 f805 	bl	8002bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb6:	f7ff f9b9 	bl	8001f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_InitTick+0x54>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x58>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f967 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f000 f92f 	bl	8002e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	; (8002c1c <HAL_InitTick+0x5c>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000004 	.word	0x20000004
 8002c18:	2000000c 	.word	0x2000000c
 8002c1c:	20000008 	.word	0x20000008

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	2000000c 	.word	0x2000000c
 8002c44:	20000a5c 	.word	0x20000a5c

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000a5c 	.word	0x20000a5c

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e000ed00 	.word	0xe000ed00
 8002cec:	05fa0000 	.word	0x05fa0000

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e14:	d301      	bcc.n	8002e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SysTick_Config+0x40>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e22:	210f      	movs	r1, #15
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f7ff ff8e 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SysTick_Config+0x40>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SysTick_Config+0x40>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000e010 	.word	0xe000e010

08002e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff29 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff3e 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff8e 	bl	8002d9c <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5d 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff31 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffa2 	bl	8002e04 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff feb6 	bl	8002c48 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d008      	beq.n	8002efc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2280      	movs	r2, #128	; 0x80
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e052      	b.n	8002fa2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0216 	bic.w	r2, r2, #22
 8002f0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <HAL_DMA_Abort+0x62>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0208 	bic.w	r2, r2, #8
 8002f3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4c:	e013      	b.n	8002f76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f4e:	f7ff fe7b 	bl	8002c48 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d90c      	bls.n	8002f76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2203      	movs	r2, #3
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e015      	b.n	8002fa2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e4      	bne.n	8002f4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	223f      	movs	r2, #63	; 0x3f
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2280      	movs	r2, #128	; 0x80
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e00c      	b.n	8002fe2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2205      	movs	r2, #5
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0201 	bic.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e175      	b.n	80032fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 8164 	bne.w	80032f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x56>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80be 	beq.w	80032f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_GPIO_Init+0x324>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_GPIO_Init+0x324>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003192:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_GPIO_Init+0x328>)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	3302      	adds	r3, #2
 800319a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a58      	ldr	r2, [pc, #352]	; (800331c <HAL_GPIO_Init+0x32c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d037      	beq.n	800322e <HAL_GPIO_Init+0x23e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_GPIO_Init+0x330>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d031      	beq.n	800322a <HAL_GPIO_Init+0x23a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a56      	ldr	r2, [pc, #344]	; (8003324 <HAL_GPIO_Init+0x334>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <HAL_GPIO_Init+0x236>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a55      	ldr	r2, [pc, #340]	; (8003328 <HAL_GPIO_Init+0x338>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d025      	beq.n	8003222 <HAL_GPIO_Init+0x232>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a54      	ldr	r2, [pc, #336]	; (800332c <HAL_GPIO_Init+0x33c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x22e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_GPIO_Init+0x340>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d019      	beq.n	800321a <HAL_GPIO_Init+0x22a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_GPIO_Init+0x344>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_GPIO_Init+0x226>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a51      	ldr	r2, [pc, #324]	; (8003338 <HAL_GPIO_Init+0x348>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00d      	beq.n	8003212 <HAL_GPIO_Init+0x222>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_GPIO_Init+0x34c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x21e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4f      	ldr	r2, [pc, #316]	; (8003340 <HAL_GPIO_Init+0x350>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d101      	bne.n	800320a <HAL_GPIO_Init+0x21a>
 8003206:	2309      	movs	r3, #9
 8003208:	e012      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320a:	230a      	movs	r3, #10
 800320c:	e010      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800320e:	2308      	movs	r3, #8
 8003210:	e00e      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003212:	2307      	movs	r3, #7
 8003214:	e00c      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003216:	2306      	movs	r3, #6
 8003218:	e00a      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321a:	2305      	movs	r3, #5
 800321c:	e008      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800321e:	2304      	movs	r3, #4
 8003220:	e006      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003222:	2303      	movs	r3, #3
 8003224:	e004      	b.n	8003230 <HAL_GPIO_Init+0x240>
 8003226:	2302      	movs	r3, #2
 8003228:	e002      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x240>
 800322e:	2300      	movs	r3, #0
 8003230:	69fa      	ldr	r2, [r7, #28]
 8003232:	f002 0203 	and.w	r2, r2, #3
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	4093      	lsls	r3, r2
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003240:	4935      	ldr	r1, [pc, #212]	; (8003318 <HAL_GPIO_Init+0x328>)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	089b      	lsrs	r3, r3, #2
 8003246:	3302      	adds	r3, #2
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_GPIO_Init+0x354>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <HAL_GPIO_Init+0x354>)
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003278:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_GPIO_Init+0x354>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800329c:	4a29      	ldr	r2, [pc, #164]	; (8003344 <HAL_GPIO_Init+0x354>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a2:	4b28      	ldr	r3, [pc, #160]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032c6:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032cc:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	4013      	ands	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <HAL_GPIO_Init+0x354>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b0f      	cmp	r3, #15
 8003300:	f67f ae86 	bls.w	8003010 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40013800 	.word	0x40013800
 800331c:	40020000 	.word	0x40020000
 8003320:	40020400 	.word	0x40020400
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	40021000 	.word	0x40021000
 8003330:	40021400 	.word	0x40021400
 8003334:	40021800 	.word	0x40021800
 8003338:	40021c00 	.word	0x40021c00
 800333c:	40022000 	.word	0x40022000
 8003340:	40022400 	.word	0x40022400
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e001      	b.n	800336a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
 8003384:	4613      	mov	r3, r2
 8003386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003388:	787b      	ldrb	r3, [r7, #1]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003394:	e003      	b.n	800339e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	041a      	lsls	r2, r3, #16
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	619a      	str	r2, [r3, #24]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd ffa0 	bl	8001318 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2224      	movs	r2, #36	; 0x24
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800340c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d107      	bne.n	8003426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e006      	b.n	8003434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d104      	bne.n	8003446 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_I2C_Init+0x11c>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69d9      	ldr	r1, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1a      	ldr	r2, [r3, #32]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	02008000 	.word	0x02008000

080034cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	461a      	mov	r2, r3
 80034d8:	460b      	mov	r3, r1
 80034da:	817b      	strh	r3, [r7, #10]
 80034dc:	4613      	mov	r3, r2
 80034de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	f040 80da 	bne.w	80036a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2C_Master_Transmit+0x30>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0d3      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003504:	f7ff fba0 	bl	8002c48 <HAL_GetTick>
 8003508:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2319      	movs	r3, #25
 8003510:	2201      	movs	r2, #1
 8003512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f8f0 	bl	80036fc <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0be      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2210      	movs	r2, #16
 8003532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	893a      	ldrh	r2, [r7, #8]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003552:	b29b      	uxth	r3, r3
 8003554:	2bff      	cmp	r3, #255	; 0xff
 8003556:	d90e      	bls.n	8003576 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	; 0xff
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003562:	b2da      	uxtb	r2, r3
 8003564:	8979      	ldrh	r1, [r7, #10]
 8003566:	4b51      	ldr	r3, [pc, #324]	; (80036ac <HAL_I2C_Master_Transmit+0x1e0>)
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fa60 	bl	8003a34 <I2C_TransferConfig>
 8003574:	e06c      	b.n	8003650 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003584:	b2da      	uxtb	r2, r3
 8003586:	8979      	ldrh	r1, [r7, #10]
 8003588:	4b48      	ldr	r3, [pc, #288]	; (80036ac <HAL_I2C_Master_Transmit+0x1e0>)
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fa4f 	bl	8003a34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003596:	e05b      	b.n	8003650 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f8ed 	bl	800377c <I2C_WaitOnTXISFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e07b      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d034      	beq.n	8003650 <HAL_I2C_Master_Transmit+0x184>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d130      	bne.n	8003650 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	2200      	movs	r2, #0
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f87f 	bl	80036fc <I2C_WaitOnFlagUntilTimeout>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e04d      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2bff      	cmp	r3, #255	; 0xff
 8003610:	d90e      	bls.n	8003630 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	b2da      	uxtb	r2, r3
 800361e:	8979      	ldrh	r1, [r7, #10]
 8003620:	2300      	movs	r3, #0
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa03 	bl	8003a34 <I2C_TransferConfig>
 800362e:	e00f      	b.n	8003650 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	b2da      	uxtb	r2, r3
 8003640:	8979      	ldrh	r1, [r7, #10]
 8003642:	2300      	movs	r3, #0
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f9f2 	bl	8003a34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d19e      	bne.n	8003598 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f8cc 	bl	80037fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e01a      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2220      	movs	r2, #32
 8003674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003682:	400b      	ands	r3, r1
 8003684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e000      	b.n	80036a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
  }
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	80002000 	.word	0x80002000
 80036b0:	fe00e800 	.word	0xfe00e800

080036b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d103      	bne.n	80036d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d007      	beq.n	80036f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	619a      	str	r2, [r3, #24]
  }
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370c:	e022      	b.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d01e      	beq.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7ff fa97 	bl	8002c48 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d113      	bne.n	8003754 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0220 	orr.w	r2, r3, #32
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e00f      	b.n	8003774 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4013      	ands	r3, r2
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	79fb      	ldrb	r3, [r7, #7]
 800376e:	429a      	cmp	r2, r3
 8003770:	d0cd      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003788:	e02c      	b.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f870 	bl	8003874 <I2C_IsErrorOccurred>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e02a      	b.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a4:	d01e      	beq.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a6:	f7ff fa4f 	bl	8002c48 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d302      	bcc.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d113      	bne.n	80037e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c0:	f043 0220 	orr.w	r2, r3, #32
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e007      	b.n	80037f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d1cb      	bne.n	800378a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003808:	e028      	b.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f830 	bl	8003874 <I2C_IsErrorOccurred>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e026      	b.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7ff fa13 	bl	8002c48 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d113      	bne.n	800385c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b20      	cmp	r3, #32
 8003868:	d1cf      	bne.n	800380a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	; 0x28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d068      	beq.n	8003972 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2210      	movs	r2, #16
 80038a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038a8:	e049      	b.n	800393e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d045      	beq.n	800393e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7ff f9c9 	bl	8002c48 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_IsErrorOccurred+0x54>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d13a      	bne.n	800393e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ea:	d121      	bne.n	8003930 <I2C_IsErrorOccurred+0xbc>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038f2:	d01d      	beq.n	8003930 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d01a      	beq.n	8003930 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003908:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800390a:	f7ff f99d 	bl	8002c48 <HAL_GetTick>
 800390e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	e00e      	b.n	8003930 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003912:	f7ff f999 	bl	8002c48 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b19      	cmp	r3, #25
 800391e:	d907      	bls.n	8003930 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f043 0320 	orr.w	r3, r3, #32
 8003926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800392e:	e006      	b.n	800393e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d1e9      	bne.n	8003912 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d003      	beq.n	8003954 <I2C_IsErrorOccurred+0xe0>
 800394c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0aa      	beq.n	80038aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003958:	2b00      	cmp	r3, #0
 800395a:	d103      	bne.n	8003964 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2220      	movs	r2, #32
 8003962:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	f043 0308 	orr.w	r3, r3, #8
 80039ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	f043 0302 	orr.w	r3, r3, #2
 80039ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01c      	beq.n	8003a22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f7ff fe63 	bl	80036b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <I2C_IsErrorOccurred+0x1bc>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3728      	adds	r7, #40	; 0x28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	fe00e800 	.word	0xfe00e800

08003a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	4613      	mov	r3, r2
 8003a44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a46:	897b      	ldrh	r3, [r7, #10]
 8003a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a4c:	7a7b      	ldrb	r3, [r7, #9]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	0d5b      	lsrs	r3, r3, #21
 8003a6e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a72:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <I2C_TransferConfig+0x60>)
 8003a74:	430b      	orrs	r3, r1
 8003a76:	43db      	mvns	r3, r3
 8003a78:	ea02 0103 	and.w	r1, r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	03ff63ff 	.word	0x03ff63ff

08003a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d138      	bne.n	8003b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e032      	b.n	8003b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d139      	bne.n	8003bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e033      	b.n	8003bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2224      	movs	r2, #36	; 0x24
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e000      	b.n	8003bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003bb8:	2302      	movs	r3, #2
  }
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc8:	b08f      	sub	sp, #60	; 0x3c
 8003bca:	af0a      	add	r7, sp, #40	; 0x28
 8003bcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e116      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe ff34 	bl	8002a60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fc06 	bl	8008428 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	687e      	ldr	r6, [r7, #4]
 8003c24:	466d      	mov	r5, sp
 8003c26:	f106 0410 	add.w	r4, r6, #16
 8003c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c3a:	1d33      	adds	r3, r6, #4
 8003c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f004 fb9a 	bl	8008378 <USB_CoreInit>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0d7      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f004 fbf4 	bl	800844a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e04a      	b.n	8003cfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	333d      	adds	r3, #61	; 0x3d
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	333c      	adds	r3, #60	; 0x3c
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
 8003c94:	b298      	uxth	r0, r3
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3340      	adds	r3, #64	; 0x40
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3348      	adds	r3, #72	; 0x48
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	334c      	adds	r3, #76	; 0x4c
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3354      	adds	r3, #84	; 0x54
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	7bfa      	ldrb	r2, [r7, #15]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3af      	bcc.n	8003c68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e044      	b.n	8003d98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d50:	7bfa      	ldrb	r2, [r7, #15]
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	3301      	adds	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d3b5      	bcc.n	8003d0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	687e      	ldr	r6, [r7, #4]
 8003daa:	466d      	mov	r5, sp
 8003dac:	f106 0410 	add.w	r4, r6, #16
 8003db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003db8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dc0:	1d33      	adds	r3, r6, #4
 8003dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dc4:	6838      	ldr	r0, [r7, #0]
 8003dc6:	f004 fb8d 	bl	80084e4 <USB_DevInit>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e014      	b.n	8003e06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d102      	bne.n	8003dfa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f80b 	bl	8003e10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f004 fd4b 	bl	800889a <USB_DevDisconnect>

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_PCDEx_ActivateLPM+0x44>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3714      	adds	r7, #20
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	10000003 	.word	0x10000003

08003e58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e66:	6013      	str	r3, [r2, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e291      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8087 	beq.w	8003faa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d00c      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea8:	4b93      	ldr	r3, [pc, #588]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d112      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
 8003eb4:	4b90      	ldr	r3, [pc, #576]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec0:	d10b      	bne.n	8003eda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec2:	4b8d      	ldr	r3, [pc, #564]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d06c      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x130>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d168      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e26b      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x7a>
 8003ee4:	4b84      	ldr	r3, [pc, #528]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a83      	ldr	r2, [pc, #524]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	6013      	str	r3, [r2, #0]
 8003ef0:	e02e      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x9c>
 8003efa:	4b7f      	ldr	r3, [pc, #508]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a7e      	ldr	r2, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b7c      	ldr	r3, [pc, #496]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a7b      	ldr	r2, [pc, #492]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e01d      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0xc0>
 8003f1e:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a75      	ldr	r2, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b73      	ldr	r3, [pc, #460]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a72      	ldr	r2, [pc, #456]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0xd8>
 8003f38:	4b6f      	ldr	r3, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6b      	ldr	r2, [pc, #428]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fe fe76 	bl	8002c48 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f60:	f7fe fe72 	bl	8002c48 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e21f      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b61      	ldr	r3, [pc, #388]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0xe8>
 8003f7e:	e014      	b.n	8003faa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fe fe62 	bl	8002c48 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f88:	f7fe fe5e 	bl	8002c48 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e20b      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9a:	4b57      	ldr	r3, [pc, #348]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x110>
 8003fa6:	e000      	b.n	8003faa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d069      	beq.n	800408a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fb6:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc2:	4b4d      	ldr	r3, [pc, #308]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d11c      	bne.n	8004008 <HAL_RCC_OscConfig+0x190>
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x17a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1df      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	493d      	ldr	r1, [pc, #244]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004002:	4313      	orrs	r3, r2
 8004004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004006:	e040      	b.n	800408a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d023      	beq.n	8004058 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a38      	ldr	r2, [pc, #224]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7fe fe14 	bl	8002c48 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004024:	f7fe fe10 	bl	8002c48 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e1bd      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004042:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4929      	ldr	r1, [pc, #164]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]
 8004056:	e018      	b.n	800408a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fdf0 	bl	8002c48 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406c:	f7fe fdec 	bl	8002c48 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e199      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d038      	beq.n	8004108 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d019      	beq.n	80040d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 80040a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fe fdcd 	bl	8002c48 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040b2:	f7fe fdc9 	bl	8002c48 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e176      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040c4:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 80040c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x23a>
 80040d0:	e01a      	b.n	8004108 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 80040d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <HAL_RCC_OscConfig+0x280>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fe fdb3 	bl	8002c48 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fe fdaf 	bl	8002c48 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d903      	bls.n	80040fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e15c      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
 80040f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040fc:	4b91      	ldr	r3, [pc, #580]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80040fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ee      	bne.n	80040e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a4 	beq.w	800425e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004116:	4b8b      	ldr	r3, [pc, #556]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10d      	bne.n	800413e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	4b88      	ldr	r3, [pc, #544]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a87      	ldr	r2, [pc, #540]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b85      	ldr	r3, [pc, #532]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413a:	2301      	movs	r3, #1
 800413c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800413e:	4b82      	ldr	r3, [pc, #520]	; (8004348 <HAL_RCC_OscConfig+0x4d0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d118      	bne.n	800417c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800414a:	4b7f      	ldr	r3, [pc, #508]	; (8004348 <HAL_RCC_OscConfig+0x4d0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a7e      	ldr	r2, [pc, #504]	; (8004348 <HAL_RCC_OscConfig+0x4d0>)
 8004150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004156:	f7fe fd77 	bl	8002c48 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415e:	f7fe fd73 	bl	8002c48 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b64      	cmp	r3, #100	; 0x64
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e120      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004170:	4b75      	ldr	r3, [pc, #468]	; (8004348 <HAL_RCC_OscConfig+0x4d0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x31a>
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	4a6e      	ldr	r2, [pc, #440]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6713      	str	r3, [r2, #112]	; 0x70
 8004190:	e02d      	b.n	80041ee <HAL_RCC_OscConfig+0x376>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x33c>
 800419a:	4b6a      	ldr	r3, [pc, #424]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a69      	ldr	r2, [pc, #420]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	4b67      	ldr	r3, [pc, #412]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a66      	ldr	r2, [pc, #408]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
 80041b2:	e01c      	b.n	80041ee <HAL_RCC_OscConfig+0x376>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCC_OscConfig+0x35e>
 80041bc:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a60      	ldr	r2, [pc, #384]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041c2:	f043 0304 	orr.w	r3, r3, #4
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	4a5d      	ldr	r2, [pc, #372]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6713      	str	r3, [r2, #112]	; 0x70
 80041d4:	e00b      	b.n	80041ee <HAL_RCC_OscConfig+0x376>
 80041d6:	4b5b      	ldr	r3, [pc, #364]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a5a      	ldr	r2, [pc, #360]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041dc:	f023 0301 	bic.w	r3, r3, #1
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
 80041e2:	4b58      	ldr	r3, [pc, #352]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80041e8:	f023 0304 	bic.w	r3, r3, #4
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d015      	beq.n	8004222 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fe fd27 	bl	8002c48 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fe fd23 	bl	8002c48 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	; 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0ce      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004214:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0ee      	beq.n	80041fe <HAL_RCC_OscConfig+0x386>
 8004220:	e014      	b.n	800424c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fe fd11 	bl	8002c48 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004228:	e00a      	b.n	8004240 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fe fd0d 	bl	8002c48 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f241 3288 	movw	r2, #5000	; 0x1388
 8004238:	4293      	cmp	r3, r2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0b8      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004240:	4b40      	ldr	r3, [pc, #256]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ee      	bne.n	800422a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	4a3b      	ldr	r2, [pc, #236]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80a4 	beq.w	80043b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004268:	4b36      	ldr	r3, [pc, #216]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d06b      	beq.n	800434c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d149      	bne.n	8004310 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800427c:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a30      	ldr	r2, [pc, #192]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004288:	f7fe fcde 	bl	8002c48 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe fcda 	bl	8002c48 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e087      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	4b28      	ldr	r3, [pc, #160]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	3b01      	subs	r3, #1
 80042c8:	041b      	lsls	r3, r3, #16
 80042ca:	431a      	orrs	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	061b      	lsls	r3, r3, #24
 80042d2:	4313      	orrs	r3, r2
 80042d4:	4a1b      	ldr	r2, [pc, #108]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80042d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a18      	ldr	r2, [pc, #96]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe fcae 	bl	8002c48 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fcaa 	bl	8002c48 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e057      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	4b10      	ldr	r3, [pc, #64]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x478>
 800430e:	e04f      	b.n	80043b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431c:	f7fe fc94 	bl	8002c48 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe fc90 	bl	8002c48 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e03d      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	4b03      	ldr	r3, [pc, #12]	; (8004344 <HAL_RCC_OscConfig+0x4cc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x4ac>
 8004342:	e035      	b.n	80043b0 <HAL_RCC_OscConfig+0x538>
 8004344:	40023800 	.word	0x40023800
 8004348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_RCC_OscConfig+0x544>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d028      	beq.n	80043ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004364:	429a      	cmp	r2, r3
 8004366:	d121      	bne.n	80043ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d11a      	bne.n	80043ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800437c:	4013      	ands	r3, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004382:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	085b      	lsrs	r3, r3, #1
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004398:	429a      	cmp	r2, r3
 800439a:	d107      	bne.n	80043ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0d0      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 020f 	bic.w	r2, r3, #15
 80043ee:	4965      	ldr	r1, [pc, #404]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b63      	ldr	r3, [pc, #396]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0b8      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d020      	beq.n	8004456 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800442a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	4a52      	ldr	r2, [pc, #328]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800443e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b50      	ldr	r3, [pc, #320]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	494d      	ldr	r1, [pc, #308]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d040      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d107      	bne.n	800447a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b47      	ldr	r3, [pc, #284]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d115      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e07f      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d107      	bne.n	8004492 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004482:	4b41      	ldr	r3, [pc, #260]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e073      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004492:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06b      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f023 0203 	bic.w	r2, r3, #3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4936      	ldr	r1, [pc, #216]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b4:	f7fe fbc8 	bl	8002c48 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044bc:	f7fe fbc4 	bl	8002c48 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e053      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	4b2d      	ldr	r3, [pc, #180]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 020c 	and.w	r2, r3, #12
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d1eb      	bne.n	80044bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d210      	bcs.n	8004514 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f023 020f 	bic.w	r2, r3, #15
 80044fa:	4922      	ldr	r1, [pc, #136]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4313      	orrs	r3, r2
 8004500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004502:	4b20      	ldr	r3, [pc, #128]	; (8004584 <HAL_RCC_ClockConfig+0x1c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e032      	b.n	800457a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4916      	ldr	r1, [pc, #88]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800453e:	4b12      	ldr	r3, [pc, #72]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	490e      	ldr	r1, [pc, #56]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004552:	f000 f821 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8004556:	4602      	mov	r2, r0
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_ClockConfig+0x1c8>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	490a      	ldr	r1, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1cc>)
 8004564:	5ccb      	ldrb	r3, [r1, r3]
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1d0>)
 800456c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_RCC_ClockConfig+0x1d4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fb24 	bl	8002bc0 <HAL_InitTick>

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00
 8004588:	40023800 	.word	0x40023800
 800458c:	0800c1d8 	.word	0x0800c1d8
 8004590:	20000004 	.word	0x20000004
 8004594:	20000008 	.word	0x20000008

08004598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800459c:	b094      	sub	sp, #80	; 0x50
 800459e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
 80045a4:	2300      	movs	r3, #0
 80045a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045a8:	2300      	movs	r3, #0
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b0:	4b79      	ldr	r3, [pc, #484]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d00d      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0x40>
 80045bc:	2b08      	cmp	r3, #8
 80045be:	f200 80e1 	bhi.w	8004784 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x34>
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045ca:	e0db      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4b73      	ldr	r3, [pc, #460]	; (800479c <HAL_RCC_GetSysClockFreq+0x204>)
 80045ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d0:	e0db      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045d2:	4b73      	ldr	r3, [pc, #460]	; (80047a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80045d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045d6:	e0d8      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d8:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80045e2:	4b6d      	ldr	r3, [pc, #436]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d063      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	099b      	lsrs	r3, r3, #6
 80045f4:	2200      	movs	r2, #0
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80045f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
 8004602:	2300      	movs	r3, #0
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	f04f 0000 	mov.w	r0, #0
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	0159      	lsls	r1, r3, #5
 8004618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800461c:	0150      	lsls	r0, r2, #5
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4621      	mov	r1, r4
 8004624:	1a51      	subs	r1, r2, r1
 8004626:	6139      	str	r1, [r7, #16]
 8004628:	4629      	mov	r1, r5
 800462a:	eb63 0301 	sbc.w	r3, r3, r1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800463c:	4659      	mov	r1, fp
 800463e:	018b      	lsls	r3, r1, #6
 8004640:	4651      	mov	r1, sl
 8004642:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004646:	4651      	mov	r1, sl
 8004648:	018a      	lsls	r2, r1, #6
 800464a:	4651      	mov	r1, sl
 800464c:	ebb2 0801 	subs.w	r8, r2, r1
 8004650:	4659      	mov	r1, fp
 8004652:	eb63 0901 	sbc.w	r9, r3, r1
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004662:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004666:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800466a:	4690      	mov	r8, r2
 800466c:	4699      	mov	r9, r3
 800466e:	4623      	mov	r3, r4
 8004670:	eb18 0303 	adds.w	r3, r8, r3
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	462b      	mov	r3, r5
 8004678:	eb49 0303 	adc.w	r3, r9, r3
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800468a:	4629      	mov	r1, r5
 800468c:	024b      	lsls	r3, r1, #9
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004694:	4621      	mov	r1, r4
 8004696:	024a      	lsls	r2, r1, #9
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800469e:	2200      	movs	r2, #0
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a8:	f7fc fa9e 	bl	8000be8 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4613      	mov	r3, r2
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b4:	e058      	b.n	8004768 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b6:	4b38      	ldr	r3, [pc, #224]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	2200      	movs	r2, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	4611      	mov	r1, r2
 80046c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	2300      	movs	r3, #0
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046d0:	4642      	mov	r2, r8
 80046d2:	464b      	mov	r3, r9
 80046d4:	f04f 0000 	mov.w	r0, #0
 80046d8:	f04f 0100 	mov.w	r1, #0
 80046dc:	0159      	lsls	r1, r3, #5
 80046de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e2:	0150      	lsls	r0, r2, #5
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4641      	mov	r1, r8
 80046ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ee:	4649      	mov	r1, r9
 80046f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004700:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004704:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004708:	ebb2 040a 	subs.w	r4, r2, sl
 800470c:	eb63 050b 	sbc.w	r5, r3, fp
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	00eb      	lsls	r3, r5, #3
 800471a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471e:	00e2      	lsls	r2, r4, #3
 8004720:	4614      	mov	r4, r2
 8004722:	461d      	mov	r5, r3
 8004724:	4643      	mov	r3, r8
 8004726:	18e3      	adds	r3, r4, r3
 8004728:	603b      	str	r3, [r7, #0]
 800472a:	464b      	mov	r3, r9
 800472c:	eb45 0303 	adc.w	r3, r5, r3
 8004730:	607b      	str	r3, [r7, #4]
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800473e:	4629      	mov	r1, r5
 8004740:	028b      	lsls	r3, r1, #10
 8004742:	4621      	mov	r1, r4
 8004744:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004748:	4621      	mov	r1, r4
 800474a:	028a      	lsls	r2, r1, #10
 800474c:	4610      	mov	r0, r2
 800474e:	4619      	mov	r1, r3
 8004750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004752:	2200      	movs	r2, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	61fa      	str	r2, [r7, #28]
 8004758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800475c:	f7fc fa44 	bl	8000be8 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4613      	mov	r3, r2
 8004766:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004768:	4b0b      	ldr	r3, [pc, #44]	; (8004798 <HAL_RCC_GetSysClockFreq+0x200>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	3301      	adds	r3, #1
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004778:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800477a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004782:	e002      	b.n	800478a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_RCC_GetSysClockFreq+0x204>)
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800478a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800478c:	4618      	mov	r0, r3
 800478e:	3750      	adds	r7, #80	; 0x50
 8004790:	46bd      	mov	sp, r7
 8004792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	00f42400 	.word	0x00f42400
 80047a0:	007a1200 	.word	0x007a1200

080047a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000004 	.word	0x20000004

080047bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047c0:	f7ff fff0 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0a9b      	lsrs	r3, r3, #10
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4903      	ldr	r1, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	0800c1e8 	.word	0x0800c1e8

080047e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047e8:	f7ff ffdc 	bl	80047a4 <HAL_RCC_GetHCLKFreq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0b5b      	lsrs	r3, r3, #13
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	4903      	ldr	r1, [pc, #12]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047fa:	5ccb      	ldrb	r3, [r1, r3]
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40023800 	.word	0x40023800
 8004808:	0800c1e8 	.word	0x0800c1e8

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004834:	4b69      	ldr	r3, [pc, #420]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a68      	ldr	r2, [pc, #416]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	4b66      	ldr	r3, [pc, #408]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	4964      	ldr	r1, [pc, #400]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004856:	2301      	movs	r3, #1
 8004858:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d017      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004866:	4b5d      	ldr	r3, [pc, #372]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800486c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	4959      	ldr	r1, [pc, #356]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004884:	d101      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004886:	2301      	movs	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004892:	2301      	movs	r3, #1
 8004894:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d017      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048a2:	4b4e      	ldr	r3, [pc, #312]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	494a      	ldr	r1, [pc, #296]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80048de:	2301      	movs	r3, #1
 80048e0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 808b 	beq.w	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	4a39      	ldr	r2, [pc, #228]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6413      	str	r3, [r2, #64]	; 0x40
 80048fc:	4b37      	ldr	r3, [pc, #220]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a34      	ldr	r2, [pc, #208]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004914:	f7fe f998 	bl	8002c48 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491c:	f7fe f994 	bl	8002c48 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e357      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800492e:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004942:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d035      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	429a      	cmp	r2, r3
 8004956:	d02e      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004960:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a1d      	ldr	r2, [pc, #116]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800496e:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004978:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800497a:	4a18      	ldr	r2, [pc, #96]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004980:	4b16      	ldr	r3, [pc, #88]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d114      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fe f95c 	bl	8002c48 <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fe f958 	bl	8002c48 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e319      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0ee      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049c2:	d111      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	4901      	ldr	r1, [pc, #4]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
 80049da:	e00b      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40007000 	.word	0x40007000
 80049e4:	0ffffcff 	.word	0x0ffffcff
 80049e8:	4baa      	ldr	r3, [pc, #680]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4aa9      	ldr	r2, [pc, #676]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049f2:	6093      	str	r3, [r2, #8]
 80049f4:	4ba7      	ldr	r3, [pc, #668]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a00:	49a4      	ldr	r1, [pc, #656]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d010      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a12:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a18:	4a9e      	ldr	r2, [pc, #632]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a22:	4b9c      	ldr	r3, [pc, #624]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	4999      	ldr	r1, [pc, #612]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a40:	4b94      	ldr	r3, [pc, #592]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a4e:	4991      	ldr	r1, [pc, #580]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a62:	4b8c      	ldr	r3, [pc, #560]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a70:	4988      	ldr	r1, [pc, #544]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a84:	4b83      	ldr	r3, [pc, #524]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	4980      	ldr	r1, [pc, #512]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aa6:	4b7b      	ldr	r3, [pc, #492]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	4977      	ldr	r1, [pc, #476]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac8:	4b72      	ldr	r3, [pc, #456]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	496f      	ldr	r1, [pc, #444]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004aea:	4b6a      	ldr	r3, [pc, #424]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af0:	f023 020c 	bic.w	r2, r3, #12
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af8:	4966      	ldr	r1, [pc, #408]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	495e      	ldr	r1, [pc, #376]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b2e:	4b59      	ldr	r3, [pc, #356]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b3c:	4955      	ldr	r1, [pc, #340]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b50:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	494d      	ldr	r1, [pc, #308]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004b72:	4b48      	ldr	r3, [pc, #288]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b80:	4944      	ldr	r1, [pc, #272]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004b94:	4b3f      	ldr	r3, [pc, #252]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba2:	493c      	ldr	r1, [pc, #240]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004bb6:	4b37      	ldr	r3, [pc, #220]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	4933      	ldr	r1, [pc, #204]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bd8:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004be6:	492b      	ldr	r1, [pc, #172]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d011      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bfa:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c08:	4922      	ldr	r1, [pc, #136]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c18:	d101      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c48:	4912      	ldr	r1, [pc, #72]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c6c:	4909      	ldr	r1, [pc, #36]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d006      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 80d9 	beq.w	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c88:	4b02      	ldr	r3, [pc, #8]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a01      	ldr	r2, [pc, #4]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004c94:	40023800 	.word	0x40023800
 8004c98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c9a:	f7fd ffd5 	bl	8002c48 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ca2:	f7fd ffd1 	bl	8002c48 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	; 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e194      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cb4:	4b6c      	ldr	r3, [pc, #432]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1f0      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d021      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11d      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cd4:	4b64      	ldr	r3, [pc, #400]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	0c1b      	lsrs	r3, r3, #16
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce8:	0e1b      	lsrs	r3, r3, #24
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	071b      	lsls	r3, r3, #28
 8004d08:	4957      	ldr	r1, [pc, #348]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d004      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02e      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d129      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d3c:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d4a:	4b47      	ldr	r3, [pc, #284]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	0f1b      	lsrs	r3, r3, #28
 8004d52:	f003 0307 	and.w	r3, r3, #7
 8004d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	019a      	lsls	r2, r3, #6
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	061b      	lsls	r3, r3, #24
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	071b      	lsls	r3, r3, #28
 8004d70:	493d      	ldr	r1, [pc, #244]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d78:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7e:	f023 021f 	bic.w	r2, r3, #31
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	3b01      	subs	r3, #1
 8004d88:	4937      	ldr	r1, [pc, #220]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01d      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d9c:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da2:	0e1b      	lsrs	r3, r3, #24
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db0:	0f1b      	lsrs	r3, r3, #28
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	019a      	lsls	r2, r3, #6
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	071b      	lsls	r3, r3, #28
 8004dd0:	4925      	ldr	r1, [pc, #148]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d011      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	019a      	lsls	r2, r3, #6
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	041b      	lsls	r3, r3, #16
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	071b      	lsls	r3, r3, #28
 8004e00:	4919      	ldr	r1, [pc, #100]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e08:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd ff18 	bl	8002c48 <HAL_GetTick>
 8004e18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e1c:	f7fd ff14 	bl	8002c48 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0d7      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	f040 80cd 	bne.w	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4e:	f7fd fefb 	bl	8002c48 <HAL_GetTick>
 8004e52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e56:	f7fd fef7 	bl	8002c48 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b64      	cmp	r3, #100	; 0x64
 8004e62:	d903      	bls.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0ba      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004e68:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e6c:	4b5e      	ldr	r3, [pc, #376]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d0ed      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d02e      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d12a      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ea2:	4b51      	ldr	r3, [pc, #324]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	0f1b      	lsrs	r3, r3, #28
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	019a      	lsls	r2, r3, #6
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	061b      	lsls	r3, r3, #24
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	4944      	ldr	r1, [pc, #272]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ede:	4b42      	ldr	r3, [pc, #264]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	493d      	ldr	r1, [pc, #244]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d022      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0c:	d11d      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f0e:	4b36      	ldr	r3, [pc, #216]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1c:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	0f1b      	lsrs	r3, r3, #28
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	019a      	lsls	r2, r3, #6
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	431a      	orrs	r2, r3
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	061b      	lsls	r3, r3, #24
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	071b      	lsls	r3, r3, #28
 8004f42:	4929      	ldr	r1, [pc, #164]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d028      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	0e1b      	lsrs	r3, r3, #24
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	019a      	lsls	r2, r3, #6
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	041b      	lsls	r3, r3, #16
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	071b      	lsls	r3, r3, #28
 8004f8a:	4917      	ldr	r1, [pc, #92]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f92:	4b15      	ldr	r3, [pc, #84]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4911      	ldr	r1, [pc, #68]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fa8:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fd fe48 	bl	8002c48 <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fbc:	f7fd fe44 	bl	8002c48 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b64      	cmp	r3, #100	; 0x64
 8004fc8:	d901      	bls.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e007      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fda:	d1ef      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800

08004fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e049      	b.n	8005092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d106      	bne.n	8005018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7fd fb00 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f001 f924 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d001      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e054      	b.n	800515e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a26      	ldr	r2, [pc, #152]	; (800516c <HAL_TIM_Base_Start_IT+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d022      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050de:	d01d      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <HAL_TIM_Base_Start_IT+0xd4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d018      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <HAL_TIM_Base_Start_IT+0xd8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <HAL_TIM_Base_Start_IT+0xdc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00e      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1e      	ldr	r2, [pc, #120]	; (800517c <HAL_TIM_Base_Start_IT+0xe0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_TIM_Base_Start_IT+0xe4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_TIM_Base_Start_IT+0x80>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_TIM_Base_Start_IT+0xe8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d115      	bne.n	8005148 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689a      	ldr	r2, [r3, #8]
 8005122:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_TIM_Base_Start_IT+0xec>)
 8005124:	4013      	ands	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b06      	cmp	r3, #6
 800512c:	d015      	beq.n	800515a <HAL_TIM_Base_Start_IT+0xbe>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005134:	d011      	beq.n	800515a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005146:	e008      	b.n	800515a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e000      	b.n	800515c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40010000 	.word	0x40010000
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40010400 	.word	0x40010400
 8005180:	40014000 	.word	0x40014000
 8005184:	40001800 	.word	0x40001800
 8005188:	00010007 	.word	0x00010007

0800518c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e049      	b.n	8005232 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fd fab4 	bl	8002720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f001 f854 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d109      	bne.n	8005260 <HAL_TIM_PWM_Start+0x24>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e03c      	b.n	80052da <HAL_TIM_PWM_Start+0x9e>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d109      	bne.n	800527a <HAL_TIM_PWM_Start+0x3e>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	e02f      	b.n	80052da <HAL_TIM_PWM_Start+0x9e>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d109      	bne.n	8005294 <HAL_TIM_PWM_Start+0x58>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	bf14      	ite	ne
 800528c:	2301      	movne	r3, #1
 800528e:	2300      	moveq	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e022      	b.n	80052da <HAL_TIM_PWM_Start+0x9e>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d109      	bne.n	80052ae <HAL_TIM_PWM_Start+0x72>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	bf14      	ite	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	2300      	moveq	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e015      	b.n	80052da <HAL_TIM_PWM_Start+0x9e>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d109      	bne.n	80052c8 <HAL_TIM_PWM_Start+0x8c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b01      	cmp	r3, #1
 80052be:	bf14      	ite	ne
 80052c0:	2301      	movne	r3, #1
 80052c2:	2300      	moveq	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e008      	b.n	80052da <HAL_TIM_PWM_Start+0x9e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e092      	b.n	8005408 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xb6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f0:	e023      	b.n	800533a <HAL_TIM_PWM_Start+0xfe>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b04      	cmp	r3, #4
 80052f6:	d104      	bne.n	8005302 <HAL_TIM_PWM_Start+0xc6>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	e01b      	b.n	800533a <HAL_TIM_PWM_Start+0xfe>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d104      	bne.n	8005312 <HAL_TIM_PWM_Start+0xd6>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005310:	e013      	b.n	800533a <HAL_TIM_PWM_Start+0xfe>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b0c      	cmp	r3, #12
 8005316:	d104      	bne.n	8005322 <HAL_TIM_PWM_Start+0xe6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005320:	e00b      	b.n	800533a <HAL_TIM_PWM_Start+0xfe>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Start+0xf6>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005330:	e003      	b.n	800533a <HAL_TIM_PWM_Start+0xfe>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2201      	movs	r2, #1
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f001 fcee 	bl	8006d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a30      	ldr	r2, [pc, #192]	; (8005410 <HAL_TIM_PWM_Start+0x1d4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_TIM_PWM_Start+0x120>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <HAL_TIM_PWM_Start+0x1d8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d101      	bne.n	8005360 <HAL_TIM_PWM_Start+0x124>
 800535c:	2301      	movs	r3, #1
 800535e:	e000      	b.n	8005362 <HAL_TIM_PWM_Start+0x126>
 8005360:	2300      	movs	r3, #0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005374:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a25      	ldr	r2, [pc, #148]	; (8005410 <HAL_TIM_PWM_Start+0x1d4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d022      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005388:	d01d      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_TIM_PWM_Start+0x1dc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d018      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <HAL_TIM_PWM_Start+0x1e0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_TIM_PWM_Start+0x1e4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d00e      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a19      	ldr	r2, [pc, #100]	; (8005414 <HAL_TIM_PWM_Start+0x1d8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <HAL_TIM_PWM_Start+0x1e8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d004      	beq.n	80053c6 <HAL_TIM_PWM_Start+0x18a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_TIM_PWM_Start+0x1ec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d115      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b17      	ldr	r3, [pc, #92]	; (800542c <HAL_TIM_PWM_Start+0x1f0>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d015      	beq.n	8005404 <HAL_TIM_PWM_Start+0x1c8>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053de:	d011      	beq.n	8005404 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e008      	b.n	8005404 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e000      	b.n	8005406 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40010000 	.word	0x40010000
 8005414:	40010400 	.word	0x40010400
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40014000 	.word	0x40014000
 8005428:	40001800 	.word	0x40001800
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e049      	b.n	80054d6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f841 	bl	80054de <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 ff02 	bl	8006278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054de:	b480      	push	{r7}
 80054e0:	b083      	sub	sp, #12
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_TIM_IC_Start_IT+0x1e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e023      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d104      	bne.n	8005522 <HAL_TIM_IC_Start_IT+0x2e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e01b      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0x3e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0x4e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0x5e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005558:	b2db      	uxtb	r3, r3
 800555a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_TIM_IC_Start_IT+0x78>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e013      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d104      	bne.n	800557c <HAL_TIM_IC_Start_IT+0x88>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e00b      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d104      	bne.n	800558c <HAL_TIM_IC_Start_IT+0x98>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e003      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005592:	b2db      	uxtb	r3, r3
 8005594:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d102      	bne.n	80055a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800559c:	7b7b      	ldrb	r3, [r7, #13]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0e2      	b.n	800576c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_IC_Start_IT+0xc2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b4:	e023      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_IC_Start_IT+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	e01b      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Start_IT+0xe2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d4:	e013      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_IT+0xf2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055e4:	e00b      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Start_IT+0x102>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055f4:	e003      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x11a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560c:	e013      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0x12a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561c:	e00b      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_IT+0x13a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800562c:	e003      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d841      	bhi.n	80056c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_TIM_IC_Start_IT+0x150>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005679 	.word	0x08005679
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056c1 	.word	0x080056c1
 8005654:	0800568b 	.word	0x0800568b
 8005658:	080056c1 	.word	0x080056c1
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	0800569d 	.word	0x0800569d
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056c1 	.word	0x080056c1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056af 	.word	0x080056af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0202 	orr.w	r2, r2, #2
 8005686:	60da      	str	r2, [r3, #12]
      break;
 8005688:	e01d      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0204 	orr.w	r2, r2, #4
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e014      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	60da      	str	r2, [r3, #12]
      break;
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0210 	orr.w	r2, r2, #16
 80056bc:	60da      	str	r2, [r3, #12]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      break;
 80056c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d14e      	bne.n	800576a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 fb25 	bl	8006d24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a25      	ldr	r2, [pc, #148]	; (8005774 <HAL_TIM_IC_Start_IT+0x280>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d01d      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <HAL_TIM_IC_Start_IT+0x284>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_TIM_IC_Start_IT+0x288>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_TIM_IC_Start_IT+0x28c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1c      	ldr	r2, [pc, #112]	; (8005784 <HAL_TIM_IC_Start_IT+0x290>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIM_IC_Start_IT+0x294>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIM_IC_Start_IT+0x236>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a19      	ldr	r2, [pc, #100]	; (800578c <HAL_TIM_IC_Start_IT+0x298>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d115      	bne.n	8005756 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	4b17      	ldr	r3, [pc, #92]	; (8005790 <HAL_TIM_IC_Start_IT+0x29c>)
 8005732:	4013      	ands	r3, r2
 8005734:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d015      	beq.n	8005768 <HAL_TIM_IC_Start_IT+0x274>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005742:	d011      	beq.n	8005768 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	e008      	b.n	8005768 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e000      	b.n	800576a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005768:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40010000 	.word	0x40010000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40010400 	.word	0x40010400
 8005788:	40014000 	.word	0x40014000
 800578c:	40001800 	.word	0x40001800
 8005790:	00010007 	.word	0x00010007

08005794 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e08f      	b.n	80058c8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7fc ffcd 	bl	800275c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6899      	ldr	r1, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <HAL_TIM_Encoder_Init+0x13c>)
 80057d6:	400b      	ands	r3, r1
 80057d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f000 fd47 	bl	8006278 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4b31      	ldr	r3, [pc, #196]	; (80058d4 <HAL_TIM_Encoder_Init+0x140>)
 8005810:	4013      	ands	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	4313      	orrs	r3, r2
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4b2b      	ldr	r3, [pc, #172]	; (80058d8 <HAL_TIM_Encoder_Init+0x144>)
 800582a:	4013      	ands	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4b2a      	ldr	r3, [pc, #168]	; (80058dc <HAL_TIM_Encoder_Init+0x148>)
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	4313      	orrs	r3, r2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	011a      	lsls	r2, r3, #4
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	031b      	lsls	r3, r3, #12
 8005854:	4313      	orrs	r3, r2
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800586a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4313      	orrs	r3, r2
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	fffebff8 	.word	0xfffebff8
 80058d4:	fffffcfc 	.word	0xfffffcfc
 80058d8:	fffff3f3 	.word	0xfffff3f3
 80058dc:	ffff0f0f 	.word	0xffff0f0f

080058e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005900:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005908:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005916:	7b7b      	ldrb	r3, [r7, #13]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d001      	beq.n	8005920 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e069      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	e031      	b.n	8005996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d110      	bne.n	800595a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005938:	7bbb      	ldrb	r3, [r7, #14]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d102      	bne.n	8005944 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800593e:	7b3b      	ldrb	r3, [r7, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d001      	beq.n	8005948 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e055      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005958:	e01d      	b.n	8005996 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d108      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d102      	bne.n	8005972 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800596c:	7b3b      	ldrb	r3, [r7, #12]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d001      	beq.n	8005976 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e03e      	b.n	80059f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_TIM_Encoder_Start+0xc4>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d008      	beq.n	80059b4 <HAL_TIM_Encoder_Start+0xd4>
 80059a2:	e00f      	b.n	80059c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2201      	movs	r2, #1
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f9b9 	bl	8006d24 <TIM_CCxChannelCmd>
      break;
 80059b2:	e016      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	2104      	movs	r1, #4
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 f9b1 	bl	8006d24 <TIM_CCxChannelCmd>
      break;
 80059c2:	e00e      	b.n	80059e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 f9a9 	bl	8006d24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2201      	movs	r2, #1
 80059d8:	2104      	movs	r1, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 f9a2 	bl	8006d24 <TIM_CCxChannelCmd>
      break;
 80059e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0202 	mvn.w	r2, #2
 8005a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fdbe 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fbf8 	bl	800623c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fbff 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d122      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d11b      	bne.n	8005aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0204 	mvn.w	r2, #4
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb fd94 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fbce 	bl	800623c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fbd5 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0308 	and.w	r3, r3, #8
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0208 	mvn.w	r2, #8
 8005ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fb fd6a 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fba4 	bl	800623c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fbab 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0310 	and.w	r3, r3, #16
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	2b10      	cmp	r3, #16
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0210 	mvn.w	r2, #16
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2208      	movs	r2, #8
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fb fd40 	bl	80015c0 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fb7a 	bl	800623c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fb81 	bl	8006250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0201 	mvn.w	r2, #1
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fd52 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b80      	cmp	r3, #128	; 0x80
 8005b8c:	d10e      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b98:	2b80      	cmp	r3, #128	; 0x80
 8005b9a:	d107      	bne.n	8005bac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 f97a 	bl	8006ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	2b80      	cmp	r3, #128	; 0x80
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 f96d 	bl	8006eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb2f 	bl	8006264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d10e      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d107      	bne.n	8005c32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0220 	mvn.w	r2, #32
 8005c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f92d 	bl	8006e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b086      	sub	sp, #24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e088      	b.n	8005d6a <HAL_TIM_IC_ConfigChannel+0x130>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11b      	bne.n	8005c9e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	f000 fe91 	bl	800699c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 020c 	bic.w	r2, r2, #12
 8005c88:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6999      	ldr	r1, [r3, #24]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	619a      	str	r2, [r3, #24]
 8005c9c:	e060      	b.n	8005d60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d11c      	bne.n	8005cde <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6818      	ldr	r0, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6819      	ldr	r1, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f000 ff15 	bl	8006ae2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cc6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	021a      	lsls	r2, r3, #8
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	619a      	str	r2, [r3, #24]
 8005cdc:	e040      	b.n	8005d60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d11b      	bne.n	8005d1c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6818      	ldr	r0, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	6819      	ldr	r1, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f000 ff62 	bl	8006bbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69da      	ldr	r2, [r3, #28]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 020c 	bic.w	r2, r2, #12
 8005d06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69d9      	ldr	r1, [r3, #28]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	61da      	str	r2, [r3, #28]
 8005d1a:	e021      	b.n	8005d60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b0c      	cmp	r3, #12
 8005d20:	d11c      	bne.n	8005d5c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6819      	ldr	r1, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f000 ff7f 	bl	8006c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69da      	ldr	r2, [r3, #28]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d44:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69d9      	ldr	r1, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	021a      	lsls	r2, r3, #8
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	61da      	str	r2, [r3, #28]
 8005d5a:	e001      	b.n	8005d60 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e0ff      	b.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b14      	cmp	r3, #20
 8005d9e:	f200 80f0 	bhi.w	8005f82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dfd 	.word	0x08005dfd
 8005dac:	08005f83 	.word	0x08005f83
 8005db0:	08005f83 	.word	0x08005f83
 8005db4:	08005f83 	.word	0x08005f83
 8005db8:	08005e3d 	.word	0x08005e3d
 8005dbc:	08005f83 	.word	0x08005f83
 8005dc0:	08005f83 	.word	0x08005f83
 8005dc4:	08005f83 	.word	0x08005f83
 8005dc8:	08005e7f 	.word	0x08005e7f
 8005dcc:	08005f83 	.word	0x08005f83
 8005dd0:	08005f83 	.word	0x08005f83
 8005dd4:	08005f83 	.word	0x08005f83
 8005dd8:	08005ebf 	.word	0x08005ebf
 8005ddc:	08005f83 	.word	0x08005f83
 8005de0:	08005f83 	.word	0x08005f83
 8005de4:	08005f83 	.word	0x08005f83
 8005de8:	08005f01 	.word	0x08005f01
 8005dec:	08005f83 	.word	0x08005f83
 8005df0:	08005f83 	.word	0x08005f83
 8005df4:	08005f83 	.word	0x08005f83
 8005df8:	08005f41 	.word	0x08005f41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fad8 	bl	80063b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	699a      	ldr	r2, [r3, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0204 	bic.w	r2, r2, #4
 8005e26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6999      	ldr	r1, [r3, #24]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	619a      	str	r2, [r3, #24]
      break;
 8005e3a:	e0a5      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68b9      	ldr	r1, [r7, #8]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fb2a 	bl	800649c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699a      	ldr	r2, [r3, #24]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6999      	ldr	r1, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	021a      	lsls	r2, r3, #8
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	619a      	str	r2, [r3, #24]
      break;
 8005e7c:	e084      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f000 fb81 	bl	800658c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	69da      	ldr	r2, [r3, #28]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0208 	orr.w	r2, r2, #8
 8005e98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69da      	ldr	r2, [r3, #28]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0204 	bic.w	r2, r2, #4
 8005ea8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69d9      	ldr	r1, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      break;
 8005ebc:	e064      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fbd7 	bl	8006678 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69da      	ldr	r2, [r3, #28]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	021a      	lsls	r2, r3, #8
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	61da      	str	r2, [r3, #28]
      break;
 8005efe:	e043      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fc0e 	bl	8006728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0208 	orr.w	r2, r2, #8
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0204 	bic.w	r2, r2, #4
 8005f2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f3e:	e023      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68b9      	ldr	r1, [r7, #8]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fc40 	bl	80067cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	021a      	lsls	r2, r3, #8
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f80:	e002      	b.n	8005f88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0b4      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x186>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	4b56      	ldr	r3, [pc, #344]	; (800612c <HAL_TIM_ConfigClockSource+0x190>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff0:	d03e      	beq.n	8006070 <HAL_TIM_ConfigClockSource+0xd4>
 8005ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff6:	f200 8087 	bhi.w	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8005ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ffe:	f000 8086 	beq.w	800610e <HAL_TIM_ConfigClockSource+0x172>
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d87f      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006008:	2b70      	cmp	r3, #112	; 0x70
 800600a:	d01a      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0xa6>
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d87b      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006010:	2b60      	cmp	r3, #96	; 0x60
 8006012:	d050      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006014:	2b60      	cmp	r3, #96	; 0x60
 8006016:	d877      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006018:	2b50      	cmp	r3, #80	; 0x50
 800601a:	d03c      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0xfa>
 800601c:	2b50      	cmp	r3, #80	; 0x50
 800601e:	d873      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d058      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d86f      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006028:	2b30      	cmp	r3, #48	; 0x30
 800602a:	d064      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x15a>
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d86b      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d060      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d867      	bhi.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d05c      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x15a>
 800603c:	2b10      	cmp	r3, #16
 800603e:	d05a      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006040:	e062      	b.n	8006108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6899      	ldr	r1, [r3, #8]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f000 fe47 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	609a      	str	r2, [r3, #8]
      break;
 800606e:	e04f      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6818      	ldr	r0, [r3, #0]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6899      	ldr	r1, [r3, #8]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f000 fe30 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006092:	609a      	str	r2, [r3, #8]
      break;
 8006094:	e03c      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f000 fcee 	bl	8006a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2150      	movs	r1, #80	; 0x50
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fdfd 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 80060b4:	e02c      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f000 fd4a 	bl	8006b5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2160      	movs	r1, #96	; 0x60
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fded 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 80060d4:	e01c      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6818      	ldr	r0, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6859      	ldr	r1, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	461a      	mov	r2, r3
 80060e4:	f000 fcce 	bl	8006a84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	4618      	mov	r0, r3
 80060f0:	f000 fddd 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 80060f4:	e00c      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f000 fdd4 	bl	8006cae <TIM_ITRx_SetConfig>
      break;
 8006106:	e003      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e000      	b.n	8006110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800610e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	fffeff88 	.word	0xfffeff88

08006130 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006144:	2302      	movs	r3, #2
 8006146:	e031      	b.n	80061ac <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fb8a 	bl	8006874 <TIM_SlaveTimer_SetConfig>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d009      	beq.n	800617a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e018      	b.n	80061ac <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006188:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006198:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d831      	bhi.n	800622c <HAL_TIM_ReadCapturedValue+0x78>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	08006205 	.word	0x08006205
 80061d4:	0800622d 	.word	0x0800622d
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800620f 	.word	0x0800620f
 80061e4:	0800622d 	.word	0x0800622d
 80061e8:	0800622d 	.word	0x0800622d
 80061ec:	0800622d 	.word	0x0800622d
 80061f0:	08006219 	.word	0x08006219
 80061f4:	0800622d 	.word	0x0800622d
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	08006223 	.word	0x08006223
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	60fb      	str	r3, [r7, #12]

      break;
 800620c:	e00f      	b.n	800622e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	60fb      	str	r3, [r7, #12]

      break;
 8006216:	e00a      	b.n	800622e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621e:	60fb      	str	r3, [r7, #12]

      break;
 8006220:	e005      	b.n	800622e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	60fb      	str	r3, [r7, #12]

      break;
 800622a:	e000      	b.n	800622e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800622c:	bf00      	nop
  }

  return tmpreg;
 800622e:	68fb      	ldr	r3, [r7, #12]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a40      	ldr	r2, [pc, #256]	; (800638c <TIM_Base_SetConfig+0x114>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d013      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006296:	d00f      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a3d      	ldr	r2, [pc, #244]	; (8006390 <TIM_Base_SetConfig+0x118>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3c      	ldr	r2, [pc, #240]	; (8006394 <TIM_Base_SetConfig+0x11c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a3b      	ldr	r2, [pc, #236]	; (8006398 <TIM_Base_SetConfig+0x120>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a3a      	ldr	r2, [pc, #232]	; (800639c <TIM_Base_SetConfig+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d108      	bne.n	80062ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	; (800638c <TIM_Base_SetConfig+0x114>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d02b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d8:	d027      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2c      	ldr	r2, [pc, #176]	; (8006390 <TIM_Base_SetConfig+0x118>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d023      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2b      	ldr	r2, [pc, #172]	; (8006394 <TIM_Base_SetConfig+0x11c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d01f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	; (8006398 <TIM_Base_SetConfig+0x120>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a29      	ldr	r2, [pc, #164]	; (800639c <TIM_Base_SetConfig+0x124>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d017      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a28      	ldr	r2, [pc, #160]	; (80063a0 <TIM_Base_SetConfig+0x128>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a27      	ldr	r2, [pc, #156]	; (80063a4 <TIM_Base_SetConfig+0x12c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00f      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a26      	ldr	r2, [pc, #152]	; (80063a8 <TIM_Base_SetConfig+0x130>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00b      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a25      	ldr	r2, [pc, #148]	; (80063ac <TIM_Base_SetConfig+0x134>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d007      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a24      	ldr	r2, [pc, #144]	; (80063b0 <TIM_Base_SetConfig+0x138>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d003      	beq.n	800632a <TIM_Base_SetConfig+0xb2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a23      	ldr	r2, [pc, #140]	; (80063b4 <TIM_Base_SetConfig+0x13c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d108      	bne.n	800633c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a0a      	ldr	r2, [pc, #40]	; (800638c <TIM_Base_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0xf8>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a0c      	ldr	r2, [pc, #48]	; (800639c <TIM_Base_SetConfig+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d103      	bne.n	8006378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	615a      	str	r2, [r3, #20]
}
 800637e:	bf00      	nop
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40010000 	.word	0x40010000
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800
 8006398:	40000c00 	.word	0x40000c00
 800639c:	40010400 	.word	0x40010400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800
 80063ac:	40001800 	.word	0x40001800
 80063b0:	40001c00 	.word	0x40001c00
 80063b4:	40002000 	.word	0x40002000

080063b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0201 	bic.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4b2b      	ldr	r3, [pc, #172]	; (8006490 <TIM_OC1_SetConfig+0xd8>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0303 	bic.w	r3, r3, #3
 80063ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 0302 	bic.w	r3, r3, #2
 8006400:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <TIM_OC1_SetConfig+0xdc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC1_SetConfig+0x64>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a20      	ldr	r2, [pc, #128]	; (8006498 <TIM_OC1_SetConfig+0xe0>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d10c      	bne.n	8006436 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0308 	bic.w	r3, r3, #8
 8006422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f023 0304 	bic.w	r3, r3, #4
 8006434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a16      	ldr	r2, [pc, #88]	; (8006494 <TIM_OC1_SetConfig+0xdc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC1_SetConfig+0x8e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a15      	ldr	r2, [pc, #84]	; (8006498 <TIM_OC1_SetConfig+0xe0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d111      	bne.n	800646a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800644c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	621a      	str	r2, [r3, #32]
}
 8006484:	bf00      	nop
 8006486:	371c      	adds	r7, #28
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	fffeff8f 	.word	0xfffeff8f
 8006494:	40010000 	.word	0x40010000
 8006498:	40010400 	.word	0x40010400

0800649c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b480      	push	{r7}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0210 	bic.w	r2, r3, #16
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4b2e      	ldr	r3, [pc, #184]	; (8006580 <TIM_OC2_SetConfig+0xe4>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0320 	bic.w	r3, r3, #32
 80064e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	011b      	lsls	r3, r3, #4
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a23      	ldr	r2, [pc, #140]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0x68>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a22      	ldr	r2, [pc, #136]	; (8006588 <TIM_OC2_SetConfig+0xec>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10d      	bne.n	8006520 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	011b      	lsls	r3, r3, #4
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a18      	ldr	r2, [pc, #96]	; (8006584 <TIM_OC2_SetConfig+0xe8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <TIM_OC2_SetConfig+0x94>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a17      	ldr	r2, [pc, #92]	; (8006588 <TIM_OC2_SetConfig+0xec>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d113      	bne.n	8006558 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006536:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4313      	orrs	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	621a      	str	r2, [r3, #32]
}
 8006572:	bf00      	nop
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	feff8fff 	.word	0xfeff8fff
 8006584:	40010000 	.word	0x40010000
 8006588:	40010400 	.word	0x40010400

0800658c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <TIM_OC3_SetConfig+0xe0>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a22      	ldr	r2, [pc, #136]	; (8006670 <TIM_OC3_SetConfig+0xe4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d003      	beq.n	80065f2 <TIM_OC3_SetConfig+0x66>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <TIM_OC3_SetConfig+0xe8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d10d      	bne.n	800660e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800660c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a17      	ldr	r2, [pc, #92]	; (8006670 <TIM_OC3_SetConfig+0xe4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_OC3_SetConfig+0x92>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a16      	ldr	r2, [pc, #88]	; (8006674 <TIM_OC3_SetConfig+0xe8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d113      	bne.n	8006646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	621a      	str	r2, [r3, #32]
}
 8006660:	bf00      	nop
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	fffeff8f 	.word	0xfffeff8f
 8006670:	40010000 	.word	0x40010000
 8006674:	40010400 	.word	0x40010400

08006678 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4b1e      	ldr	r3, [pc, #120]	; (800671c <TIM_OC4_SetConfig+0xa4>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	031b      	lsls	r3, r3, #12
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a13      	ldr	r2, [pc, #76]	; (8006720 <TIM_OC4_SetConfig+0xa8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_OC4_SetConfig+0x68>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <TIM_OC4_SetConfig+0xac>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d109      	bne.n	80066f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	019b      	lsls	r3, r3, #6
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	feff8fff 	.word	0xfeff8fff
 8006720:	40010000 	.word	0x40010000
 8006724:	40010400 	.word	0x40010400

08006728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <TIM_OC5_SetConfig+0x98>)
 8006754:	4013      	ands	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006768:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	041b      	lsls	r3, r3, #16
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <TIM_OC5_SetConfig+0x9c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d003      	beq.n	8006786 <TIM_OC5_SetConfig+0x5e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a11      	ldr	r2, [pc, #68]	; (80067c8 <TIM_OC5_SetConfig+0xa0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d109      	bne.n	800679a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	021b      	lsls	r3, r3, #8
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	621a      	str	r2, [r3, #32]
}
 80067b4:	bf00      	nop
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	fffeff8f 	.word	0xfffeff8f
 80067c4:	40010000 	.word	0x40010000
 80067c8:	40010400 	.word	0x40010400

080067cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <TIM_OC6_SetConfig+0x9c>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800680e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	051b      	lsls	r3, r3, #20
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a13      	ldr	r2, [pc, #76]	; (800686c <TIM_OC6_SetConfig+0xa0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_OC6_SetConfig+0x60>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a12      	ldr	r2, [pc, #72]	; (8006870 <TIM_OC6_SetConfig+0xa4>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d109      	bne.n	8006840 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	029b      	lsls	r3, r3, #10
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	feff8fff 	.word	0xfeff8fff
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006890:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4b3e      	ldr	r3, [pc, #248]	; (8006998 <TIM_SlaveTimer_SetConfig+0x124>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b70      	cmp	r3, #112	; 0x70
 80068bc:	d01a      	beq.n	80068f4 <TIM_SlaveTimer_SetConfig+0x80>
 80068be:	2b70      	cmp	r3, #112	; 0x70
 80068c0:	d860      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068c2:	2b60      	cmp	r3, #96	; 0x60
 80068c4:	d054      	beq.n	8006970 <TIM_SlaveTimer_SetConfig+0xfc>
 80068c6:	2b60      	cmp	r3, #96	; 0x60
 80068c8:	d85c      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068ca:	2b50      	cmp	r3, #80	; 0x50
 80068cc:	d046      	beq.n	800695c <TIM_SlaveTimer_SetConfig+0xe8>
 80068ce:	2b50      	cmp	r3, #80	; 0x50
 80068d0:	d858      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d019      	beq.n	800690a <TIM_SlaveTimer_SetConfig+0x96>
 80068d6:	2b40      	cmp	r3, #64	; 0x40
 80068d8:	d854      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068da:	2b30      	cmp	r3, #48	; 0x30
 80068dc:	d055      	beq.n	800698a <TIM_SlaveTimer_SetConfig+0x116>
 80068de:	2b30      	cmp	r3, #48	; 0x30
 80068e0:	d850      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d051      	beq.n	800698a <TIM_SlaveTimer_SetConfig+0x116>
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d84c      	bhi.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d04d      	beq.n	800698a <TIM_SlaveTimer_SetConfig+0x116>
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d04b      	beq.n	800698a <TIM_SlaveTimer_SetConfig+0x116>
 80068f2:	e047      	b.n	8006984 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68d9      	ldr	r1, [r3, #12]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f000 f9ee 	bl	8006ce4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006908:	e040      	b.n	800698c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b05      	cmp	r3, #5
 8006910:	d101      	bne.n	8006916 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e03b      	b.n	800698e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0201 	bic.w	r2, r2, #1
 800692c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
      break;
 800695a:	e017      	b.n	800698c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	6899      	ldr	r1, [r3, #8]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	461a      	mov	r2, r3
 800696a:	f000 f88b 	bl	8006a84 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800696e:	e00d      	b.n	800698c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6818      	ldr	r0, [r3, #0]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6899      	ldr	r1, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	461a      	mov	r2, r3
 800697e:	f000 f8ed 	bl	8006b5c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006982:	e003      	b.n	800698c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
      break;
 8006988:	e000      	b.n	800698c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800698a:	bf00      	nop
  }

  return status;
 800698c:	7dfb      	ldrb	r3, [r7, #23]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	fffefff8 	.word	0xfffefff8

0800699c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0201 	bic.w	r2, r3, #1
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a28      	ldr	r2, [pc, #160]	; (8006a68 <TIM_TI1_SetConfig+0xcc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01b      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d0:	d017      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a25      	ldr	r2, [pc, #148]	; (8006a6c <TIM_TI1_SetConfig+0xd0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a24      	ldr	r2, [pc, #144]	; (8006a70 <TIM_TI1_SetConfig+0xd4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a23      	ldr	r2, [pc, #140]	; (8006a74 <TIM_TI1_SetConfig+0xd8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a22      	ldr	r2, [pc, #136]	; (8006a78 <TIM_TI1_SetConfig+0xdc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a21      	ldr	r2, [pc, #132]	; (8006a7c <TIM_TI1_SetConfig+0xe0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_TI1_SetConfig+0x66>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4a20      	ldr	r2, [pc, #128]	; (8006a80 <TIM_TI1_SetConfig+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <TIM_TI1_SetConfig+0x6a>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <TIM_TI1_SetConfig+0x6c>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e003      	b.n	8006a26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f023 030a 	bic.w	r3, r3, #10
 8006a40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 030a 	and.w	r3, r3, #10
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40010000 	.word	0x40010000
 8006a6c:	40000400 	.word	0x40000400
 8006a70:	40000800 	.word	0x40000800
 8006a74:	40000c00 	.word	0x40000c00
 8006a78:	40010400 	.word	0x40010400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40001800 	.word	0x40001800

08006a84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 030a 	bic.w	r3, r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b087      	sub	sp, #28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f023 0210 	bic.w	r2, r3, #16
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	031b      	lsls	r3, r3, #12
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	621a      	str	r2, [r3, #32]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f023 0210 	bic.w	r2, r3, #16
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	031b      	lsls	r3, r3, #12
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	621a      	str	r2, [r3, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	021b      	lsls	r3, r3, #8
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	031b      	lsls	r3, r3, #12
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	031b      	lsls	r3, r3, #12
 8006c8c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b085      	sub	sp, #20
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f043 0307 	orr.w	r3, r3, #7
 8006cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	609a      	str	r2, [r3, #8]
}
 8006cd8:	bf00      	nop
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	021a      	lsls	r2, r3, #8
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	609a      	str	r2, [r3, #8]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2201      	movs	r2, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	43db      	mvns	r3, r3
 8006d46:	401a      	ands	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1a      	ldr	r2, [r3, #32]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f003 031f 	and.w	r3, r3, #31
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e06d      	b.n	8006e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a30      	ldr	r2, [pc, #192]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d004      	beq.n	8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a2f      	ldr	r2, [pc, #188]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d108      	bne.n	8006dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a20      	ldr	r2, [pc, #128]	; (8006e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d022      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfa:	d01d      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1d      	ldr	r2, [pc, #116]	; (8006e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d018      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1c      	ldr	r2, [pc, #112]	; (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d013      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00e      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a15      	ldr	r2, [pc, #84]	; (8006e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d009      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a16      	ldr	r2, [pc, #88]	; (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	40010000 	.word	0x40010000
 8006e74:	40010400 	.word	0x40010400
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40001800 	.word	0x40001800

08006e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e040      	b.n	8006f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fb fd22 	bl	8002934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb62 	bl	80075d0 <UART_SetConfig>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e022      	b.n	8006f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fdba 	bl	8007a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fe41 	bl	8007bdc <UART_CheckIdleState>
 8006f5a:	4603      	mov	r3, r0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	d132      	bne.n	8006fe2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <HAL_UART_Receive_IT+0x24>
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e02b      	b.n	8006fe4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d018      	beq.n	8006fd2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	613b      	str	r3, [r7, #16]
   return(result);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	623b      	str	r3, [r7, #32]
 8006fc0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	69f9      	ldr	r1, [r7, #28]
 8006fc4:	6a3a      	ldr	r2, [r7, #32]
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e6      	bne.n	8006fa0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fefd 	bl	8007dd8 <UART_Start_Receive_IT>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	e000      	b.n	8006fe4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3728      	adds	r7, #40	; 0x28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b0ba      	sub	sp, #232	; 0xe8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007016:	f640 030f 	movw	r3, #2063	; 0x80f
 800701a:	4013      	ands	r3, r2
 800701c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d115      	bne.n	8007054 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b00      	cmp	r3, #0
 800703e:	d009      	beq.n	8007054 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 8297 	beq.w	8007578 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	4798      	blx	r3
      }
      return;
 8007052:	e291      	b.n	8007578 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8117 	beq.w	800728c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800705e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d106      	bne.n	8007078 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800706a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800706e:	4b85      	ldr	r3, [pc, #532]	; (8007284 <HAL_UART_IRQHandler+0x298>)
 8007070:	4013      	ands	r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 810a 	beq.w	800728c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b00      	cmp	r3, #0
 8007082:	d011      	beq.n	80070a8 <HAL_UART_IRQHandler+0xbc>
 8007084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2201      	movs	r2, #1
 8007096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709e:	f043 0201 	orr.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d011      	beq.n	80070d8 <HAL_UART_IRQHandler+0xec>
 80070b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2202      	movs	r2, #2
 80070c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ce:	f043 0204 	orr.w	r2, r3, #4
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d011      	beq.n	8007108 <HAL_UART_IRQHandler+0x11c>
 80070e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2204      	movs	r2, #4
 80070f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070fe:	f043 0202 	orr.w	r2, r3, #2
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710c:	f003 0308 	and.w	r3, r3, #8
 8007110:	2b00      	cmp	r3, #0
 8007112:	d017      	beq.n	8007144 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007118:	f003 0320 	and.w	r3, r3, #32
 800711c:	2b00      	cmp	r3, #0
 800711e:	d105      	bne.n	800712c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007120:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007124:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2208      	movs	r2, #8
 8007132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713a:	f043 0208 	orr.w	r2, r3, #8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714c:	2b00      	cmp	r3, #0
 800714e:	d012      	beq.n	8007176 <HAL_UART_IRQHandler+0x18a>
 8007150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00c      	beq.n	8007176 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800716c:	f043 0220 	orr.w	r2, r3, #32
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 81fd 	beq.w	800757c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800718e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d007      	beq.n	80071aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d005      	beq.n	80071ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d04f      	beq.n	800726e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fec8 	bl	8007f64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d141      	bne.n	8007266 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3308      	adds	r3, #8
 80071e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3308      	adds	r3, #8
 800720a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800720e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800721a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1d9      	bne.n	80071e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007232:	2b00      	cmp	r3, #0
 8007234:	d013      	beq.n	800725e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800723a:	4a13      	ldr	r2, [pc, #76]	; (8007288 <HAL_UART_IRQHandler+0x29c>)
 800723c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007242:	4618      	mov	r0, r3
 8007244:	f7fb feb1 	bl	8002faa <HAL_DMA_Abort_IT>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d017      	beq.n	800727e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e00f      	b.n	800727e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f9a0 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007264:	e00b      	b.n	800727e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f99c 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	e007      	b.n	800727e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f998 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800727c:	e17e      	b.n	800757c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727e:	bf00      	nop
    return;
 8007280:	e17c      	b.n	800757c <HAL_UART_IRQHandler+0x590>
 8007282:	bf00      	nop
 8007284:	04000120 	.word	0x04000120
 8007288:	0800802d 	.word	0x0800802d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007290:	2b01      	cmp	r3, #1
 8007292:	f040 814c 	bne.w	800752e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 8145 	beq.w	800752e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 813e 	beq.w	800752e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2210      	movs	r2, #16
 80072b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	f040 80b6 	bne.w	8007436 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8150 	beq.w	8007580 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ea:	429a      	cmp	r2, r3
 80072ec:	f080 8148 	bcs.w	8007580 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007304:	f000 8086 	beq.w	8007414 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007314:	e853 3f00 	ldrex	r3, [r3]
 8007318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800731c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007332:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007336:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800733e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800734a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1da      	bne.n	8007308 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3308      	adds	r3, #8
 8007358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007364:	f023 0301 	bic.w	r3, r3, #1
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3308      	adds	r3, #8
 8007372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800737a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800737e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e1      	bne.n	8007352 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800739e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e3      	bne.n	800738e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073dc:	e853 3f00 	ldrex	r3, [r3]
 80073e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e4:	f023 0310 	bic.w	r3, r3, #16
 80073e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	461a      	mov	r2, r3
 80073f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80073f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e4      	bne.n	80073d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740e:	4618      	mov	r0, r3
 8007410:	f7fb fd5b 	bl	8002eca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007426:	b29b      	uxth	r3, r3
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	b29b      	uxth	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8c2 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007434:	e0a4      	b.n	8007580 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007442:	b29b      	uxth	r3, r3
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 8096 	beq.w	8007584 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8091 	beq.w	8007584 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007484:	647b      	str	r3, [r7, #68]	; 0x44
 8007486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e4      	bne.n	8007462 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	e853 3f00 	ldrex	r3, [r3]
 80074a6:	623b      	str	r3, [r7, #32]
   return(result);
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3308      	adds	r3, #8
 80074b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074bc:	633a      	str	r2, [r7, #48]	; 0x30
 80074be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c4:	e841 2300 	strex	r3, r2, [r1]
 80074c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d1e3      	bne.n	8007498 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f023 0310 	bic.w	r3, r3, #16
 80074f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750a:	69b9      	ldr	r1, [r7, #24]
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	e841 2300 	strex	r3, r2, [r1]
 8007512:	617b      	str	r3, [r7, #20]
   return(result);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1e4      	bne.n	80074e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007524:	4619      	mov	r1, r3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f846 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800752c:	e02a      	b.n	8007584 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00e      	beq.n	8007558 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	2b00      	cmp	r3, #0
 800754c:	d01c      	beq.n	8007588 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
    }
    return;
 8007556:	e017      	b.n	8007588 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d012      	beq.n	800758a <HAL_UART_IRQHandler+0x59e>
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00c      	beq.n	800758a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd71 	bl	8008058 <UART_EndTransmit_IT>
    return;
 8007576:	e008      	b.n	800758a <HAL_UART_IRQHandler+0x59e>
      return;
 8007578:	bf00      	nop
 800757a:	e006      	b.n	800758a <HAL_UART_IRQHandler+0x59e>
    return;
 800757c:	bf00      	nop
 800757e:	e004      	b.n	800758a <HAL_UART_IRQHandler+0x59e>
      return;
 8007580:	bf00      	nop
 8007582:	e002      	b.n	800758a <HAL_UART_IRQHandler+0x59e>
      return;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <HAL_UART_IRQHandler+0x59e>
    return;
 8007588:	bf00      	nop
  }

}
 800758a:	37e8      	adds	r7, #232	; 0xe8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4ba6      	ldr	r3, [pc, #664]	; (8007894 <UART_SetConfig+0x2c4>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	430b      	orrs	r3, r1
 8007606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	430a      	orrs	r2, r1
 8007640:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a94      	ldr	r2, [pc, #592]	; (8007898 <UART_SetConfig+0x2c8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d120      	bne.n	800768e <UART_SetConfig+0xbe>
 800764c:	4b93      	ldr	r3, [pc, #588]	; (800789c <UART_SetConfig+0x2cc>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d816      	bhi.n	8007688 <UART_SetConfig+0xb8>
 800765a:	a201      	add	r2, pc, #4	; (adr r2, 8007660 <UART_SetConfig+0x90>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007671 	.word	0x08007671
 8007664:	0800767d 	.word	0x0800767d
 8007668:	08007677 	.word	0x08007677
 800766c:	08007683 	.word	0x08007683
 8007670:	2301      	movs	r3, #1
 8007672:	77fb      	strb	r3, [r7, #31]
 8007674:	e150      	b.n	8007918 <UART_SetConfig+0x348>
 8007676:	2302      	movs	r3, #2
 8007678:	77fb      	strb	r3, [r7, #31]
 800767a:	e14d      	b.n	8007918 <UART_SetConfig+0x348>
 800767c:	2304      	movs	r3, #4
 800767e:	77fb      	strb	r3, [r7, #31]
 8007680:	e14a      	b.n	8007918 <UART_SetConfig+0x348>
 8007682:	2308      	movs	r3, #8
 8007684:	77fb      	strb	r3, [r7, #31]
 8007686:	e147      	b.n	8007918 <UART_SetConfig+0x348>
 8007688:	2310      	movs	r3, #16
 800768a:	77fb      	strb	r3, [r7, #31]
 800768c:	e144      	b.n	8007918 <UART_SetConfig+0x348>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a83      	ldr	r2, [pc, #524]	; (80078a0 <UART_SetConfig+0x2d0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d132      	bne.n	80076fe <UART_SetConfig+0x12e>
 8007698:	4b80      	ldr	r3, [pc, #512]	; (800789c <UART_SetConfig+0x2cc>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f003 030c 	and.w	r3, r3, #12
 80076a2:	2b0c      	cmp	r3, #12
 80076a4:	d828      	bhi.n	80076f8 <UART_SetConfig+0x128>
 80076a6:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0xdc>)
 80076a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ac:	080076e1 	.word	0x080076e1
 80076b0:	080076f9 	.word	0x080076f9
 80076b4:	080076f9 	.word	0x080076f9
 80076b8:	080076f9 	.word	0x080076f9
 80076bc:	080076ed 	.word	0x080076ed
 80076c0:	080076f9 	.word	0x080076f9
 80076c4:	080076f9 	.word	0x080076f9
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	080076e7 	.word	0x080076e7
 80076d0:	080076f9 	.word	0x080076f9
 80076d4:	080076f9 	.word	0x080076f9
 80076d8:	080076f9 	.word	0x080076f9
 80076dc:	080076f3 	.word	0x080076f3
 80076e0:	2300      	movs	r3, #0
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e118      	b.n	8007918 <UART_SetConfig+0x348>
 80076e6:	2302      	movs	r3, #2
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e115      	b.n	8007918 <UART_SetConfig+0x348>
 80076ec:	2304      	movs	r3, #4
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e112      	b.n	8007918 <UART_SetConfig+0x348>
 80076f2:	2308      	movs	r3, #8
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e10f      	b.n	8007918 <UART_SetConfig+0x348>
 80076f8:	2310      	movs	r3, #16
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e10c      	b.n	8007918 <UART_SetConfig+0x348>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a68      	ldr	r2, [pc, #416]	; (80078a4 <UART_SetConfig+0x2d4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d120      	bne.n	800774a <UART_SetConfig+0x17a>
 8007708:	4b64      	ldr	r3, [pc, #400]	; (800789c <UART_SetConfig+0x2cc>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007712:	2b30      	cmp	r3, #48	; 0x30
 8007714:	d013      	beq.n	800773e <UART_SetConfig+0x16e>
 8007716:	2b30      	cmp	r3, #48	; 0x30
 8007718:	d814      	bhi.n	8007744 <UART_SetConfig+0x174>
 800771a:	2b20      	cmp	r3, #32
 800771c:	d009      	beq.n	8007732 <UART_SetConfig+0x162>
 800771e:	2b20      	cmp	r3, #32
 8007720:	d810      	bhi.n	8007744 <UART_SetConfig+0x174>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d002      	beq.n	800772c <UART_SetConfig+0x15c>
 8007726:	2b10      	cmp	r3, #16
 8007728:	d006      	beq.n	8007738 <UART_SetConfig+0x168>
 800772a:	e00b      	b.n	8007744 <UART_SetConfig+0x174>
 800772c:	2300      	movs	r3, #0
 800772e:	77fb      	strb	r3, [r7, #31]
 8007730:	e0f2      	b.n	8007918 <UART_SetConfig+0x348>
 8007732:	2302      	movs	r3, #2
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e0ef      	b.n	8007918 <UART_SetConfig+0x348>
 8007738:	2304      	movs	r3, #4
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e0ec      	b.n	8007918 <UART_SetConfig+0x348>
 800773e:	2308      	movs	r3, #8
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	e0e9      	b.n	8007918 <UART_SetConfig+0x348>
 8007744:	2310      	movs	r3, #16
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e0e6      	b.n	8007918 <UART_SetConfig+0x348>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a56      	ldr	r2, [pc, #344]	; (80078a8 <UART_SetConfig+0x2d8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d120      	bne.n	8007796 <UART_SetConfig+0x1c6>
 8007754:	4b51      	ldr	r3, [pc, #324]	; (800789c <UART_SetConfig+0x2cc>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800775e:	2bc0      	cmp	r3, #192	; 0xc0
 8007760:	d013      	beq.n	800778a <UART_SetConfig+0x1ba>
 8007762:	2bc0      	cmp	r3, #192	; 0xc0
 8007764:	d814      	bhi.n	8007790 <UART_SetConfig+0x1c0>
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d009      	beq.n	800777e <UART_SetConfig+0x1ae>
 800776a:	2b80      	cmp	r3, #128	; 0x80
 800776c:	d810      	bhi.n	8007790 <UART_SetConfig+0x1c0>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d002      	beq.n	8007778 <UART_SetConfig+0x1a8>
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	d006      	beq.n	8007784 <UART_SetConfig+0x1b4>
 8007776:	e00b      	b.n	8007790 <UART_SetConfig+0x1c0>
 8007778:	2300      	movs	r3, #0
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e0cc      	b.n	8007918 <UART_SetConfig+0x348>
 800777e:	2302      	movs	r3, #2
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e0c9      	b.n	8007918 <UART_SetConfig+0x348>
 8007784:	2304      	movs	r3, #4
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e0c6      	b.n	8007918 <UART_SetConfig+0x348>
 800778a:	2308      	movs	r3, #8
 800778c:	77fb      	strb	r3, [r7, #31]
 800778e:	e0c3      	b.n	8007918 <UART_SetConfig+0x348>
 8007790:	2310      	movs	r3, #16
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e0c0      	b.n	8007918 <UART_SetConfig+0x348>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a44      	ldr	r2, [pc, #272]	; (80078ac <UART_SetConfig+0x2dc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d125      	bne.n	80077ec <UART_SetConfig+0x21c>
 80077a0:	4b3e      	ldr	r3, [pc, #248]	; (800789c <UART_SetConfig+0x2cc>)
 80077a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ae:	d017      	beq.n	80077e0 <UART_SetConfig+0x210>
 80077b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b4:	d817      	bhi.n	80077e6 <UART_SetConfig+0x216>
 80077b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ba:	d00b      	beq.n	80077d4 <UART_SetConfig+0x204>
 80077bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c0:	d811      	bhi.n	80077e6 <UART_SetConfig+0x216>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <UART_SetConfig+0x1fe>
 80077c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077ca:	d006      	beq.n	80077da <UART_SetConfig+0x20a>
 80077cc:	e00b      	b.n	80077e6 <UART_SetConfig+0x216>
 80077ce:	2300      	movs	r3, #0
 80077d0:	77fb      	strb	r3, [r7, #31]
 80077d2:	e0a1      	b.n	8007918 <UART_SetConfig+0x348>
 80077d4:	2302      	movs	r3, #2
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e09e      	b.n	8007918 <UART_SetConfig+0x348>
 80077da:	2304      	movs	r3, #4
 80077dc:	77fb      	strb	r3, [r7, #31]
 80077de:	e09b      	b.n	8007918 <UART_SetConfig+0x348>
 80077e0:	2308      	movs	r3, #8
 80077e2:	77fb      	strb	r3, [r7, #31]
 80077e4:	e098      	b.n	8007918 <UART_SetConfig+0x348>
 80077e6:	2310      	movs	r3, #16
 80077e8:	77fb      	strb	r3, [r7, #31]
 80077ea:	e095      	b.n	8007918 <UART_SetConfig+0x348>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <UART_SetConfig+0x2e0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d125      	bne.n	8007842 <UART_SetConfig+0x272>
 80077f6:	4b29      	ldr	r3, [pc, #164]	; (800789c <UART_SetConfig+0x2cc>)
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007804:	d017      	beq.n	8007836 <UART_SetConfig+0x266>
 8007806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800780a:	d817      	bhi.n	800783c <UART_SetConfig+0x26c>
 800780c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007810:	d00b      	beq.n	800782a <UART_SetConfig+0x25a>
 8007812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007816:	d811      	bhi.n	800783c <UART_SetConfig+0x26c>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <UART_SetConfig+0x254>
 800781c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007820:	d006      	beq.n	8007830 <UART_SetConfig+0x260>
 8007822:	e00b      	b.n	800783c <UART_SetConfig+0x26c>
 8007824:	2301      	movs	r3, #1
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e076      	b.n	8007918 <UART_SetConfig+0x348>
 800782a:	2302      	movs	r3, #2
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e073      	b.n	8007918 <UART_SetConfig+0x348>
 8007830:	2304      	movs	r3, #4
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e070      	b.n	8007918 <UART_SetConfig+0x348>
 8007836:	2308      	movs	r3, #8
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e06d      	b.n	8007918 <UART_SetConfig+0x348>
 800783c:	2310      	movs	r3, #16
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e06a      	b.n	8007918 <UART_SetConfig+0x348>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1b      	ldr	r2, [pc, #108]	; (80078b4 <UART_SetConfig+0x2e4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d138      	bne.n	80078be <UART_SetConfig+0x2ee>
 800784c:	4b13      	ldr	r3, [pc, #76]	; (800789c <UART_SetConfig+0x2cc>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800785a:	d017      	beq.n	800788c <UART_SetConfig+0x2bc>
 800785c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007860:	d82a      	bhi.n	80078b8 <UART_SetConfig+0x2e8>
 8007862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007866:	d00b      	beq.n	8007880 <UART_SetConfig+0x2b0>
 8007868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800786c:	d824      	bhi.n	80078b8 <UART_SetConfig+0x2e8>
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <UART_SetConfig+0x2aa>
 8007872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007876:	d006      	beq.n	8007886 <UART_SetConfig+0x2b6>
 8007878:	e01e      	b.n	80078b8 <UART_SetConfig+0x2e8>
 800787a:	2300      	movs	r3, #0
 800787c:	77fb      	strb	r3, [r7, #31]
 800787e:	e04b      	b.n	8007918 <UART_SetConfig+0x348>
 8007880:	2302      	movs	r3, #2
 8007882:	77fb      	strb	r3, [r7, #31]
 8007884:	e048      	b.n	8007918 <UART_SetConfig+0x348>
 8007886:	2304      	movs	r3, #4
 8007888:	77fb      	strb	r3, [r7, #31]
 800788a:	e045      	b.n	8007918 <UART_SetConfig+0x348>
 800788c:	2308      	movs	r3, #8
 800788e:	77fb      	strb	r3, [r7, #31]
 8007890:	e042      	b.n	8007918 <UART_SetConfig+0x348>
 8007892:	bf00      	nop
 8007894:	efff69f3 	.word	0xefff69f3
 8007898:	40011000 	.word	0x40011000
 800789c:	40023800 	.word	0x40023800
 80078a0:	40004400 	.word	0x40004400
 80078a4:	40004800 	.word	0x40004800
 80078a8:	40004c00 	.word	0x40004c00
 80078ac:	40005000 	.word	0x40005000
 80078b0:	40011400 	.word	0x40011400
 80078b4:	40007800 	.word	0x40007800
 80078b8:	2310      	movs	r3, #16
 80078ba:	77fb      	strb	r3, [r7, #31]
 80078bc:	e02c      	b.n	8007918 <UART_SetConfig+0x348>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a72      	ldr	r2, [pc, #456]	; (8007a8c <UART_SetConfig+0x4bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d125      	bne.n	8007914 <UART_SetConfig+0x344>
 80078c8:	4b71      	ldr	r3, [pc, #452]	; (8007a90 <UART_SetConfig+0x4c0>)
 80078ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80078d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078d6:	d017      	beq.n	8007908 <UART_SetConfig+0x338>
 80078d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80078dc:	d817      	bhi.n	800790e <UART_SetConfig+0x33e>
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e2:	d00b      	beq.n	80078fc <UART_SetConfig+0x32c>
 80078e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e8:	d811      	bhi.n	800790e <UART_SetConfig+0x33e>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <UART_SetConfig+0x326>
 80078ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f2:	d006      	beq.n	8007902 <UART_SetConfig+0x332>
 80078f4:	e00b      	b.n	800790e <UART_SetConfig+0x33e>
 80078f6:	2300      	movs	r3, #0
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e00d      	b.n	8007918 <UART_SetConfig+0x348>
 80078fc:	2302      	movs	r3, #2
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e00a      	b.n	8007918 <UART_SetConfig+0x348>
 8007902:	2304      	movs	r3, #4
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e007      	b.n	8007918 <UART_SetConfig+0x348>
 8007908:	2308      	movs	r3, #8
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e004      	b.n	8007918 <UART_SetConfig+0x348>
 800790e:	2310      	movs	r3, #16
 8007910:	77fb      	strb	r3, [r7, #31]
 8007912:	e001      	b.n	8007918 <UART_SetConfig+0x348>
 8007914:	2310      	movs	r3, #16
 8007916:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007920:	d15b      	bne.n	80079da <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007922:	7ffb      	ldrb	r3, [r7, #31]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d828      	bhi.n	800797a <UART_SetConfig+0x3aa>
 8007928:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0x360>)
 800792a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792e:	bf00      	nop
 8007930:	08007955 	.word	0x08007955
 8007934:	0800795d 	.word	0x0800795d
 8007938:	08007965 	.word	0x08007965
 800793c:	0800797b 	.word	0x0800797b
 8007940:	0800796b 	.word	0x0800796b
 8007944:	0800797b 	.word	0x0800797b
 8007948:	0800797b 	.word	0x0800797b
 800794c:	0800797b 	.word	0x0800797b
 8007950:	08007973 	.word	0x08007973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007954:	f7fc ff32 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8007958:	61b8      	str	r0, [r7, #24]
        break;
 800795a:	e013      	b.n	8007984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800795c:	f7fc ff42 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8007960:	61b8      	str	r0, [r7, #24]
        break;
 8007962:	e00f      	b.n	8007984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007964:	4b4b      	ldr	r3, [pc, #300]	; (8007a94 <UART_SetConfig+0x4c4>)
 8007966:	61bb      	str	r3, [r7, #24]
        break;
 8007968:	e00c      	b.n	8007984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800796a:	f7fc fe15 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 800796e:	61b8      	str	r0, [r7, #24]
        break;
 8007970:	e008      	b.n	8007984 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007976:	61bb      	str	r3, [r7, #24]
        break;
 8007978:	e004      	b.n	8007984 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	77bb      	strb	r3, [r7, #30]
        break;
 8007982:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d074      	beq.n	8007a74 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	005a      	lsls	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	085b      	lsrs	r3, r3, #1
 8007994:	441a      	add	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	fbb2 f3f3 	udiv	r3, r2, r3
 800799e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b0f      	cmp	r3, #15
 80079a4:	d916      	bls.n	80079d4 <UART_SetConfig+0x404>
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ac:	d212      	bcs.n	80079d4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f023 030f 	bic.w	r3, r3, #15
 80079b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	085b      	lsrs	r3, r3, #1
 80079bc:	b29b      	uxth	r3, r3
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	89fb      	ldrh	r3, [r7, #14]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	89fa      	ldrh	r2, [r7, #14]
 80079d0:	60da      	str	r2, [r3, #12]
 80079d2:	e04f      	b.n	8007a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	77bb      	strb	r3, [r7, #30]
 80079d8:	e04c      	b.n	8007a74 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079da:	7ffb      	ldrb	r3, [r7, #31]
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d828      	bhi.n	8007a32 <UART_SetConfig+0x462>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <UART_SetConfig+0x418>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a15 	.word	0x08007a15
 80079f0:	08007a1d 	.word	0x08007a1d
 80079f4:	08007a33 	.word	0x08007a33
 80079f8:	08007a23 	.word	0x08007a23
 80079fc:	08007a33 	.word	0x08007a33
 8007a00:	08007a33 	.word	0x08007a33
 8007a04:	08007a33 	.word	0x08007a33
 8007a08:	08007a2b 	.word	0x08007a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fc fed6 	bl	80047bc <HAL_RCC_GetPCLK1Freq>
 8007a10:	61b8      	str	r0, [r7, #24]
        break;
 8007a12:	e013      	b.n	8007a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a14:	f7fc fee6 	bl	80047e4 <HAL_RCC_GetPCLK2Freq>
 8007a18:	61b8      	str	r0, [r7, #24]
        break;
 8007a1a:	e00f      	b.n	8007a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	; (8007a94 <UART_SetConfig+0x4c4>)
 8007a1e:	61bb      	str	r3, [r7, #24]
        break;
 8007a20:	e00c      	b.n	8007a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a22:	f7fc fdb9 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 8007a26:	61b8      	str	r0, [r7, #24]
        break;
 8007a28:	e008      	b.n	8007a3c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a2e:	61bb      	str	r3, [r7, #24]
        break;
 8007a30:	e004      	b.n	8007a3c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	77bb      	strb	r3, [r7, #30]
        break;
 8007a3a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d018      	beq.n	8007a74 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	085a      	lsrs	r2, r3, #1
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	441a      	add	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	2b0f      	cmp	r3, #15
 8007a5a:	d909      	bls.n	8007a70 <UART_SetConfig+0x4a0>
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a62:	d205      	bcs.n	8007a70 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
 8007a6e:	e001      	b.n	8007a74 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a80:	7fbb      	ldrb	r3, [r7, #30]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3720      	adds	r7, #32
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	40007c00 	.word	0x40007c00
 8007a90:	40023800 	.word	0x40023800
 8007a94:	00f42400 	.word	0x00f42400

08007a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f003 0301 	and.w	r3, r3, #1
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00a      	beq.n	8007ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00a      	beq.n	8007ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	f003 0304 	and.w	r3, r3, #4
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00a      	beq.n	8007b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f003 0320 	and.w	r3, r3, #32
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01a      	beq.n	8007bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b96:	d10a      	bne.n	8007bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bec:	f7fb f82c 	bl	8002c48 <HAL_GetTick>
 8007bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d10e      	bne.n	8007c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f81b 	bl	8007c4a <UART_WaitOnFlagUntilTimeout>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e011      	b.n	8007c42 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2220      	movs	r2, #32
 8007c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b09c      	sub	sp, #112	; 0x70
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	4613      	mov	r3, r2
 8007c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c5a:	e0a7      	b.n	8007dac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c62:	f000 80a3 	beq.w	8007dac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c66:	f7fa ffef 	bl	8002c48 <HAL_GetTick>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d302      	bcc.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x32>
 8007c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d13f      	bne.n	8007cfc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c84:	e853 3f00 	ldrex	r3, [r3]
 8007c88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c90:	667b      	str	r3, [r7, #100]	; 0x64
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ca0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ca2:	e841 2300 	strex	r3, r2, [r1]
 8007ca6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1e6      	bne.n	8007c7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc0:	f023 0301 	bic.w	r3, r3, #1
 8007cc4:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cce:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e5      	bne.n	8007cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2220      	movs	r2, #32
 8007ce6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2220      	movs	r2, #32
 8007cec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e068      	b.n	8007dce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d050      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d18:	d148      	bne.n	8007dac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	637b      	str	r3, [r7, #52]	; 0x34
 8007d44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e6      	bne.n	8007d24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	e853 3f00 	ldrex	r3, [r3]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f023 0301 	bic.w	r3, r3, #1
 8007d6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d76:	623a      	str	r2, [r7, #32]
 8007d78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7a:	69f9      	ldr	r1, [r7, #28]
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1e5      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2220      	movs	r2, #32
 8007d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007da8:	2303      	movs	r3, #3
 8007daa:	e010      	b.n	8007dce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69da      	ldr	r2, [r3, #28]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	4013      	ands	r3, r2
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	bf0c      	ite	eq
 8007dbc:	2301      	moveq	r3, #1
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	79fb      	ldrb	r3, [r7, #7]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	f43f af48 	beq.w	8007c5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3770      	adds	r7, #112	; 0x70
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b097      	sub	sp, #92	; 0x5c
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	88fa      	ldrh	r2, [r7, #6]
 8007df0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0a:	d10e      	bne.n	8007e2a <UART_Start_Receive_IT+0x52>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <UART_Start_Receive_IT+0x48>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e1e:	e02d      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	22ff      	movs	r2, #255	; 0xff
 8007e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e28:	e028      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <UART_Start_Receive_IT+0x76>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d104      	bne.n	8007e44 <UART_Start_Receive_IT+0x6c>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	22ff      	movs	r2, #255	; 0xff
 8007e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e42:	e01b      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	227f      	movs	r2, #127	; 0x7f
 8007e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e4c:	e016      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e56:	d10d      	bne.n	8007e74 <UART_Start_Receive_IT+0x9c>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d104      	bne.n	8007e6a <UART_Start_Receive_IT+0x92>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	227f      	movs	r2, #127	; 0x7f
 8007e64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e68:	e008      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	223f      	movs	r2, #63	; 0x3f
 8007e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e72:	e003      	b.n	8007e7c <UART_Start_Receive_IT+0xa4>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2222      	movs	r2, #34	; 0x22
 8007e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	3308      	adds	r3, #8
 8007eaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eac:	64ba      	str	r2, [r7, #72]	; 0x48
 8007eae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eb4:	e841 2300 	strex	r3, r2, [r1]
 8007eb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e5      	bne.n	8007e8c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec8:	d107      	bne.n	8007eda <UART_Start_Receive_IT+0x102>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d103      	bne.n	8007eda <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4a21      	ldr	r2, [pc, #132]	; (8007f5c <UART_Start_Receive_IT+0x184>)
 8007ed6:	669a      	str	r2, [r3, #104]	; 0x68
 8007ed8:	e002      	b.n	8007ee0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <UART_Start_Receive_IT+0x188>)
 8007ede:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d019      	beq.n	8007f1c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
 8007f08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e6      	bne.n	8007ee8 <UART_Start_Receive_IT+0x110>
 8007f1a:	e018      	b.n	8007f4e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f043 0320 	orr.w	r3, r3, #32
 8007f30:	653b      	str	r3, [r7, #80]	; 0x50
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3a:	623b      	str	r3, [r7, #32]
 8007f3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	69f9      	ldr	r1, [r7, #28]
 8007f40:	6a3a      	ldr	r2, [r7, #32]
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e6      	bne.n	8007f1c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	375c      	adds	r7, #92	; 0x5c
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	08008213 	.word	0x08008213
 8007f60:	080080ad 	.word	0x080080ad

08007f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b095      	sub	sp, #84	; 0x54
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	e853 3f00 	ldrex	r3, [r3]
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e6      	bne.n	8007f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa6:	6a3b      	ldr	r3, [r7, #32]
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f023 0301 	bic.w	r3, r3, #1
 8007fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fc6:	e841 2300 	strex	r3, r2, [r1]
 8007fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1e5      	bne.n	8007f9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d118      	bne.n	800800c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	f023 0310 	bic.w	r3, r3, #16
 8007fee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6979      	ldr	r1, [r7, #20]
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	613b      	str	r3, [r7, #16]
   return(result);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2220      	movs	r2, #32
 8008010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008020:	bf00      	nop
 8008022:	3754      	adds	r7, #84	; 0x54
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff faaa 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	60bb      	str	r3, [r7, #8]
   return(result);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6979      	ldr	r1, [r7, #20]
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	613b      	str	r3, [r7, #16]
   return(result);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e6      	bne.n	8008060 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fa76 	bl	8007590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080a4:	bf00      	nop
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b096      	sub	sp, #88	; 0x58
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080c4:	2b22      	cmp	r3, #34	; 0x22
 80080c6:	f040 8098 	bne.w	80081fa <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80080d8:	b2d9      	uxtb	r1, r3
 80080da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e4:	400a      	ands	r2, r1
 80080e6:	b2d2      	uxtb	r2, r2
 80080e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d17b      	bne.n	800820a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	e853 3f00 	ldrex	r3, [r3]
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008126:	653b      	str	r3, [r7, #80]	; 0x50
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
 8008132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008138:	e841 2300 	strex	r3, r2, [r1]
 800813c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1e6      	bne.n	8008112 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3308      	adds	r3, #8
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	623b      	str	r3, [r7, #32]
   return(result);
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	f023 0301 	bic.w	r3, r3, #1
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008164:	633a      	str	r2, [r7, #48]	; 0x30
 8008166:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800816a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e5      	bne.n	8008144 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008190:	2b01      	cmp	r3, #1
 8008192:	d12e      	bne.n	80081f2 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0310 	bic.w	r3, r3, #16
 80081ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	69b9      	ldr	r1, [r7, #24]
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	617b      	str	r3, [r7, #20]
   return(result);
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e6      	bne.n	800819a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	f003 0310 	and.w	r3, r3, #16
 80081d6:	2b10      	cmp	r3, #16
 80081d8:	d103      	bne.n	80081e2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2210      	movs	r2, #16
 80081e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081e8:	4619      	mov	r1, r3
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7ff f9e4 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081f0:	e00b      	b.n	800820a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7f9 fa44 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 80081f8:	e007      	b.n	800820a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0208 	orr.w	r2, r2, #8
 8008208:	619a      	str	r2, [r3, #24]
}
 800820a:	bf00      	nop
 800820c:	3758      	adds	r7, #88	; 0x58
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b096      	sub	sp, #88	; 0x58
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008220:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800822a:	2b22      	cmp	r3, #34	; 0x22
 800822c:	f040 8098 	bne.w	8008360 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008240:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008244:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008248:	4013      	ands	r3, r2
 800824a:	b29a      	uxth	r2, r3
 800824c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008272:	b29b      	uxth	r3, r3
 8008274:	2b00      	cmp	r3, #0
 8008276:	d17b      	bne.n	8008370 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800828c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
 8008298:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800829c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e6      	bne.n	8008278 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f023 0301 	bic.w	r3, r3, #1
 80082c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3308      	adds	r3, #8
 80082c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082d2:	e841 2300 	strex	r3, r2, [r1]
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1e5      	bne.n	80082aa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d12e      	bne.n	8008358 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	60bb      	str	r3, [r7, #8]
   return(result);
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	f023 0310 	bic.w	r3, r3, #16
 8008314:	647b      	str	r3, [r7, #68]	; 0x44
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831e:	61bb      	str	r3, [r7, #24]
 8008320:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	613b      	str	r3, [r7, #16]
   return(result);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e6      	bne.n	8008300 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f003 0310 	and.w	r3, r3, #16
 800833c:	2b10      	cmp	r3, #16
 800833e:	d103      	bne.n	8008348 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2210      	movs	r2, #16
 8008346:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff f931 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008356:	e00b      	b.n	8008370 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7f9 f991 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 800835e:	e007      	b.n	8008370 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f042 0208 	orr.w	r2, r2, #8
 800836e:	619a      	str	r2, [r3, #24]
}
 8008370:	bf00      	nop
 8008372:	3758      	adds	r7, #88	; 0x58
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008378:	b084      	sub	sp, #16
 800837a:	b580      	push	{r7, lr}
 800837c:	b084      	sub	sp, #16
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	f107 001c 	add.w	r0, r7, #28
 8008386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2b01      	cmp	r3, #1
 800838e:	d120      	bne.n	80083d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	4b20      	ldr	r3, [pc, #128]	; (8008424 <USB_CoreInit+0xac>)
 80083a2:	4013      	ands	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d105      	bne.n	80083c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa96 	bl	80088f8 <USB_CoreReset>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]
 80083d0:	e010      	b.n	80083f4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa8a 	bl	80088f8 <USB_CoreReset>
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80083f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d10b      	bne.n	8008412 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f043 0206 	orr.w	r2, r3, #6
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f043 0220 	orr.w	r2, r3, #32
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008412:	7bfb      	ldrb	r3, [r7, #15]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800841e:	b004      	add	sp, #16
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	ffbdffbf 	.word	0xffbdffbf

08008428 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f023 0201 	bic.w	r2, r3, #1
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d115      	bne.n	8008498 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008478:	2001      	movs	r0, #1
 800847a:	f7fa fbf1 	bl	8002c60 <HAL_Delay>
      ms++;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fa29 	bl	80088dc <USB_GetMode>
 800848a:	4603      	mov	r3, r0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d01e      	beq.n	80084ce <USB_SetCurrentMode+0x84>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2b31      	cmp	r3, #49	; 0x31
 8008494:	d9f0      	bls.n	8008478 <USB_SetCurrentMode+0x2e>
 8008496:	e01a      	b.n	80084ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d115      	bne.n	80084ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80084aa:	2001      	movs	r0, #1
 80084ac:	f7fa fbd8 	bl	8002c60 <HAL_Delay>
      ms++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3301      	adds	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fa10 	bl	80088dc <USB_GetMode>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <USB_SetCurrentMode+0x84>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b31      	cmp	r3, #49	; 0x31
 80084c6:	d9f0      	bls.n	80084aa <USB_SetCurrentMode+0x60>
 80084c8:	e001      	b.n	80084ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e005      	b.n	80084da <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b32      	cmp	r3, #50	; 0x32
 80084d2:	d101      	bne.n	80084d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e000      	b.n	80084da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084e4:	b084      	sub	sp, #16
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80084f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	e009      	b.n	8008518 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	3340      	adds	r3, #64	; 0x40
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	2200      	movs	r2, #0
 8008510:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	3301      	adds	r3, #1
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	2b0e      	cmp	r3, #14
 800851c:	d9f2      	bls.n	8008504 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800851e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11c      	bne.n	800855e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008532:	f043 0302 	orr.w	r3, r3, #2
 8008536:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e005      	b.n	800856a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008570:	461a      	mov	r2, r3
 8008572:	2300      	movs	r3, #0
 8008574:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857c:	4619      	mov	r1, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	461a      	mov	r2, r3
 8008586:	680b      	ldr	r3, [r1, #0]
 8008588:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10c      	bne.n	80085aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d104      	bne.n	80085a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008596:	2100      	movs	r1, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f965 	bl	8008868 <USB_SetDevSpeed>
 800859e:	e008      	b.n	80085b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80085a0:	2101      	movs	r1, #1
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f960 	bl	8008868 <USB_SetDevSpeed>
 80085a8:	e003      	b.n	80085b2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80085aa:	2103      	movs	r1, #3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f95b 	bl	8008868 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80085b2:	2110      	movs	r1, #16
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 f8f3 	bl	80087a0 <USB_FlushTxFifo>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f91f 	bl	8008808 <USB_FlushRxFifo>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085da:	461a      	mov	r2, r3
 80085dc:	2300      	movs	r3, #0
 80085de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e6:	461a      	mov	r2, r3
 80085e8:	2300      	movs	r3, #0
 80085ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f2:	461a      	mov	r2, r3
 80085f4:	2300      	movs	r3, #0
 80085f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
 80085fc:	e043      	b.n	8008686 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008614:	d118      	bne.n	8008648 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	461a      	mov	r2, r3
 800862a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	e013      	b.n	800865a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	461a      	mov	r2, r3
 8008640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008644:	6013      	str	r3, [r2, #0]
 8008646:	e008      	b.n	800865a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008666:	461a      	mov	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008678:	461a      	mov	r2, r3
 800867a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800867e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	3301      	adds	r3, #1
 8008684:	613b      	str	r3, [r7, #16]
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	429a      	cmp	r2, r3
 800868c:	d3b7      	bcc.n	80085fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800868e:	2300      	movs	r3, #0
 8008690:	613b      	str	r3, [r7, #16]
 8008692:	e043      	b.n	800871c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086aa:	d118      	bne.n	80086de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086be:	461a      	mov	r2, r3
 80086c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e013      	b.n	80086f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d4:	461a      	mov	r2, r3
 80086d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e008      	b.n	80086f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ea:	461a      	mov	r2, r3
 80086ec:	2300      	movs	r3, #0
 80086ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	461a      	mov	r2, r3
 80086fe:	2300      	movs	r3, #0
 8008700:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800870e:	461a      	mov	r2, r3
 8008710:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008714:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	429a      	cmp	r2, r3
 8008722:	d3b7      	bcc.n	8008694 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008736:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008744:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f043 0210 	orr.w	r2, r3, #16
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699a      	ldr	r2, [r3, #24]
 800875c:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <USB_DevInit+0x2b4>)
 800875e:	4313      	orrs	r3, r2
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f043 0208 	orr.w	r2, r3, #8
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d105      	bne.n	8008788 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	699a      	ldr	r2, [r3, #24]
 8008780:	4b06      	ldr	r3, [pc, #24]	; (800879c <USB_DevInit+0x2b8>)
 8008782:	4313      	orrs	r3, r2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008788:	7dfb      	ldrb	r3, [r7, #23]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008794:	b004      	add	sp, #16
 8008796:	4770      	bx	lr
 8008798:	803c3800 	.word	0x803c3800
 800879c:	40000004 	.word	0x40000004

080087a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80087aa:	2300      	movs	r3, #0
 80087ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	3301      	adds	r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a13      	ldr	r2, [pc, #76]	; (8008804 <USB_FlushTxFifo+0x64>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d901      	bls.n	80087c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e01b      	b.n	80087f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	daf2      	bge.n	80087ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	019b      	lsls	r3, r3, #6
 80087d0:	f043 0220 	orr.w	r2, r3, #32
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <USB_FlushTxFifo+0x64>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e006      	b.n	80087f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d0f0      	beq.n	80087d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	00030d40 	.word	0x00030d40

08008808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4a11      	ldr	r2, [pc, #68]	; (8008864 <USB_FlushRxFifo+0x5c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d901      	bls.n	8008826 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e018      	b.n	8008858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	daf2      	bge.n	8008814 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2210      	movs	r2, #16
 8008836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4a08      	ldr	r2, [pc, #32]	; (8008864 <USB_FlushRxFifo+0x5c>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e006      	b.n	8008858 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	f003 0310 	and.w	r3, r3, #16
 8008852:	2b10      	cmp	r3, #16
 8008854:	d0f0      	beq.n	8008838 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	00030d40 	.word	0x00030d40

08008868 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	460b      	mov	r3, r1
 8008872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	78fb      	ldrb	r3, [r7, #3]
 8008882:	68f9      	ldr	r1, [r7, #12]
 8008884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008888:	4313      	orrs	r3, r2
 800888a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800888c:	2300      	movs	r3, #0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088b4:	f023 0303 	bic.w	r3, r3, #3
 80088b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088c8:	f043 0302 	orr.w	r3, r3, #2
 80088cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	f003 0301 	and.w	r3, r3, #1
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a13      	ldr	r2, [pc, #76]	; (800895c <USB_CoreReset+0x64>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d901      	bls.n	8008916 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e01b      	b.n	800894e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	daf2      	bge.n	8008904 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3301      	adds	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <USB_CoreReset+0x64>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d901      	bls.n	8008940 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e006      	b.n	800894e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b01      	cmp	r3, #1
 800894a:	d0f0      	beq.n	800892e <USB_CoreReset+0x36>

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	00030d40 	.word	0x00030d40

08008960 <arm_fir_init_f32>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	9f06      	ldr	r7, [sp, #24]
 8008964:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8008968:	460e      	mov	r6, r1
 800896a:	6082      	str	r2, [r0, #8]
 800896c:	443c      	add	r4, r7
 800896e:	4605      	mov	r5, r0
 8008970:	8006      	strh	r6, [r0, #0]
 8008972:	2100      	movs	r1, #0
 8008974:	19a2      	adds	r2, r4, r6
 8008976:	4618      	mov	r0, r3
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	f000 f831 	bl	80089e0 <memset>
 800897e:	6068      	str	r0, [r5, #4]
 8008980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008982:	bf00      	nop

08008984 <atoi>:
 8008984:	220a      	movs	r2, #10
 8008986:	2100      	movs	r1, #0
 8008988:	f000 bdb2 	b.w	80094f0 <strtol>

0800898c <__errno>:
 800898c:	4b01      	ldr	r3, [pc, #4]	; (8008994 <__errno+0x8>)
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000010 	.word	0x20000010

08008998 <__libc_init_array>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4d0d      	ldr	r5, [pc, #52]	; (80089d0 <__libc_init_array+0x38>)
 800899c:	4c0d      	ldr	r4, [pc, #52]	; (80089d4 <__libc_init_array+0x3c>)
 800899e:	1b64      	subs	r4, r4, r5
 80089a0:	10a4      	asrs	r4, r4, #2
 80089a2:	2600      	movs	r6, #0
 80089a4:	42a6      	cmp	r6, r4
 80089a6:	d109      	bne.n	80089bc <__libc_init_array+0x24>
 80089a8:	4d0b      	ldr	r5, [pc, #44]	; (80089d8 <__libc_init_array+0x40>)
 80089aa:	4c0c      	ldr	r4, [pc, #48]	; (80089dc <__libc_init_array+0x44>)
 80089ac:	f003 fbc6 	bl	800c13c <_init>
 80089b0:	1b64      	subs	r4, r4, r5
 80089b2:	10a4      	asrs	r4, r4, #2
 80089b4:	2600      	movs	r6, #0
 80089b6:	42a6      	cmp	r6, r4
 80089b8:	d105      	bne.n	80089c6 <__libc_init_array+0x2e>
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c0:	4798      	blx	r3
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7ee      	b.n	80089a4 <__libc_init_array+0xc>
 80089c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ca:	4798      	blx	r3
 80089cc:	3601      	adds	r6, #1
 80089ce:	e7f2      	b.n	80089b6 <__libc_init_array+0x1e>
 80089d0:	0800c5f0 	.word	0x0800c5f0
 80089d4:	0800c5f0 	.word	0x0800c5f0
 80089d8:	0800c5f0 	.word	0x0800c5f0
 80089dc:	0800c5f4 	.word	0x0800c5f4

080089e0 <memset>:
 80089e0:	4402      	add	r2, r0
 80089e2:	4603      	mov	r3, r0
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d100      	bne.n	80089ea <memset+0xa>
 80089e8:	4770      	bx	lr
 80089ea:	f803 1b01 	strb.w	r1, [r3], #1
 80089ee:	e7f9      	b.n	80089e4 <memset+0x4>

080089f0 <__cvt>:
 80089f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089f4:	ec55 4b10 	vmov	r4, r5, d0
 80089f8:	2d00      	cmp	r5, #0
 80089fa:	460e      	mov	r6, r1
 80089fc:	4619      	mov	r1, r3
 80089fe:	462b      	mov	r3, r5
 8008a00:	bfbb      	ittet	lt
 8008a02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008a06:	461d      	movlt	r5, r3
 8008a08:	2300      	movge	r3, #0
 8008a0a:	232d      	movlt	r3, #45	; 0x2d
 8008a0c:	700b      	strb	r3, [r1, #0]
 8008a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008a14:	4691      	mov	r9, r2
 8008a16:	f023 0820 	bic.w	r8, r3, #32
 8008a1a:	bfbc      	itt	lt
 8008a1c:	4622      	movlt	r2, r4
 8008a1e:	4614      	movlt	r4, r2
 8008a20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a24:	d005      	beq.n	8008a32 <__cvt+0x42>
 8008a26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a2a:	d100      	bne.n	8008a2e <__cvt+0x3e>
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	2102      	movs	r1, #2
 8008a30:	e000      	b.n	8008a34 <__cvt+0x44>
 8008a32:	2103      	movs	r1, #3
 8008a34:	ab03      	add	r3, sp, #12
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	ab02      	add	r3, sp, #8
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	ec45 4b10 	vmov	d0, r4, r5
 8008a40:	4653      	mov	r3, sl
 8008a42:	4632      	mov	r2, r6
 8008a44:	f000 fe0c 	bl	8009660 <_dtoa_r>
 8008a48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	d102      	bne.n	8008a56 <__cvt+0x66>
 8008a50:	f019 0f01 	tst.w	r9, #1
 8008a54:	d022      	beq.n	8008a9c <__cvt+0xac>
 8008a56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a5a:	eb07 0906 	add.w	r9, r7, r6
 8008a5e:	d110      	bne.n	8008a82 <__cvt+0x92>
 8008a60:	783b      	ldrb	r3, [r7, #0]
 8008a62:	2b30      	cmp	r3, #48	; 0x30
 8008a64:	d10a      	bne.n	8008a7c <__cvt+0x8c>
 8008a66:	2200      	movs	r2, #0
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	4629      	mov	r1, r5
 8008a6e:	f7f8 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8008a72:	b918      	cbnz	r0, 8008a7c <__cvt+0x8c>
 8008a74:	f1c6 0601 	rsb	r6, r6, #1
 8008a78:	f8ca 6000 	str.w	r6, [sl]
 8008a7c:	f8da 3000 	ldr.w	r3, [sl]
 8008a80:	4499      	add	r9, r3
 8008a82:	2200      	movs	r2, #0
 8008a84:	2300      	movs	r3, #0
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f8 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 8008a8e:	b108      	cbz	r0, 8008a94 <__cvt+0xa4>
 8008a90:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a94:	2230      	movs	r2, #48	; 0x30
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	454b      	cmp	r3, r9
 8008a9a:	d307      	bcc.n	8008aac <__cvt+0xbc>
 8008a9c:	9b03      	ldr	r3, [sp, #12]
 8008a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aa0:	1bdb      	subs	r3, r3, r7
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	b004      	add	sp, #16
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	1c59      	adds	r1, r3, #1
 8008aae:	9103      	str	r1, [sp, #12]
 8008ab0:	701a      	strb	r2, [r3, #0]
 8008ab2:	e7f0      	b.n	8008a96 <__cvt+0xa6>

08008ab4 <__exponent>:
 8008ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2900      	cmp	r1, #0
 8008aba:	bfb8      	it	lt
 8008abc:	4249      	neglt	r1, r1
 8008abe:	f803 2b02 	strb.w	r2, [r3], #2
 8008ac2:	bfb4      	ite	lt
 8008ac4:	222d      	movlt	r2, #45	; 0x2d
 8008ac6:	222b      	movge	r2, #43	; 0x2b
 8008ac8:	2909      	cmp	r1, #9
 8008aca:	7042      	strb	r2, [r0, #1]
 8008acc:	dd2a      	ble.n	8008b24 <__exponent+0x70>
 8008ace:	f10d 0407 	add.w	r4, sp, #7
 8008ad2:	46a4      	mov	ip, r4
 8008ad4:	270a      	movs	r7, #10
 8008ad6:	46a6      	mov	lr, r4
 8008ad8:	460a      	mov	r2, r1
 8008ada:	fb91 f6f7 	sdiv	r6, r1, r7
 8008ade:	fb07 1516 	mls	r5, r7, r6, r1
 8008ae2:	3530      	adds	r5, #48	; 0x30
 8008ae4:	2a63      	cmp	r2, #99	; 0x63
 8008ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008aea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008aee:	4631      	mov	r1, r6
 8008af0:	dcf1      	bgt.n	8008ad6 <__exponent+0x22>
 8008af2:	3130      	adds	r1, #48	; 0x30
 8008af4:	f1ae 0502 	sub.w	r5, lr, #2
 8008af8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008afc:	1c44      	adds	r4, r0, #1
 8008afe:	4629      	mov	r1, r5
 8008b00:	4561      	cmp	r1, ip
 8008b02:	d30a      	bcc.n	8008b1a <__exponent+0x66>
 8008b04:	f10d 0209 	add.w	r2, sp, #9
 8008b08:	eba2 020e 	sub.w	r2, r2, lr
 8008b0c:	4565      	cmp	r5, ip
 8008b0e:	bf88      	it	hi
 8008b10:	2200      	movhi	r2, #0
 8008b12:	4413      	add	r3, r2
 8008b14:	1a18      	subs	r0, r3, r0
 8008b16:	b003      	add	sp, #12
 8008b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b22:	e7ed      	b.n	8008b00 <__exponent+0x4c>
 8008b24:	2330      	movs	r3, #48	; 0x30
 8008b26:	3130      	adds	r1, #48	; 0x30
 8008b28:	7083      	strb	r3, [r0, #2]
 8008b2a:	70c1      	strb	r1, [r0, #3]
 8008b2c:	1d03      	adds	r3, r0, #4
 8008b2e:	e7f1      	b.n	8008b14 <__exponent+0x60>

08008b30 <_printf_float>:
 8008b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	ed2d 8b02 	vpush	{d8}
 8008b38:	b08d      	sub	sp, #52	; 0x34
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008b40:	4616      	mov	r6, r2
 8008b42:	461f      	mov	r7, r3
 8008b44:	4605      	mov	r5, r0
 8008b46:	f001 fb79 	bl	800a23c <_localeconv_r>
 8008b4a:	f8d0 a000 	ldr.w	sl, [r0]
 8008b4e:	4650      	mov	r0, sl
 8008b50:	f7f7 fb5e 	bl	8000210 <strlen>
 8008b54:	2300      	movs	r3, #0
 8008b56:	930a      	str	r3, [sp, #40]	; 0x28
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	9305      	str	r3, [sp, #20]
 8008b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008b64:	3307      	adds	r3, #7
 8008b66:	f023 0307 	bic.w	r3, r3, #7
 8008b6a:	f103 0208 	add.w	r2, r3, #8
 8008b6e:	f8c8 2000 	str.w	r2, [r8]
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b82:	9307      	str	r3, [sp, #28]
 8008b84:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b88:	ee08 0a10 	vmov	s16, r0
 8008b8c:	4b9f      	ldr	r3, [pc, #636]	; (8008e0c <_printf_float+0x2dc>)
 8008b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b92:	f04f 32ff 	mov.w	r2, #4294967295
 8008b96:	f7f7 ffe9 	bl	8000b6c <__aeabi_dcmpun>
 8008b9a:	bb88      	cbnz	r0, 8008c00 <_printf_float+0xd0>
 8008b9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ba0:	4b9a      	ldr	r3, [pc, #616]	; (8008e0c <_printf_float+0x2dc>)
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	f7f7 ffc3 	bl	8000b30 <__aeabi_dcmple>
 8008baa:	bb48      	cbnz	r0, 8008c00 <_printf_float+0xd0>
 8008bac:	2200      	movs	r2, #0
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4640      	mov	r0, r8
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	f7f7 ffb2 	bl	8000b1c <__aeabi_dcmplt>
 8008bb8:	b110      	cbz	r0, 8008bc0 <_printf_float+0x90>
 8008bba:	232d      	movs	r3, #45	; 0x2d
 8008bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc0:	4b93      	ldr	r3, [pc, #588]	; (8008e10 <_printf_float+0x2e0>)
 8008bc2:	4894      	ldr	r0, [pc, #592]	; (8008e14 <_printf_float+0x2e4>)
 8008bc4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008bc8:	bf94      	ite	ls
 8008bca:	4698      	movls	r8, r3
 8008bcc:	4680      	movhi	r8, r0
 8008bce:	2303      	movs	r3, #3
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	9b05      	ldr	r3, [sp, #20]
 8008bd4:	f023 0204 	bic.w	r2, r3, #4
 8008bd8:	6022      	str	r2, [r4, #0]
 8008bda:	f04f 0900 	mov.w	r9, #0
 8008bde:	9700      	str	r7, [sp, #0]
 8008be0:	4633      	mov	r3, r6
 8008be2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008be4:	4621      	mov	r1, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f9d8 	bl	8008f9c <_printf_common>
 8008bec:	3001      	adds	r0, #1
 8008bee:	f040 8090 	bne.w	8008d12 <_printf_float+0x1e2>
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf6:	b00d      	add	sp, #52	; 0x34
 8008bf8:	ecbd 8b02 	vpop	{d8}
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	4640      	mov	r0, r8
 8008c06:	4649      	mov	r1, r9
 8008c08:	f7f7 ffb0 	bl	8000b6c <__aeabi_dcmpun>
 8008c0c:	b140      	cbz	r0, 8008c20 <_printf_float+0xf0>
 8008c0e:	464b      	mov	r3, r9
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	bfbc      	itt	lt
 8008c14:	232d      	movlt	r3, #45	; 0x2d
 8008c16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c1a:	487f      	ldr	r0, [pc, #508]	; (8008e18 <_printf_float+0x2e8>)
 8008c1c:	4b7f      	ldr	r3, [pc, #508]	; (8008e1c <_printf_float+0x2ec>)
 8008c1e:	e7d1      	b.n	8008bc4 <_printf_float+0x94>
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008c26:	9206      	str	r2, [sp, #24]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	d13f      	bne.n	8008cac <_printf_float+0x17c>
 8008c2c:	2306      	movs	r3, #6
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	9b05      	ldr	r3, [sp, #20]
 8008c32:	6861      	ldr	r1, [r4, #4]
 8008c34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	ab0a      	add	r3, sp, #40	; 0x28
 8008c3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008c42:	ab09      	add	r3, sp, #36	; 0x24
 8008c44:	ec49 8b10 	vmov	d0, r8, r9
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	6022      	str	r2, [r4, #0]
 8008c4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7ff fecd 	bl	80089f0 <__cvt>
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c5a:	2b47      	cmp	r3, #71	; 0x47
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	d108      	bne.n	8008c72 <_printf_float+0x142>
 8008c60:	1cc8      	adds	r0, r1, #3
 8008c62:	db02      	blt.n	8008c6a <_printf_float+0x13a>
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	4299      	cmp	r1, r3
 8008c68:	dd41      	ble.n	8008cee <_printf_float+0x1be>
 8008c6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008c6e:	fa5f fb8b 	uxtb.w	fp, fp
 8008c72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c76:	d820      	bhi.n	8008cba <_printf_float+0x18a>
 8008c78:	3901      	subs	r1, #1
 8008c7a:	465a      	mov	r2, fp
 8008c7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c80:	9109      	str	r1, [sp, #36]	; 0x24
 8008c82:	f7ff ff17 	bl	8008ab4 <__exponent>
 8008c86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c88:	1813      	adds	r3, r2, r0
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	4681      	mov	r9, r0
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	dc02      	bgt.n	8008c98 <_printf_float+0x168>
 8008c92:	6822      	ldr	r2, [r4, #0]
 8008c94:	07d2      	lsls	r2, r2, #31
 8008c96:	d501      	bpl.n	8008c9c <_printf_float+0x16c>
 8008c98:	3301      	adds	r3, #1
 8008c9a:	6123      	str	r3, [r4, #16]
 8008c9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d09c      	beq.n	8008bde <_printf_float+0xae>
 8008ca4:	232d      	movs	r3, #45	; 0x2d
 8008ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008caa:	e798      	b.n	8008bde <_printf_float+0xae>
 8008cac:	9a06      	ldr	r2, [sp, #24]
 8008cae:	2a47      	cmp	r2, #71	; 0x47
 8008cb0:	d1be      	bne.n	8008c30 <_printf_float+0x100>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1bc      	bne.n	8008c30 <_printf_float+0x100>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7b9      	b.n	8008c2e <_printf_float+0xfe>
 8008cba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008cbe:	d118      	bne.n	8008cf2 <_printf_float+0x1c2>
 8008cc0:	2900      	cmp	r1, #0
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	dd0b      	ble.n	8008cde <_printf_float+0x1ae>
 8008cc6:	6121      	str	r1, [r4, #16]
 8008cc8:	b913      	cbnz	r3, 8008cd0 <_printf_float+0x1a0>
 8008cca:	6822      	ldr	r2, [r4, #0]
 8008ccc:	07d0      	lsls	r0, r2, #31
 8008cce:	d502      	bpl.n	8008cd6 <_printf_float+0x1a6>
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	440b      	add	r3, r1
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cd8:	f04f 0900 	mov.w	r9, #0
 8008cdc:	e7de      	b.n	8008c9c <_printf_float+0x16c>
 8008cde:	b913      	cbnz	r3, 8008ce6 <_printf_float+0x1b6>
 8008ce0:	6822      	ldr	r2, [r4, #0]
 8008ce2:	07d2      	lsls	r2, r2, #31
 8008ce4:	d501      	bpl.n	8008cea <_printf_float+0x1ba>
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	e7f4      	b.n	8008cd4 <_printf_float+0x1a4>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e7f2      	b.n	8008cd4 <_printf_float+0x1a4>
 8008cee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	4299      	cmp	r1, r3
 8008cf6:	db05      	blt.n	8008d04 <_printf_float+0x1d4>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	6121      	str	r1, [r4, #16]
 8008cfc:	07d8      	lsls	r0, r3, #31
 8008cfe:	d5ea      	bpl.n	8008cd6 <_printf_float+0x1a6>
 8008d00:	1c4b      	adds	r3, r1, #1
 8008d02:	e7e7      	b.n	8008cd4 <_printf_float+0x1a4>
 8008d04:	2900      	cmp	r1, #0
 8008d06:	bfd4      	ite	le
 8008d08:	f1c1 0202 	rsble	r2, r1, #2
 8008d0c:	2201      	movgt	r2, #1
 8008d0e:	4413      	add	r3, r2
 8008d10:	e7e0      	b.n	8008cd4 <_printf_float+0x1a4>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	055a      	lsls	r2, r3, #21
 8008d16:	d407      	bmi.n	8008d28 <_printf_float+0x1f8>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	4642      	mov	r2, r8
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4628      	mov	r0, r5
 8008d20:	47b8      	blx	r7
 8008d22:	3001      	adds	r0, #1
 8008d24:	d12c      	bne.n	8008d80 <_printf_float+0x250>
 8008d26:	e764      	b.n	8008bf2 <_printf_float+0xc2>
 8008d28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d2c:	f240 80e0 	bls.w	8008ef0 <_printf_float+0x3c0>
 8008d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d34:	2200      	movs	r2, #0
 8008d36:	2300      	movs	r3, #0
 8008d38:	f7f7 fee6 	bl	8000b08 <__aeabi_dcmpeq>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d034      	beq.n	8008daa <_printf_float+0x27a>
 8008d40:	4a37      	ldr	r2, [pc, #220]	; (8008e20 <_printf_float+0x2f0>)
 8008d42:	2301      	movs	r3, #1
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af51 	beq.w	8008bf2 <_printf_float+0xc2>
 8008d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d54:	429a      	cmp	r2, r3
 8008d56:	db02      	blt.n	8008d5e <_printf_float+0x22e>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	07d8      	lsls	r0, r3, #31
 8008d5c:	d510      	bpl.n	8008d80 <_printf_float+0x250>
 8008d5e:	ee18 3a10 	vmov	r3, s16
 8008d62:	4652      	mov	r2, sl
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af41 	beq.w	8008bf2 <_printf_float+0xc2>
 8008d70:	f04f 0800 	mov.w	r8, #0
 8008d74:	f104 091a 	add.w	r9, r4, #26
 8008d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4543      	cmp	r3, r8
 8008d7e:	dc09      	bgt.n	8008d94 <_printf_float+0x264>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	079b      	lsls	r3, r3, #30
 8008d84:	f100 8105 	bmi.w	8008f92 <_printf_float+0x462>
 8008d88:	68e0      	ldr	r0, [r4, #12]
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d8c:	4298      	cmp	r0, r3
 8008d8e:	bfb8      	it	lt
 8008d90:	4618      	movlt	r0, r3
 8008d92:	e730      	b.n	8008bf6 <_printf_float+0xc6>
 8008d94:	2301      	movs	r3, #1
 8008d96:	464a      	mov	r2, r9
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f af27 	beq.w	8008bf2 <_printf_float+0xc2>
 8008da4:	f108 0801 	add.w	r8, r8, #1
 8008da8:	e7e6      	b.n	8008d78 <_printf_float+0x248>
 8008daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc39      	bgt.n	8008e24 <_printf_float+0x2f4>
 8008db0:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <_printf_float+0x2f0>)
 8008db2:	2301      	movs	r3, #1
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af19 	beq.w	8008bf2 <_printf_float+0xc2>
 8008dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	d102      	bne.n	8008dce <_printf_float+0x29e>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	d5d8      	bpl.n	8008d80 <_printf_float+0x250>
 8008dce:	ee18 3a10 	vmov	r3, s16
 8008dd2:	4652      	mov	r2, sl
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	47b8      	blx	r7
 8008dda:	3001      	adds	r0, #1
 8008ddc:	f43f af09 	beq.w	8008bf2 <_printf_float+0xc2>
 8008de0:	f04f 0900 	mov.w	r9, #0
 8008de4:	f104 0a1a 	add.w	sl, r4, #26
 8008de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dea:	425b      	negs	r3, r3
 8008dec:	454b      	cmp	r3, r9
 8008dee:	dc01      	bgt.n	8008df4 <_printf_float+0x2c4>
 8008df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df2:	e792      	b.n	8008d1a <_printf_float+0x1ea>
 8008df4:	2301      	movs	r3, #1
 8008df6:	4652      	mov	r2, sl
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f43f aef7 	beq.w	8008bf2 <_printf_float+0xc2>
 8008e04:	f109 0901 	add.w	r9, r9, #1
 8008e08:	e7ee      	b.n	8008de8 <_printf_float+0x2b8>
 8008e0a:	bf00      	nop
 8008e0c:	7fefffff 	.word	0x7fefffff
 8008e10:	0800c1f4 	.word	0x0800c1f4
 8008e14:	0800c1f8 	.word	0x0800c1f8
 8008e18:	0800c200 	.word	0x0800c200
 8008e1c:	0800c1fc 	.word	0x0800c1fc
 8008e20:	0800c529 	.word	0x0800c529
 8008e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	bfa8      	it	ge
 8008e2c:	461a      	movge	r2, r3
 8008e2e:	2a00      	cmp	r2, #0
 8008e30:	4691      	mov	r9, r2
 8008e32:	dc37      	bgt.n	8008ea4 <_printf_float+0x374>
 8008e34:	f04f 0b00 	mov.w	fp, #0
 8008e38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e3c:	f104 021a 	add.w	r2, r4, #26
 8008e40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e42:	9305      	str	r3, [sp, #20]
 8008e44:	eba3 0309 	sub.w	r3, r3, r9
 8008e48:	455b      	cmp	r3, fp
 8008e4a:	dc33      	bgt.n	8008eb4 <_printf_float+0x384>
 8008e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e50:	429a      	cmp	r2, r3
 8008e52:	db3b      	blt.n	8008ecc <_printf_float+0x39c>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	07da      	lsls	r2, r3, #31
 8008e58:	d438      	bmi.n	8008ecc <_printf_float+0x39c>
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	9a05      	ldr	r2, [sp, #20]
 8008e5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e60:	1a9a      	subs	r2, r3, r2
 8008e62:	eba3 0901 	sub.w	r9, r3, r1
 8008e66:	4591      	cmp	r9, r2
 8008e68:	bfa8      	it	ge
 8008e6a:	4691      	movge	r9, r2
 8008e6c:	f1b9 0f00 	cmp.w	r9, #0
 8008e70:	dc35      	bgt.n	8008ede <_printf_float+0x3ae>
 8008e72:	f04f 0800 	mov.w	r8, #0
 8008e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e7a:	f104 0a1a 	add.w	sl, r4, #26
 8008e7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	eba3 0309 	sub.w	r3, r3, r9
 8008e88:	4543      	cmp	r3, r8
 8008e8a:	f77f af79 	ble.w	8008d80 <_printf_float+0x250>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4652      	mov	r2, sl
 8008e92:	4631      	mov	r1, r6
 8008e94:	4628      	mov	r0, r5
 8008e96:	47b8      	blx	r7
 8008e98:	3001      	adds	r0, #1
 8008e9a:	f43f aeaa 	beq.w	8008bf2 <_printf_float+0xc2>
 8008e9e:	f108 0801 	add.w	r8, r8, #1
 8008ea2:	e7ec      	b.n	8008e7e <_printf_float+0x34e>
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d1c0      	bne.n	8008e34 <_printf_float+0x304>
 8008eb2:	e69e      	b.n	8008bf2 <_printf_float+0xc2>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4628      	mov	r0, r5
 8008eba:	9205      	str	r2, [sp, #20]
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f ae97 	beq.w	8008bf2 <_printf_float+0xc2>
 8008ec4:	9a05      	ldr	r2, [sp, #20]
 8008ec6:	f10b 0b01 	add.w	fp, fp, #1
 8008eca:	e7b9      	b.n	8008e40 <_printf_float+0x310>
 8008ecc:	ee18 3a10 	vmov	r3, s16
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d1be      	bne.n	8008e5a <_printf_float+0x32a>
 8008edc:	e689      	b.n	8008bf2 <_printf_float+0xc2>
 8008ede:	9a05      	ldr	r2, [sp, #20]
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	4442      	add	r2, r8
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	47b8      	blx	r7
 8008eea:	3001      	adds	r0, #1
 8008eec:	d1c1      	bne.n	8008e72 <_printf_float+0x342>
 8008eee:	e680      	b.n	8008bf2 <_printf_float+0xc2>
 8008ef0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ef2:	2a01      	cmp	r2, #1
 8008ef4:	dc01      	bgt.n	8008efa <_printf_float+0x3ca>
 8008ef6:	07db      	lsls	r3, r3, #31
 8008ef8:	d538      	bpl.n	8008f6c <_printf_float+0x43c>
 8008efa:	2301      	movs	r3, #1
 8008efc:	4642      	mov	r2, r8
 8008efe:	4631      	mov	r1, r6
 8008f00:	4628      	mov	r0, r5
 8008f02:	47b8      	blx	r7
 8008f04:	3001      	adds	r0, #1
 8008f06:	f43f ae74 	beq.w	8008bf2 <_printf_float+0xc2>
 8008f0a:	ee18 3a10 	vmov	r3, s16
 8008f0e:	4652      	mov	r2, sl
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	47b8      	blx	r7
 8008f16:	3001      	adds	r0, #1
 8008f18:	f43f ae6b 	beq.w	8008bf2 <_printf_float+0xc2>
 8008f1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f20:	2200      	movs	r2, #0
 8008f22:	2300      	movs	r3, #0
 8008f24:	f7f7 fdf0 	bl	8000b08 <__aeabi_dcmpeq>
 8008f28:	b9d8      	cbnz	r0, 8008f62 <_printf_float+0x432>
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	f108 0201 	add.w	r2, r8, #1
 8008f30:	3b01      	subs	r3, #1
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d10e      	bne.n	8008f5a <_printf_float+0x42a>
 8008f3c:	e659      	b.n	8008bf2 <_printf_float+0xc2>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	47b8      	blx	r7
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f43f ae52 	beq.w	8008bf2 <_printf_float+0xc2>
 8008f4e:	f108 0801 	add.w	r8, r8, #1
 8008f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f54:	3b01      	subs	r3, #1
 8008f56:	4543      	cmp	r3, r8
 8008f58:	dcf1      	bgt.n	8008f3e <_printf_float+0x40e>
 8008f5a:	464b      	mov	r3, r9
 8008f5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f60:	e6dc      	b.n	8008d1c <_printf_float+0x1ec>
 8008f62:	f04f 0800 	mov.w	r8, #0
 8008f66:	f104 0a1a 	add.w	sl, r4, #26
 8008f6a:	e7f2      	b.n	8008f52 <_printf_float+0x422>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4642      	mov	r2, r8
 8008f70:	e7df      	b.n	8008f32 <_printf_float+0x402>
 8008f72:	2301      	movs	r3, #1
 8008f74:	464a      	mov	r2, r9
 8008f76:	4631      	mov	r1, r6
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b8      	blx	r7
 8008f7c:	3001      	adds	r0, #1
 8008f7e:	f43f ae38 	beq.w	8008bf2 <_printf_float+0xc2>
 8008f82:	f108 0801 	add.w	r8, r8, #1
 8008f86:	68e3      	ldr	r3, [r4, #12]
 8008f88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f8a:	1a5b      	subs	r3, r3, r1
 8008f8c:	4543      	cmp	r3, r8
 8008f8e:	dcf0      	bgt.n	8008f72 <_printf_float+0x442>
 8008f90:	e6fa      	b.n	8008d88 <_printf_float+0x258>
 8008f92:	f04f 0800 	mov.w	r8, #0
 8008f96:	f104 0919 	add.w	r9, r4, #25
 8008f9a:	e7f4      	b.n	8008f86 <_printf_float+0x456>

08008f9c <_printf_common>:
 8008f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	4699      	mov	r9, r3
 8008fa4:	688a      	ldr	r2, [r1, #8]
 8008fa6:	690b      	ldr	r3, [r1, #16]
 8008fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	bfb8      	it	lt
 8008fb0:	4613      	movlt	r3, r2
 8008fb2:	6033      	str	r3, [r6, #0]
 8008fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fb8:	4607      	mov	r7, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	b10a      	cbz	r2, 8008fc2 <_printf_common+0x26>
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	6033      	str	r3, [r6, #0]
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	0699      	lsls	r1, r3, #26
 8008fc6:	bf42      	ittt	mi
 8008fc8:	6833      	ldrmi	r3, [r6, #0]
 8008fca:	3302      	addmi	r3, #2
 8008fcc:	6033      	strmi	r3, [r6, #0]
 8008fce:	6825      	ldr	r5, [r4, #0]
 8008fd0:	f015 0506 	ands.w	r5, r5, #6
 8008fd4:	d106      	bne.n	8008fe4 <_printf_common+0x48>
 8008fd6:	f104 0a19 	add.w	sl, r4, #25
 8008fda:	68e3      	ldr	r3, [r4, #12]
 8008fdc:	6832      	ldr	r2, [r6, #0]
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	42ab      	cmp	r3, r5
 8008fe2:	dc26      	bgt.n	8009032 <_printf_common+0x96>
 8008fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fe8:	1e13      	subs	r3, r2, #0
 8008fea:	6822      	ldr	r2, [r4, #0]
 8008fec:	bf18      	it	ne
 8008fee:	2301      	movne	r3, #1
 8008ff0:	0692      	lsls	r2, r2, #26
 8008ff2:	d42b      	bmi.n	800904c <_printf_common+0xb0>
 8008ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	3001      	adds	r0, #1
 8009000:	d01e      	beq.n	8009040 <_printf_common+0xa4>
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	68e5      	ldr	r5, [r4, #12]
 8009006:	6832      	ldr	r2, [r6, #0]
 8009008:	f003 0306 	and.w	r3, r3, #6
 800900c:	2b04      	cmp	r3, #4
 800900e:	bf08      	it	eq
 8009010:	1aad      	subeq	r5, r5, r2
 8009012:	68a3      	ldr	r3, [r4, #8]
 8009014:	6922      	ldr	r2, [r4, #16]
 8009016:	bf0c      	ite	eq
 8009018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800901c:	2500      	movne	r5, #0
 800901e:	4293      	cmp	r3, r2
 8009020:	bfc4      	itt	gt
 8009022:	1a9b      	subgt	r3, r3, r2
 8009024:	18ed      	addgt	r5, r5, r3
 8009026:	2600      	movs	r6, #0
 8009028:	341a      	adds	r4, #26
 800902a:	42b5      	cmp	r5, r6
 800902c:	d11a      	bne.n	8009064 <_printf_common+0xc8>
 800902e:	2000      	movs	r0, #0
 8009030:	e008      	b.n	8009044 <_printf_common+0xa8>
 8009032:	2301      	movs	r3, #1
 8009034:	4652      	mov	r2, sl
 8009036:	4649      	mov	r1, r9
 8009038:	4638      	mov	r0, r7
 800903a:	47c0      	blx	r8
 800903c:	3001      	adds	r0, #1
 800903e:	d103      	bne.n	8009048 <_printf_common+0xac>
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009048:	3501      	adds	r5, #1
 800904a:	e7c6      	b.n	8008fda <_printf_common+0x3e>
 800904c:	18e1      	adds	r1, r4, r3
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	2030      	movs	r0, #48	; 0x30
 8009052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009056:	4422      	add	r2, r4
 8009058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800905c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009060:	3302      	adds	r3, #2
 8009062:	e7c7      	b.n	8008ff4 <_printf_common+0x58>
 8009064:	2301      	movs	r3, #1
 8009066:	4622      	mov	r2, r4
 8009068:	4649      	mov	r1, r9
 800906a:	4638      	mov	r0, r7
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d0e6      	beq.n	8009040 <_printf_common+0xa4>
 8009072:	3601      	adds	r6, #1
 8009074:	e7d9      	b.n	800902a <_printf_common+0x8e>
	...

08009078 <_printf_i>:
 8009078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800907c:	7e0f      	ldrb	r7, [r1, #24]
 800907e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009080:	2f78      	cmp	r7, #120	; 0x78
 8009082:	4691      	mov	r9, r2
 8009084:	4680      	mov	r8, r0
 8009086:	460c      	mov	r4, r1
 8009088:	469a      	mov	sl, r3
 800908a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800908e:	d807      	bhi.n	80090a0 <_printf_i+0x28>
 8009090:	2f62      	cmp	r7, #98	; 0x62
 8009092:	d80a      	bhi.n	80090aa <_printf_i+0x32>
 8009094:	2f00      	cmp	r7, #0
 8009096:	f000 80d8 	beq.w	800924a <_printf_i+0x1d2>
 800909a:	2f58      	cmp	r7, #88	; 0x58
 800909c:	f000 80a3 	beq.w	80091e6 <_printf_i+0x16e>
 80090a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090a8:	e03a      	b.n	8009120 <_printf_i+0xa8>
 80090aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ae:	2b15      	cmp	r3, #21
 80090b0:	d8f6      	bhi.n	80090a0 <_printf_i+0x28>
 80090b2:	a101      	add	r1, pc, #4	; (adr r1, 80090b8 <_printf_i+0x40>)
 80090b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090b8:	08009111 	.word	0x08009111
 80090bc:	08009125 	.word	0x08009125
 80090c0:	080090a1 	.word	0x080090a1
 80090c4:	080090a1 	.word	0x080090a1
 80090c8:	080090a1 	.word	0x080090a1
 80090cc:	080090a1 	.word	0x080090a1
 80090d0:	08009125 	.word	0x08009125
 80090d4:	080090a1 	.word	0x080090a1
 80090d8:	080090a1 	.word	0x080090a1
 80090dc:	080090a1 	.word	0x080090a1
 80090e0:	080090a1 	.word	0x080090a1
 80090e4:	08009231 	.word	0x08009231
 80090e8:	08009155 	.word	0x08009155
 80090ec:	08009213 	.word	0x08009213
 80090f0:	080090a1 	.word	0x080090a1
 80090f4:	080090a1 	.word	0x080090a1
 80090f8:	08009253 	.word	0x08009253
 80090fc:	080090a1 	.word	0x080090a1
 8009100:	08009155 	.word	0x08009155
 8009104:	080090a1 	.word	0x080090a1
 8009108:	080090a1 	.word	0x080090a1
 800910c:	0800921b 	.word	0x0800921b
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	1d1a      	adds	r2, r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800911c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009120:	2301      	movs	r3, #1
 8009122:	e0a3      	b.n	800926c <_printf_i+0x1f4>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	6829      	ldr	r1, [r5, #0]
 8009128:	0606      	lsls	r6, r0, #24
 800912a:	f101 0304 	add.w	r3, r1, #4
 800912e:	d50a      	bpl.n	8009146 <_printf_i+0xce>
 8009130:	680e      	ldr	r6, [r1, #0]
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	2e00      	cmp	r6, #0
 8009136:	da03      	bge.n	8009140 <_printf_i+0xc8>
 8009138:	232d      	movs	r3, #45	; 0x2d
 800913a:	4276      	negs	r6, r6
 800913c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009140:	485e      	ldr	r0, [pc, #376]	; (80092bc <_printf_i+0x244>)
 8009142:	230a      	movs	r3, #10
 8009144:	e019      	b.n	800917a <_printf_i+0x102>
 8009146:	680e      	ldr	r6, [r1, #0]
 8009148:	602b      	str	r3, [r5, #0]
 800914a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800914e:	bf18      	it	ne
 8009150:	b236      	sxthne	r6, r6
 8009152:	e7ef      	b.n	8009134 <_printf_i+0xbc>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	6820      	ldr	r0, [r4, #0]
 8009158:	1d19      	adds	r1, r3, #4
 800915a:	6029      	str	r1, [r5, #0]
 800915c:	0601      	lsls	r1, r0, #24
 800915e:	d501      	bpl.n	8009164 <_printf_i+0xec>
 8009160:	681e      	ldr	r6, [r3, #0]
 8009162:	e002      	b.n	800916a <_printf_i+0xf2>
 8009164:	0646      	lsls	r6, r0, #25
 8009166:	d5fb      	bpl.n	8009160 <_printf_i+0xe8>
 8009168:	881e      	ldrh	r6, [r3, #0]
 800916a:	4854      	ldr	r0, [pc, #336]	; (80092bc <_printf_i+0x244>)
 800916c:	2f6f      	cmp	r7, #111	; 0x6f
 800916e:	bf0c      	ite	eq
 8009170:	2308      	moveq	r3, #8
 8009172:	230a      	movne	r3, #10
 8009174:	2100      	movs	r1, #0
 8009176:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800917a:	6865      	ldr	r5, [r4, #4]
 800917c:	60a5      	str	r5, [r4, #8]
 800917e:	2d00      	cmp	r5, #0
 8009180:	bfa2      	ittt	ge
 8009182:	6821      	ldrge	r1, [r4, #0]
 8009184:	f021 0104 	bicge.w	r1, r1, #4
 8009188:	6021      	strge	r1, [r4, #0]
 800918a:	b90e      	cbnz	r6, 8009190 <_printf_i+0x118>
 800918c:	2d00      	cmp	r5, #0
 800918e:	d04d      	beq.n	800922c <_printf_i+0x1b4>
 8009190:	4615      	mov	r5, r2
 8009192:	fbb6 f1f3 	udiv	r1, r6, r3
 8009196:	fb03 6711 	mls	r7, r3, r1, r6
 800919a:	5dc7      	ldrb	r7, [r0, r7]
 800919c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091a0:	4637      	mov	r7, r6
 80091a2:	42bb      	cmp	r3, r7
 80091a4:	460e      	mov	r6, r1
 80091a6:	d9f4      	bls.n	8009192 <_printf_i+0x11a>
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d10b      	bne.n	80091c4 <_printf_i+0x14c>
 80091ac:	6823      	ldr	r3, [r4, #0]
 80091ae:	07de      	lsls	r6, r3, #31
 80091b0:	d508      	bpl.n	80091c4 <_printf_i+0x14c>
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	4299      	cmp	r1, r3
 80091b8:	bfde      	ittt	le
 80091ba:	2330      	movle	r3, #48	; 0x30
 80091bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091c4:	1b52      	subs	r2, r2, r5
 80091c6:	6122      	str	r2, [r4, #16]
 80091c8:	f8cd a000 	str.w	sl, [sp]
 80091cc:	464b      	mov	r3, r9
 80091ce:	aa03      	add	r2, sp, #12
 80091d0:	4621      	mov	r1, r4
 80091d2:	4640      	mov	r0, r8
 80091d4:	f7ff fee2 	bl	8008f9c <_printf_common>
 80091d8:	3001      	adds	r0, #1
 80091da:	d14c      	bne.n	8009276 <_printf_i+0x1fe>
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	b004      	add	sp, #16
 80091e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e6:	4835      	ldr	r0, [pc, #212]	; (80092bc <_printf_i+0x244>)
 80091e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091ec:	6829      	ldr	r1, [r5, #0]
 80091ee:	6823      	ldr	r3, [r4, #0]
 80091f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80091f4:	6029      	str	r1, [r5, #0]
 80091f6:	061d      	lsls	r5, r3, #24
 80091f8:	d514      	bpl.n	8009224 <_printf_i+0x1ac>
 80091fa:	07df      	lsls	r7, r3, #31
 80091fc:	bf44      	itt	mi
 80091fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009202:	6023      	strmi	r3, [r4, #0]
 8009204:	b91e      	cbnz	r6, 800920e <_printf_i+0x196>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	f023 0320 	bic.w	r3, r3, #32
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	2310      	movs	r3, #16
 8009210:	e7b0      	b.n	8009174 <_printf_i+0xfc>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	f043 0320 	orr.w	r3, r3, #32
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	2378      	movs	r3, #120	; 0x78
 800921c:	4828      	ldr	r0, [pc, #160]	; (80092c0 <_printf_i+0x248>)
 800921e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009222:	e7e3      	b.n	80091ec <_printf_i+0x174>
 8009224:	0659      	lsls	r1, r3, #25
 8009226:	bf48      	it	mi
 8009228:	b2b6      	uxthmi	r6, r6
 800922a:	e7e6      	b.n	80091fa <_printf_i+0x182>
 800922c:	4615      	mov	r5, r2
 800922e:	e7bb      	b.n	80091a8 <_printf_i+0x130>
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	6826      	ldr	r6, [r4, #0]
 8009234:	6961      	ldr	r1, [r4, #20]
 8009236:	1d18      	adds	r0, r3, #4
 8009238:	6028      	str	r0, [r5, #0]
 800923a:	0635      	lsls	r5, r6, #24
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	d501      	bpl.n	8009244 <_printf_i+0x1cc>
 8009240:	6019      	str	r1, [r3, #0]
 8009242:	e002      	b.n	800924a <_printf_i+0x1d2>
 8009244:	0670      	lsls	r0, r6, #25
 8009246:	d5fb      	bpl.n	8009240 <_printf_i+0x1c8>
 8009248:	8019      	strh	r1, [r3, #0]
 800924a:	2300      	movs	r3, #0
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	4615      	mov	r5, r2
 8009250:	e7ba      	b.n	80091c8 <_printf_i+0x150>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	602a      	str	r2, [r5, #0]
 8009258:	681d      	ldr	r5, [r3, #0]
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	2100      	movs	r1, #0
 800925e:	4628      	mov	r0, r5
 8009260:	f7f6 ffde 	bl	8000220 <memchr>
 8009264:	b108      	cbz	r0, 800926a <_printf_i+0x1f2>
 8009266:	1b40      	subs	r0, r0, r5
 8009268:	6060      	str	r0, [r4, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	2300      	movs	r3, #0
 8009270:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009274:	e7a8      	b.n	80091c8 <_printf_i+0x150>
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	462a      	mov	r2, r5
 800927a:	4649      	mov	r1, r9
 800927c:	4640      	mov	r0, r8
 800927e:	47d0      	blx	sl
 8009280:	3001      	adds	r0, #1
 8009282:	d0ab      	beq.n	80091dc <_printf_i+0x164>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	079b      	lsls	r3, r3, #30
 8009288:	d413      	bmi.n	80092b2 <_printf_i+0x23a>
 800928a:	68e0      	ldr	r0, [r4, #12]
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	4298      	cmp	r0, r3
 8009290:	bfb8      	it	lt
 8009292:	4618      	movlt	r0, r3
 8009294:	e7a4      	b.n	80091e0 <_printf_i+0x168>
 8009296:	2301      	movs	r3, #1
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d09b      	beq.n	80091dc <_printf_i+0x164>
 80092a4:	3501      	adds	r5, #1
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	9903      	ldr	r1, [sp, #12]
 80092aa:	1a5b      	subs	r3, r3, r1
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dcf2      	bgt.n	8009296 <_printf_i+0x21e>
 80092b0:	e7eb      	b.n	800928a <_printf_i+0x212>
 80092b2:	2500      	movs	r5, #0
 80092b4:	f104 0619 	add.w	r6, r4, #25
 80092b8:	e7f5      	b.n	80092a6 <_printf_i+0x22e>
 80092ba:	bf00      	nop
 80092bc:	0800c204 	.word	0x0800c204
 80092c0:	0800c215 	.word	0x0800c215

080092c4 <siprintf>:
 80092c4:	b40e      	push	{r1, r2, r3}
 80092c6:	b500      	push	{lr}
 80092c8:	b09c      	sub	sp, #112	; 0x70
 80092ca:	ab1d      	add	r3, sp, #116	; 0x74
 80092cc:	9002      	str	r0, [sp, #8]
 80092ce:	9006      	str	r0, [sp, #24]
 80092d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092d4:	4809      	ldr	r0, [pc, #36]	; (80092fc <siprintf+0x38>)
 80092d6:	9107      	str	r1, [sp, #28]
 80092d8:	9104      	str	r1, [sp, #16]
 80092da:	4909      	ldr	r1, [pc, #36]	; (8009300 <siprintf+0x3c>)
 80092dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	6800      	ldr	r0, [r0, #0]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	a902      	add	r1, sp, #8
 80092e8:	f001 fcaa 	bl	800ac40 <_svfiprintf_r>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	2200      	movs	r2, #0
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	b01c      	add	sp, #112	; 0x70
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000010 	.word	0x20000010
 8009300:	ffff0208 	.word	0xffff0208

08009304 <siscanf>:
 8009304:	b40e      	push	{r1, r2, r3}
 8009306:	b510      	push	{r4, lr}
 8009308:	b09f      	sub	sp, #124	; 0x7c
 800930a:	ac21      	add	r4, sp, #132	; 0x84
 800930c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009310:	f854 2b04 	ldr.w	r2, [r4], #4
 8009314:	9201      	str	r2, [sp, #4]
 8009316:	f8ad 101c 	strh.w	r1, [sp, #28]
 800931a:	9004      	str	r0, [sp, #16]
 800931c:	9008      	str	r0, [sp, #32]
 800931e:	f7f6 ff77 	bl	8000210 <strlen>
 8009322:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <siscanf+0x50>)
 8009324:	9005      	str	r0, [sp, #20]
 8009326:	9009      	str	r0, [sp, #36]	; 0x24
 8009328:	930d      	str	r3, [sp, #52]	; 0x34
 800932a:	480b      	ldr	r0, [pc, #44]	; (8009358 <siscanf+0x54>)
 800932c:	9a01      	ldr	r2, [sp, #4]
 800932e:	6800      	ldr	r0, [r0, #0]
 8009330:	9403      	str	r4, [sp, #12]
 8009332:	2300      	movs	r3, #0
 8009334:	9311      	str	r3, [sp, #68]	; 0x44
 8009336:	9316      	str	r3, [sp, #88]	; 0x58
 8009338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800933c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009340:	a904      	add	r1, sp, #16
 8009342:	4623      	mov	r3, r4
 8009344:	f001 fdd6 	bl	800aef4 <__ssvfiscanf_r>
 8009348:	b01f      	add	sp, #124	; 0x7c
 800934a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934e:	b003      	add	sp, #12
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	0800937f 	.word	0x0800937f
 8009358:	20000010 	.word	0x20000010

0800935c <__sread>:
 800935c:	b510      	push	{r4, lr}
 800935e:	460c      	mov	r4, r1
 8009360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009364:	f002 f890 	bl	800b488 <_read_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	bfab      	itete	ge
 800936c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800936e:	89a3      	ldrhlt	r3, [r4, #12]
 8009370:	181b      	addge	r3, r3, r0
 8009372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009376:	bfac      	ite	ge
 8009378:	6563      	strge	r3, [r4, #84]	; 0x54
 800937a:	81a3      	strhlt	r3, [r4, #12]
 800937c:	bd10      	pop	{r4, pc}

0800937e <__seofread>:
 800937e:	2000      	movs	r0, #0
 8009380:	4770      	bx	lr

08009382 <__swrite>:
 8009382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009386:	461f      	mov	r7, r3
 8009388:	898b      	ldrh	r3, [r1, #12]
 800938a:	05db      	lsls	r3, r3, #23
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4616      	mov	r6, r2
 8009392:	d505      	bpl.n	80093a0 <__swrite+0x1e>
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2302      	movs	r3, #2
 800939a:	2200      	movs	r2, #0
 800939c:	f000 ff52 	bl	800a244 <_lseek_r>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	4632      	mov	r2, r6
 80093ae:	463b      	mov	r3, r7
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	f000 b8a5 	b.w	8009504 <_write_r>

080093ba <__sseek>:
 80093ba:	b510      	push	{r4, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c2:	f000 ff3f 	bl	800a244 <_lseek_r>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	bf15      	itete	ne
 80093cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093d6:	81a3      	strheq	r3, [r4, #12]
 80093d8:	bf18      	it	ne
 80093da:	81a3      	strhne	r3, [r4, #12]
 80093dc:	bd10      	pop	{r4, pc}

080093de <__sclose>:
 80093de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e2:	f000 b8a1 	b.w	8009528 <_close_r>
	...

080093e8 <_strtol_l.constprop.0>:
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ee:	d001      	beq.n	80093f4 <_strtol_l.constprop.0+0xc>
 80093f0:	2b24      	cmp	r3, #36	; 0x24
 80093f2:	d906      	bls.n	8009402 <_strtol_l.constprop.0+0x1a>
 80093f4:	f7ff faca 	bl	800898c <__errno>
 80093f8:	2316      	movs	r3, #22
 80093fa:	6003      	str	r3, [r0, #0]
 80093fc:	2000      	movs	r0, #0
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80094e8 <_strtol_l.constprop.0+0x100>
 8009406:	460d      	mov	r5, r1
 8009408:	462e      	mov	r6, r5
 800940a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800940e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009412:	f017 0708 	ands.w	r7, r7, #8
 8009416:	d1f7      	bne.n	8009408 <_strtol_l.constprop.0+0x20>
 8009418:	2c2d      	cmp	r4, #45	; 0x2d
 800941a:	d132      	bne.n	8009482 <_strtol_l.constprop.0+0x9a>
 800941c:	782c      	ldrb	r4, [r5, #0]
 800941e:	2701      	movs	r7, #1
 8009420:	1cb5      	adds	r5, r6, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d05b      	beq.n	80094de <_strtol_l.constprop.0+0xf6>
 8009426:	2b10      	cmp	r3, #16
 8009428:	d109      	bne.n	800943e <_strtol_l.constprop.0+0x56>
 800942a:	2c30      	cmp	r4, #48	; 0x30
 800942c:	d107      	bne.n	800943e <_strtol_l.constprop.0+0x56>
 800942e:	782c      	ldrb	r4, [r5, #0]
 8009430:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009434:	2c58      	cmp	r4, #88	; 0x58
 8009436:	d14d      	bne.n	80094d4 <_strtol_l.constprop.0+0xec>
 8009438:	786c      	ldrb	r4, [r5, #1]
 800943a:	2310      	movs	r3, #16
 800943c:	3502      	adds	r5, #2
 800943e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009442:	f108 38ff 	add.w	r8, r8, #4294967295
 8009446:	f04f 0c00 	mov.w	ip, #0
 800944a:	fbb8 f9f3 	udiv	r9, r8, r3
 800944e:	4666      	mov	r6, ip
 8009450:	fb03 8a19 	mls	sl, r3, r9, r8
 8009454:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009458:	f1be 0f09 	cmp.w	lr, #9
 800945c:	d816      	bhi.n	800948c <_strtol_l.constprop.0+0xa4>
 800945e:	4674      	mov	r4, lr
 8009460:	42a3      	cmp	r3, r4
 8009462:	dd24      	ble.n	80094ae <_strtol_l.constprop.0+0xc6>
 8009464:	f1bc 0f00 	cmp.w	ip, #0
 8009468:	db1e      	blt.n	80094a8 <_strtol_l.constprop.0+0xc0>
 800946a:	45b1      	cmp	r9, r6
 800946c:	d31c      	bcc.n	80094a8 <_strtol_l.constprop.0+0xc0>
 800946e:	d101      	bne.n	8009474 <_strtol_l.constprop.0+0x8c>
 8009470:	45a2      	cmp	sl, r4
 8009472:	db19      	blt.n	80094a8 <_strtol_l.constprop.0+0xc0>
 8009474:	fb06 4603 	mla	r6, r6, r3, r4
 8009478:	f04f 0c01 	mov.w	ip, #1
 800947c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009480:	e7e8      	b.n	8009454 <_strtol_l.constprop.0+0x6c>
 8009482:	2c2b      	cmp	r4, #43	; 0x2b
 8009484:	bf04      	itt	eq
 8009486:	782c      	ldrbeq	r4, [r5, #0]
 8009488:	1cb5      	addeq	r5, r6, #2
 800948a:	e7ca      	b.n	8009422 <_strtol_l.constprop.0+0x3a>
 800948c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009490:	f1be 0f19 	cmp.w	lr, #25
 8009494:	d801      	bhi.n	800949a <_strtol_l.constprop.0+0xb2>
 8009496:	3c37      	subs	r4, #55	; 0x37
 8009498:	e7e2      	b.n	8009460 <_strtol_l.constprop.0+0x78>
 800949a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800949e:	f1be 0f19 	cmp.w	lr, #25
 80094a2:	d804      	bhi.n	80094ae <_strtol_l.constprop.0+0xc6>
 80094a4:	3c57      	subs	r4, #87	; 0x57
 80094a6:	e7db      	b.n	8009460 <_strtol_l.constprop.0+0x78>
 80094a8:	f04f 3cff 	mov.w	ip, #4294967295
 80094ac:	e7e6      	b.n	800947c <_strtol_l.constprop.0+0x94>
 80094ae:	f1bc 0f00 	cmp.w	ip, #0
 80094b2:	da05      	bge.n	80094c0 <_strtol_l.constprop.0+0xd8>
 80094b4:	2322      	movs	r3, #34	; 0x22
 80094b6:	6003      	str	r3, [r0, #0]
 80094b8:	4646      	mov	r6, r8
 80094ba:	b942      	cbnz	r2, 80094ce <_strtol_l.constprop.0+0xe6>
 80094bc:	4630      	mov	r0, r6
 80094be:	e79e      	b.n	80093fe <_strtol_l.constprop.0+0x16>
 80094c0:	b107      	cbz	r7, 80094c4 <_strtol_l.constprop.0+0xdc>
 80094c2:	4276      	negs	r6, r6
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	d0f9      	beq.n	80094bc <_strtol_l.constprop.0+0xd4>
 80094c8:	f1bc 0f00 	cmp.w	ip, #0
 80094cc:	d000      	beq.n	80094d0 <_strtol_l.constprop.0+0xe8>
 80094ce:	1e69      	subs	r1, r5, #1
 80094d0:	6011      	str	r1, [r2, #0]
 80094d2:	e7f3      	b.n	80094bc <_strtol_l.constprop.0+0xd4>
 80094d4:	2430      	movs	r4, #48	; 0x30
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1b1      	bne.n	800943e <_strtol_l.constprop.0+0x56>
 80094da:	2308      	movs	r3, #8
 80094dc:	e7af      	b.n	800943e <_strtol_l.constprop.0+0x56>
 80094de:	2c30      	cmp	r4, #48	; 0x30
 80094e0:	d0a5      	beq.n	800942e <_strtol_l.constprop.0+0x46>
 80094e2:	230a      	movs	r3, #10
 80094e4:	e7ab      	b.n	800943e <_strtol_l.constprop.0+0x56>
 80094e6:	bf00      	nop
 80094e8:	0800c227 	.word	0x0800c227

080094ec <_strtol_r>:
 80094ec:	f7ff bf7c 	b.w	80093e8 <_strtol_l.constprop.0>

080094f0 <strtol>:
 80094f0:	4613      	mov	r3, r2
 80094f2:	460a      	mov	r2, r1
 80094f4:	4601      	mov	r1, r0
 80094f6:	4802      	ldr	r0, [pc, #8]	; (8009500 <strtol+0x10>)
 80094f8:	6800      	ldr	r0, [r0, #0]
 80094fa:	f7ff bf75 	b.w	80093e8 <_strtol_l.constprop.0>
 80094fe:	bf00      	nop
 8009500:	20000010 	.word	0x20000010

08009504 <_write_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_write_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f8 fdbf 	bl	8002096 <_write>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_write_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_write_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20000a68 	.word	0x20000a68

08009528 <_close_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d06      	ldr	r5, [pc, #24]	; (8009544 <_close_r+0x1c>)
 800952c:	2300      	movs	r3, #0
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	602b      	str	r3, [r5, #0]
 8009534:	f7f8 fdcb 	bl	80020ce <_close>
 8009538:	1c43      	adds	r3, r0, #1
 800953a:	d102      	bne.n	8009542 <_close_r+0x1a>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	b103      	cbz	r3, 8009542 <_close_r+0x1a>
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	20000a68 	.word	0x20000a68

08009548 <quorem>:
 8009548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954c:	6903      	ldr	r3, [r0, #16]
 800954e:	690c      	ldr	r4, [r1, #16]
 8009550:	42a3      	cmp	r3, r4
 8009552:	4607      	mov	r7, r0
 8009554:	f2c0 8081 	blt.w	800965a <quorem+0x112>
 8009558:	3c01      	subs	r4, #1
 800955a:	f101 0814 	add.w	r8, r1, #20
 800955e:	f100 0514 	add.w	r5, r0, #20
 8009562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800956c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009570:	3301      	adds	r3, #1
 8009572:	429a      	cmp	r2, r3
 8009574:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009578:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800957c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009580:	d331      	bcc.n	80095e6 <quorem+0x9e>
 8009582:	f04f 0e00 	mov.w	lr, #0
 8009586:	4640      	mov	r0, r8
 8009588:	46ac      	mov	ip, r5
 800958a:	46f2      	mov	sl, lr
 800958c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009590:	b293      	uxth	r3, r2
 8009592:	fb06 e303 	mla	r3, r6, r3, lr
 8009596:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800959a:	b29b      	uxth	r3, r3
 800959c:	ebaa 0303 	sub.w	r3, sl, r3
 80095a0:	f8dc a000 	ldr.w	sl, [ip]
 80095a4:	0c12      	lsrs	r2, r2, #16
 80095a6:	fa13 f38a 	uxtah	r3, r3, sl
 80095aa:	fb06 e202 	mla	r2, r6, r2, lr
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	9b00      	ldr	r3, [sp, #0]
 80095b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095b6:	b292      	uxth	r2, r2
 80095b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80095c4:	4581      	cmp	r9, r0
 80095c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ca:	f84c 3b04 	str.w	r3, [ip], #4
 80095ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095d2:	d2db      	bcs.n	800958c <quorem+0x44>
 80095d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80095d8:	b92b      	cbnz	r3, 80095e6 <quorem+0x9e>
 80095da:	9b01      	ldr	r3, [sp, #4]
 80095dc:	3b04      	subs	r3, #4
 80095de:	429d      	cmp	r5, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	d32e      	bcc.n	8009642 <quorem+0xfa>
 80095e4:	613c      	str	r4, [r7, #16]
 80095e6:	4638      	mov	r0, r7
 80095e8:	f001 f8d6 	bl	800a798 <__mcmp>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	db24      	blt.n	800963a <quorem+0xf2>
 80095f0:	3601      	adds	r6, #1
 80095f2:	4628      	mov	r0, r5
 80095f4:	f04f 0c00 	mov.w	ip, #0
 80095f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095fc:	f8d0 e000 	ldr.w	lr, [r0]
 8009600:	b293      	uxth	r3, r2
 8009602:	ebac 0303 	sub.w	r3, ip, r3
 8009606:	0c12      	lsrs	r2, r2, #16
 8009608:	fa13 f38e 	uxtah	r3, r3, lr
 800960c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009614:	b29b      	uxth	r3, r3
 8009616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800961a:	45c1      	cmp	r9, r8
 800961c:	f840 3b04 	str.w	r3, [r0], #4
 8009620:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009624:	d2e8      	bcs.n	80095f8 <quorem+0xb0>
 8009626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800962a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800962e:	b922      	cbnz	r2, 800963a <quorem+0xf2>
 8009630:	3b04      	subs	r3, #4
 8009632:	429d      	cmp	r5, r3
 8009634:	461a      	mov	r2, r3
 8009636:	d30a      	bcc.n	800964e <quorem+0x106>
 8009638:	613c      	str	r4, [r7, #16]
 800963a:	4630      	mov	r0, r6
 800963c:	b003      	add	sp, #12
 800963e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	3b04      	subs	r3, #4
 8009646:	2a00      	cmp	r2, #0
 8009648:	d1cc      	bne.n	80095e4 <quorem+0x9c>
 800964a:	3c01      	subs	r4, #1
 800964c:	e7c7      	b.n	80095de <quorem+0x96>
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	3b04      	subs	r3, #4
 8009652:	2a00      	cmp	r2, #0
 8009654:	d1f0      	bne.n	8009638 <quorem+0xf0>
 8009656:	3c01      	subs	r4, #1
 8009658:	e7eb      	b.n	8009632 <quorem+0xea>
 800965a:	2000      	movs	r0, #0
 800965c:	e7ee      	b.n	800963c <quorem+0xf4>
	...

08009660 <_dtoa_r>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	ed2d 8b04 	vpush	{d8-d9}
 8009668:	ec57 6b10 	vmov	r6, r7, d0
 800966c:	b093      	sub	sp, #76	; 0x4c
 800966e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009670:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009674:	9106      	str	r1, [sp, #24]
 8009676:	ee10 aa10 	vmov	sl, s0
 800967a:	4604      	mov	r4, r0
 800967c:	9209      	str	r2, [sp, #36]	; 0x24
 800967e:	930c      	str	r3, [sp, #48]	; 0x30
 8009680:	46bb      	mov	fp, r7
 8009682:	b975      	cbnz	r5, 80096a2 <_dtoa_r+0x42>
 8009684:	2010      	movs	r0, #16
 8009686:	f000 fdef 	bl	800a268 <malloc>
 800968a:	4602      	mov	r2, r0
 800968c:	6260      	str	r0, [r4, #36]	; 0x24
 800968e:	b920      	cbnz	r0, 800969a <_dtoa_r+0x3a>
 8009690:	4ba7      	ldr	r3, [pc, #668]	; (8009930 <_dtoa_r+0x2d0>)
 8009692:	21ea      	movs	r1, #234	; 0xea
 8009694:	48a7      	ldr	r0, [pc, #668]	; (8009934 <_dtoa_r+0x2d4>)
 8009696:	f001 ffff 	bl	800b698 <__assert_func>
 800969a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800969e:	6005      	str	r5, [r0, #0]
 80096a0:	60c5      	str	r5, [r0, #12]
 80096a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096a4:	6819      	ldr	r1, [r3, #0]
 80096a6:	b151      	cbz	r1, 80096be <_dtoa_r+0x5e>
 80096a8:	685a      	ldr	r2, [r3, #4]
 80096aa:	604a      	str	r2, [r1, #4]
 80096ac:	2301      	movs	r3, #1
 80096ae:	4093      	lsls	r3, r2
 80096b0:	608b      	str	r3, [r1, #8]
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fe2e 	bl	800a314 <_Bfree>
 80096b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	1e3b      	subs	r3, r7, #0
 80096c0:	bfaa      	itet	ge
 80096c2:	2300      	movge	r3, #0
 80096c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096c8:	f8c8 3000 	strge.w	r3, [r8]
 80096cc:	4b9a      	ldr	r3, [pc, #616]	; (8009938 <_dtoa_r+0x2d8>)
 80096ce:	bfbc      	itt	lt
 80096d0:	2201      	movlt	r2, #1
 80096d2:	f8c8 2000 	strlt.w	r2, [r8]
 80096d6:	ea33 030b 	bics.w	r3, r3, fp
 80096da:	d11b      	bne.n	8009714 <_dtoa_r+0xb4>
 80096dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096de:	f242 730f 	movw	r3, #9999	; 0x270f
 80096e2:	6013      	str	r3, [r2, #0]
 80096e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096e8:	4333      	orrs	r3, r6
 80096ea:	f000 8592 	beq.w	800a212 <_dtoa_r+0xbb2>
 80096ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096f0:	b963      	cbnz	r3, 800970c <_dtoa_r+0xac>
 80096f2:	4b92      	ldr	r3, [pc, #584]	; (800993c <_dtoa_r+0x2dc>)
 80096f4:	e022      	b.n	800973c <_dtoa_r+0xdc>
 80096f6:	4b92      	ldr	r3, [pc, #584]	; (8009940 <_dtoa_r+0x2e0>)
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	3308      	adds	r3, #8
 80096fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	9801      	ldr	r0, [sp, #4]
 8009702:	b013      	add	sp, #76	; 0x4c
 8009704:	ecbd 8b04 	vpop	{d8-d9}
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	4b8b      	ldr	r3, [pc, #556]	; (800993c <_dtoa_r+0x2dc>)
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	3303      	adds	r3, #3
 8009712:	e7f3      	b.n	80096fc <_dtoa_r+0x9c>
 8009714:	2200      	movs	r2, #0
 8009716:	2300      	movs	r3, #0
 8009718:	4650      	mov	r0, sl
 800971a:	4659      	mov	r1, fp
 800971c:	f7f7 f9f4 	bl	8000b08 <__aeabi_dcmpeq>
 8009720:	ec4b ab19 	vmov	d9, sl, fp
 8009724:	4680      	mov	r8, r0
 8009726:	b158      	cbz	r0, 8009740 <_dtoa_r+0xe0>
 8009728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800972a:	2301      	movs	r3, #1
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 856b 	beq.w	800a20c <_dtoa_r+0xbac>
 8009736:	4883      	ldr	r0, [pc, #524]	; (8009944 <_dtoa_r+0x2e4>)
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	1e43      	subs	r3, r0, #1
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	e7df      	b.n	8009700 <_dtoa_r+0xa0>
 8009740:	ec4b ab10 	vmov	d0, sl, fp
 8009744:	aa10      	add	r2, sp, #64	; 0x40
 8009746:	a911      	add	r1, sp, #68	; 0x44
 8009748:	4620      	mov	r0, r4
 800974a:	f001 f8cb 	bl	800a8e4 <__d2b>
 800974e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009752:	ee08 0a10 	vmov	s16, r0
 8009756:	2d00      	cmp	r5, #0
 8009758:	f000 8084 	beq.w	8009864 <_dtoa_r+0x204>
 800975c:	ee19 3a90 	vmov	r3, s19
 8009760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009764:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009768:	4656      	mov	r6, sl
 800976a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800976e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009772:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009776:	4b74      	ldr	r3, [pc, #464]	; (8009948 <_dtoa_r+0x2e8>)
 8009778:	2200      	movs	r2, #0
 800977a:	4630      	mov	r0, r6
 800977c:	4639      	mov	r1, r7
 800977e:	f7f6 fda3 	bl	80002c8 <__aeabi_dsub>
 8009782:	a365      	add	r3, pc, #404	; (adr r3, 8009918 <_dtoa_r+0x2b8>)
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	f7f6 ff56 	bl	8000638 <__aeabi_dmul>
 800978c:	a364      	add	r3, pc, #400	; (adr r3, 8009920 <_dtoa_r+0x2c0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 fd9b 	bl	80002cc <__adddf3>
 8009796:	4606      	mov	r6, r0
 8009798:	4628      	mov	r0, r5
 800979a:	460f      	mov	r7, r1
 800979c:	f7f6 fee2 	bl	8000564 <__aeabi_i2d>
 80097a0:	a361      	add	r3, pc, #388	; (adr r3, 8009928 <_dtoa_r+0x2c8>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 ff47 	bl	8000638 <__aeabi_dmul>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f6 fd8b 	bl	80002cc <__adddf3>
 80097b6:	4606      	mov	r6, r0
 80097b8:	460f      	mov	r7, r1
 80097ba:	f7f7 f9ed 	bl	8000b98 <__aeabi_d2iz>
 80097be:	2200      	movs	r2, #0
 80097c0:	9000      	str	r0, [sp, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f7 f9a8 	bl	8000b1c <__aeabi_dcmplt>
 80097cc:	b150      	cbz	r0, 80097e4 <_dtoa_r+0x184>
 80097ce:	9800      	ldr	r0, [sp, #0]
 80097d0:	f7f6 fec8 	bl	8000564 <__aeabi_i2d>
 80097d4:	4632      	mov	r2, r6
 80097d6:	463b      	mov	r3, r7
 80097d8:	f7f7 f996 	bl	8000b08 <__aeabi_dcmpeq>
 80097dc:	b910      	cbnz	r0, 80097e4 <_dtoa_r+0x184>
 80097de:	9b00      	ldr	r3, [sp, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	9b00      	ldr	r3, [sp, #0]
 80097e6:	2b16      	cmp	r3, #22
 80097e8:	d85a      	bhi.n	80098a0 <_dtoa_r+0x240>
 80097ea:	9a00      	ldr	r2, [sp, #0]
 80097ec:	4b57      	ldr	r3, [pc, #348]	; (800994c <_dtoa_r+0x2ec>)
 80097ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	ec51 0b19 	vmov	r0, r1, d9
 80097fa:	f7f7 f98f 	bl	8000b1c <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d050      	beq.n	80098a4 <_dtoa_r+0x244>
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	3b01      	subs	r3, #1
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	2300      	movs	r3, #0
 800980a:	930b      	str	r3, [sp, #44]	; 0x2c
 800980c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800980e:	1b5d      	subs	r5, r3, r5
 8009810:	1e6b      	subs	r3, r5, #1
 8009812:	9305      	str	r3, [sp, #20]
 8009814:	bf45      	ittet	mi
 8009816:	f1c5 0301 	rsbmi	r3, r5, #1
 800981a:	9304      	strmi	r3, [sp, #16]
 800981c:	2300      	movpl	r3, #0
 800981e:	2300      	movmi	r3, #0
 8009820:	bf4c      	ite	mi
 8009822:	9305      	strmi	r3, [sp, #20]
 8009824:	9304      	strpl	r3, [sp, #16]
 8009826:	9b00      	ldr	r3, [sp, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	db3d      	blt.n	80098a8 <_dtoa_r+0x248>
 800982c:	9b05      	ldr	r3, [sp, #20]
 800982e:	9a00      	ldr	r2, [sp, #0]
 8009830:	920a      	str	r2, [sp, #40]	; 0x28
 8009832:	4413      	add	r3, r2
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	2300      	movs	r3, #0
 8009838:	9307      	str	r3, [sp, #28]
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	2b09      	cmp	r3, #9
 800983e:	f200 8089 	bhi.w	8009954 <_dtoa_r+0x2f4>
 8009842:	2b05      	cmp	r3, #5
 8009844:	bfc4      	itt	gt
 8009846:	3b04      	subgt	r3, #4
 8009848:	9306      	strgt	r3, [sp, #24]
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	f1a3 0302 	sub.w	r3, r3, #2
 8009850:	bfcc      	ite	gt
 8009852:	2500      	movgt	r5, #0
 8009854:	2501      	movle	r5, #1
 8009856:	2b03      	cmp	r3, #3
 8009858:	f200 8087 	bhi.w	800996a <_dtoa_r+0x30a>
 800985c:	e8df f003 	tbb	[pc, r3]
 8009860:	59383a2d 	.word	0x59383a2d
 8009864:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009868:	441d      	add	r5, r3
 800986a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800986e:	2b20      	cmp	r3, #32
 8009870:	bfc1      	itttt	gt
 8009872:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009876:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800987a:	fa0b f303 	lslgt.w	r3, fp, r3
 800987e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009882:	bfda      	itte	le
 8009884:	f1c3 0320 	rsble	r3, r3, #32
 8009888:	fa06 f003 	lslle.w	r0, r6, r3
 800988c:	4318      	orrgt	r0, r3
 800988e:	f7f6 fe59 	bl	8000544 <__aeabi_ui2d>
 8009892:	2301      	movs	r3, #1
 8009894:	4606      	mov	r6, r0
 8009896:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800989a:	3d01      	subs	r5, #1
 800989c:	930e      	str	r3, [sp, #56]	; 0x38
 800989e:	e76a      	b.n	8009776 <_dtoa_r+0x116>
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7b2      	b.n	800980a <_dtoa_r+0x1aa>
 80098a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80098a6:	e7b1      	b.n	800980c <_dtoa_r+0x1ac>
 80098a8:	9b04      	ldr	r3, [sp, #16]
 80098aa:	9a00      	ldr	r2, [sp, #0]
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	4253      	negs	r3, r2
 80098b2:	9307      	str	r3, [sp, #28]
 80098b4:	2300      	movs	r3, #0
 80098b6:	930a      	str	r3, [sp, #40]	; 0x28
 80098b8:	e7bf      	b.n	800983a <_dtoa_r+0x1da>
 80098ba:	2300      	movs	r3, #0
 80098bc:	9308      	str	r3, [sp, #32]
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	dc55      	bgt.n	8009970 <_dtoa_r+0x310>
 80098c4:	2301      	movs	r3, #1
 80098c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ca:	461a      	mov	r2, r3
 80098cc:	9209      	str	r2, [sp, #36]	; 0x24
 80098ce:	e00c      	b.n	80098ea <_dtoa_r+0x28a>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e7f3      	b.n	80098bc <_dtoa_r+0x25c>
 80098d4:	2300      	movs	r3, #0
 80098d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d8:	9308      	str	r3, [sp, #32]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	4413      	add	r3, r2
 80098de:	9302      	str	r3, [sp, #8]
 80098e0:	3301      	adds	r3, #1
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	bfb8      	it	lt
 80098e8:	2301      	movlt	r3, #1
 80098ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098ec:	2200      	movs	r2, #0
 80098ee:	6042      	str	r2, [r0, #4]
 80098f0:	2204      	movs	r2, #4
 80098f2:	f102 0614 	add.w	r6, r2, #20
 80098f6:	429e      	cmp	r6, r3
 80098f8:	6841      	ldr	r1, [r0, #4]
 80098fa:	d93d      	bls.n	8009978 <_dtoa_r+0x318>
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 fcc9 	bl	800a294 <_Balloc>
 8009902:	9001      	str	r0, [sp, #4]
 8009904:	2800      	cmp	r0, #0
 8009906:	d13b      	bne.n	8009980 <_dtoa_r+0x320>
 8009908:	4b11      	ldr	r3, [pc, #68]	; (8009950 <_dtoa_r+0x2f0>)
 800990a:	4602      	mov	r2, r0
 800990c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009910:	e6c0      	b.n	8009694 <_dtoa_r+0x34>
 8009912:	2301      	movs	r3, #1
 8009914:	e7df      	b.n	80098d6 <_dtoa_r+0x276>
 8009916:	bf00      	nop
 8009918:	636f4361 	.word	0x636f4361
 800991c:	3fd287a7 	.word	0x3fd287a7
 8009920:	8b60c8b3 	.word	0x8b60c8b3
 8009924:	3fc68a28 	.word	0x3fc68a28
 8009928:	509f79fb 	.word	0x509f79fb
 800992c:	3fd34413 	.word	0x3fd34413
 8009930:	0800c334 	.word	0x0800c334
 8009934:	0800c34b 	.word	0x0800c34b
 8009938:	7ff00000 	.word	0x7ff00000
 800993c:	0800c330 	.word	0x0800c330
 8009940:	0800c327 	.word	0x0800c327
 8009944:	0800c52a 	.word	0x0800c52a
 8009948:	3ff80000 	.word	0x3ff80000
 800994c:	0800c440 	.word	0x0800c440
 8009950:	0800c3a6 	.word	0x0800c3a6
 8009954:	2501      	movs	r5, #1
 8009956:	2300      	movs	r3, #0
 8009958:	9306      	str	r3, [sp, #24]
 800995a:	9508      	str	r5, [sp, #32]
 800995c:	f04f 33ff 	mov.w	r3, #4294967295
 8009960:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009964:	2200      	movs	r2, #0
 8009966:	2312      	movs	r3, #18
 8009968:	e7b0      	b.n	80098cc <_dtoa_r+0x26c>
 800996a:	2301      	movs	r3, #1
 800996c:	9308      	str	r3, [sp, #32]
 800996e:	e7f5      	b.n	800995c <_dtoa_r+0x2fc>
 8009970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009976:	e7b8      	b.n	80098ea <_dtoa_r+0x28a>
 8009978:	3101      	adds	r1, #1
 800997a:	6041      	str	r1, [r0, #4]
 800997c:	0052      	lsls	r2, r2, #1
 800997e:	e7b8      	b.n	80098f2 <_dtoa_r+0x292>
 8009980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009982:	9a01      	ldr	r2, [sp, #4]
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2b0e      	cmp	r3, #14
 800998a:	f200 809d 	bhi.w	8009ac8 <_dtoa_r+0x468>
 800998e:	2d00      	cmp	r5, #0
 8009990:	f000 809a 	beq.w	8009ac8 <_dtoa_r+0x468>
 8009994:	9b00      	ldr	r3, [sp, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	dd32      	ble.n	8009a00 <_dtoa_r+0x3a0>
 800999a:	4ab7      	ldr	r2, [pc, #732]	; (8009c78 <_dtoa_r+0x618>)
 800999c:	f003 030f 	and.w	r3, r3, #15
 80099a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	05d8      	lsls	r0, r3, #23
 80099ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099b0:	d516      	bpl.n	80099e0 <_dtoa_r+0x380>
 80099b2:	4bb2      	ldr	r3, [pc, #712]	; (8009c7c <_dtoa_r+0x61c>)
 80099b4:	ec51 0b19 	vmov	r0, r1, d9
 80099b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099bc:	f7f6 ff66 	bl	800088c <__aeabi_ddiv>
 80099c0:	f007 070f 	and.w	r7, r7, #15
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	2503      	movs	r5, #3
 80099ca:	4eac      	ldr	r6, [pc, #688]	; (8009c7c <_dtoa_r+0x61c>)
 80099cc:	b957      	cbnz	r7, 80099e4 <_dtoa_r+0x384>
 80099ce:	4642      	mov	r2, r8
 80099d0:	464b      	mov	r3, r9
 80099d2:	4650      	mov	r0, sl
 80099d4:	4659      	mov	r1, fp
 80099d6:	f7f6 ff59 	bl	800088c <__aeabi_ddiv>
 80099da:	4682      	mov	sl, r0
 80099dc:	468b      	mov	fp, r1
 80099de:	e028      	b.n	8009a32 <_dtoa_r+0x3d2>
 80099e0:	2502      	movs	r5, #2
 80099e2:	e7f2      	b.n	80099ca <_dtoa_r+0x36a>
 80099e4:	07f9      	lsls	r1, r7, #31
 80099e6:	d508      	bpl.n	80099fa <_dtoa_r+0x39a>
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099f0:	f7f6 fe22 	bl	8000638 <__aeabi_dmul>
 80099f4:	3501      	adds	r5, #1
 80099f6:	4680      	mov	r8, r0
 80099f8:	4689      	mov	r9, r1
 80099fa:	107f      	asrs	r7, r7, #1
 80099fc:	3608      	adds	r6, #8
 80099fe:	e7e5      	b.n	80099cc <_dtoa_r+0x36c>
 8009a00:	f000 809b 	beq.w	8009b3a <_dtoa_r+0x4da>
 8009a04:	9b00      	ldr	r3, [sp, #0]
 8009a06:	4f9d      	ldr	r7, [pc, #628]	; (8009c7c <_dtoa_r+0x61c>)
 8009a08:	425e      	negs	r6, r3
 8009a0a:	4b9b      	ldr	r3, [pc, #620]	; (8009c78 <_dtoa_r+0x618>)
 8009a0c:	f006 020f 	and.w	r2, r6, #15
 8009a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	ec51 0b19 	vmov	r0, r1, d9
 8009a1c:	f7f6 fe0c 	bl	8000638 <__aeabi_dmul>
 8009a20:	1136      	asrs	r6, r6, #4
 8009a22:	4682      	mov	sl, r0
 8009a24:	468b      	mov	fp, r1
 8009a26:	2300      	movs	r3, #0
 8009a28:	2502      	movs	r5, #2
 8009a2a:	2e00      	cmp	r6, #0
 8009a2c:	d17a      	bne.n	8009b24 <_dtoa_r+0x4c4>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1d3      	bne.n	80099da <_dtoa_r+0x37a>
 8009a32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 8082 	beq.w	8009b3e <_dtoa_r+0x4de>
 8009a3a:	4b91      	ldr	r3, [pc, #580]	; (8009c80 <_dtoa_r+0x620>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4650      	mov	r0, sl
 8009a40:	4659      	mov	r1, fp
 8009a42:	f7f7 f86b 	bl	8000b1c <__aeabi_dcmplt>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d079      	beq.n	8009b3e <_dtoa_r+0x4de>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d076      	beq.n	8009b3e <_dtoa_r+0x4de>
 8009a50:	9b02      	ldr	r3, [sp, #8]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dd36      	ble.n	8009ac4 <_dtoa_r+0x464>
 8009a56:	9b00      	ldr	r3, [sp, #0]
 8009a58:	4650      	mov	r0, sl
 8009a5a:	4659      	mov	r1, fp
 8009a5c:	1e5f      	subs	r7, r3, #1
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4b88      	ldr	r3, [pc, #544]	; (8009c84 <_dtoa_r+0x624>)
 8009a62:	f7f6 fde9 	bl	8000638 <__aeabi_dmul>
 8009a66:	9e02      	ldr	r6, [sp, #8]
 8009a68:	4682      	mov	sl, r0
 8009a6a:	468b      	mov	fp, r1
 8009a6c:	3501      	adds	r5, #1
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7f6 fd78 	bl	8000564 <__aeabi_i2d>
 8009a74:	4652      	mov	r2, sl
 8009a76:	465b      	mov	r3, fp
 8009a78:	f7f6 fdde 	bl	8000638 <__aeabi_dmul>
 8009a7c:	4b82      	ldr	r3, [pc, #520]	; (8009c88 <_dtoa_r+0x628>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f7f6 fc24 	bl	80002cc <__adddf3>
 8009a84:	46d0      	mov	r8, sl
 8009a86:	46d9      	mov	r9, fp
 8009a88:	4682      	mov	sl, r0
 8009a8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	d158      	bne.n	8009b44 <_dtoa_r+0x4e4>
 8009a92:	4b7e      	ldr	r3, [pc, #504]	; (8009c8c <_dtoa_r+0x62c>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fc15 	bl	80002c8 <__aeabi_dsub>
 8009a9e:	4652      	mov	r2, sl
 8009aa0:	465b      	mov	r3, fp
 8009aa2:	4680      	mov	r8, r0
 8009aa4:	4689      	mov	r9, r1
 8009aa6:	f7f7 f857 	bl	8000b58 <__aeabi_dcmpgt>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f040 8295 	bne.w	8009fda <_dtoa_r+0x97a>
 8009ab0:	4652      	mov	r2, sl
 8009ab2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4649      	mov	r1, r9
 8009aba:	f7f7 f82f 	bl	8000b1c <__aeabi_dcmplt>
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f040 8289 	bne.w	8009fd6 <_dtoa_r+0x976>
 8009ac4:	ec5b ab19 	vmov	sl, fp, d9
 8009ac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f2c0 8148 	blt.w	8009d60 <_dtoa_r+0x700>
 8009ad0:	9a00      	ldr	r2, [sp, #0]
 8009ad2:	2a0e      	cmp	r2, #14
 8009ad4:	f300 8144 	bgt.w	8009d60 <_dtoa_r+0x700>
 8009ad8:	4b67      	ldr	r3, [pc, #412]	; (8009c78 <_dtoa_r+0x618>)
 8009ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ade:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f280 80d5 	bge.w	8009c94 <_dtoa_r+0x634>
 8009aea:	9b03      	ldr	r3, [sp, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f300 80d1 	bgt.w	8009c94 <_dtoa_r+0x634>
 8009af2:	f040 826f 	bne.w	8009fd4 <_dtoa_r+0x974>
 8009af6:	4b65      	ldr	r3, [pc, #404]	; (8009c8c <_dtoa_r+0x62c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fd9b 	bl	8000638 <__aeabi_dmul>
 8009b02:	4652      	mov	r2, sl
 8009b04:	465b      	mov	r3, fp
 8009b06:	f7f7 f81d 	bl	8000b44 <__aeabi_dcmpge>
 8009b0a:	9e03      	ldr	r6, [sp, #12]
 8009b0c:	4637      	mov	r7, r6
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f040 8245 	bne.w	8009f9e <_dtoa_r+0x93e>
 8009b14:	9d01      	ldr	r5, [sp, #4]
 8009b16:	2331      	movs	r3, #49	; 0x31
 8009b18:	f805 3b01 	strb.w	r3, [r5], #1
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	e240      	b.n	8009fa6 <_dtoa_r+0x946>
 8009b24:	07f2      	lsls	r2, r6, #31
 8009b26:	d505      	bpl.n	8009b34 <_dtoa_r+0x4d4>
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	f7f6 fd84 	bl	8000638 <__aeabi_dmul>
 8009b30:	3501      	adds	r5, #1
 8009b32:	2301      	movs	r3, #1
 8009b34:	1076      	asrs	r6, r6, #1
 8009b36:	3708      	adds	r7, #8
 8009b38:	e777      	b.n	8009a2a <_dtoa_r+0x3ca>
 8009b3a:	2502      	movs	r5, #2
 8009b3c:	e779      	b.n	8009a32 <_dtoa_r+0x3d2>
 8009b3e:	9f00      	ldr	r7, [sp, #0]
 8009b40:	9e03      	ldr	r6, [sp, #12]
 8009b42:	e794      	b.n	8009a6e <_dtoa_r+0x40e>
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	4b4c      	ldr	r3, [pc, #304]	; (8009c78 <_dtoa_r+0x618>)
 8009b48:	4431      	add	r1, r6
 8009b4a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b4c:	9908      	ldr	r1, [sp, #32]
 8009b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b56:	2900      	cmp	r1, #0
 8009b58:	d043      	beq.n	8009be2 <_dtoa_r+0x582>
 8009b5a:	494d      	ldr	r1, [pc, #308]	; (8009c90 <_dtoa_r+0x630>)
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	f7f6 fe95 	bl	800088c <__aeabi_ddiv>
 8009b62:	4652      	mov	r2, sl
 8009b64:	465b      	mov	r3, fp
 8009b66:	f7f6 fbaf 	bl	80002c8 <__aeabi_dsub>
 8009b6a:	9d01      	ldr	r5, [sp, #4]
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	4649      	mov	r1, r9
 8009b72:	4640      	mov	r0, r8
 8009b74:	f7f7 f810 	bl	8000b98 <__aeabi_d2iz>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	f7f6 fcf3 	bl	8000564 <__aeabi_i2d>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	f7f6 fb9f 	bl	80002c8 <__aeabi_dsub>
 8009b8a:	3630      	adds	r6, #48	; 0x30
 8009b8c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b90:	4652      	mov	r2, sl
 8009b92:	465b      	mov	r3, fp
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	f7f6 ffc0 	bl	8000b1c <__aeabi_dcmplt>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d163      	bne.n	8009c68 <_dtoa_r+0x608>
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	4936      	ldr	r1, [pc, #216]	; (8009c80 <_dtoa_r+0x620>)
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	f7f6 fb8e 	bl	80002c8 <__aeabi_dsub>
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	f7f6 ffb4 	bl	8000b1c <__aeabi_dcmplt>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	f040 80b5 	bne.w	8009d24 <_dtoa_r+0x6c4>
 8009bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bbc:	429d      	cmp	r5, r3
 8009bbe:	d081      	beq.n	8009ac4 <_dtoa_r+0x464>
 8009bc0:	4b30      	ldr	r3, [pc, #192]	; (8009c84 <_dtoa_r+0x624>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	f7f6 fd36 	bl	8000638 <__aeabi_dmul>
 8009bcc:	4b2d      	ldr	r3, [pc, #180]	; (8009c84 <_dtoa_r+0x624>)
 8009bce:	4682      	mov	sl, r0
 8009bd0:	468b      	mov	fp, r1
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f7f6 fd2e 	bl	8000638 <__aeabi_dmul>
 8009bdc:	4680      	mov	r8, r0
 8009bde:	4689      	mov	r9, r1
 8009be0:	e7c6      	b.n	8009b70 <_dtoa_r+0x510>
 8009be2:	4650      	mov	r0, sl
 8009be4:	4659      	mov	r1, fp
 8009be6:	f7f6 fd27 	bl	8000638 <__aeabi_dmul>
 8009bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bf0:	4682      	mov	sl, r0
 8009bf2:	468b      	mov	fp, r1
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	f7f6 ffce 	bl	8000b98 <__aeabi_d2iz>
 8009bfc:	4606      	mov	r6, r0
 8009bfe:	f7f6 fcb1 	bl	8000564 <__aeabi_i2d>
 8009c02:	3630      	adds	r6, #48	; 0x30
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 fb5c 	bl	80002c8 <__aeabi_dsub>
 8009c10:	f805 6b01 	strb.w	r6, [r5], #1
 8009c14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c16:	429d      	cmp	r5, r3
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	d124      	bne.n	8009c6c <_dtoa_r+0x60c>
 8009c22:	4b1b      	ldr	r3, [pc, #108]	; (8009c90 <_dtoa_r+0x630>)
 8009c24:	4650      	mov	r0, sl
 8009c26:	4659      	mov	r1, fp
 8009c28:	f7f6 fb50 	bl	80002cc <__adddf3>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4640      	mov	r0, r8
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff90 	bl	8000b58 <__aeabi_dcmpgt>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d173      	bne.n	8009d24 <_dtoa_r+0x6c4>
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	465b      	mov	r3, fp
 8009c40:	4913      	ldr	r1, [pc, #76]	; (8009c90 <_dtoa_r+0x630>)
 8009c42:	2000      	movs	r0, #0
 8009c44:	f7f6 fb40 	bl	80002c8 <__aeabi_dsub>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	4649      	mov	r1, r9
 8009c50:	f7f6 ff64 	bl	8000b1c <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	f43f af35 	beq.w	8009ac4 <_dtoa_r+0x464>
 8009c5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c5c:	1e6b      	subs	r3, r5, #1
 8009c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d0f8      	beq.n	8009c5a <_dtoa_r+0x5fa>
 8009c68:	9700      	str	r7, [sp, #0]
 8009c6a:	e049      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_dtoa_r+0x624>)
 8009c6e:	f7f6 fce3 	bl	8000638 <__aeabi_dmul>
 8009c72:	4680      	mov	r8, r0
 8009c74:	4689      	mov	r9, r1
 8009c76:	e7bd      	b.n	8009bf4 <_dtoa_r+0x594>
 8009c78:	0800c440 	.word	0x0800c440
 8009c7c:	0800c418 	.word	0x0800c418
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	40240000 	.word	0x40240000
 8009c88:	401c0000 	.word	0x401c0000
 8009c8c:	40140000 	.word	0x40140000
 8009c90:	3fe00000 	.word	0x3fe00000
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	4656      	mov	r6, sl
 8009c98:	465f      	mov	r7, fp
 8009c9a:	4642      	mov	r2, r8
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	4639      	mov	r1, r7
 8009ca2:	f7f6 fdf3 	bl	800088c <__aeabi_ddiv>
 8009ca6:	f7f6 ff77 	bl	8000b98 <__aeabi_d2iz>
 8009caa:	4682      	mov	sl, r0
 8009cac:	f7f6 fc5a 	bl	8000564 <__aeabi_i2d>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f7f6 fcc0 	bl	8000638 <__aeabi_dmul>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cc4:	f7f6 fb00 	bl	80002c8 <__aeabi_dsub>
 8009cc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009ccc:	9e01      	ldr	r6, [sp, #4]
 8009cce:	9f03      	ldr	r7, [sp, #12]
 8009cd0:	1bae      	subs	r6, r5, r6
 8009cd2:	42b7      	cmp	r7, r6
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	d135      	bne.n	8009d46 <_dtoa_r+0x6e6>
 8009cda:	f7f6 faf7 	bl	80002cc <__adddf3>
 8009cde:	4642      	mov	r2, r8
 8009ce0:	464b      	mov	r3, r9
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	f7f6 ff37 	bl	8000b58 <__aeabi_dcmpgt>
 8009cea:	b9d0      	cbnz	r0, 8009d22 <_dtoa_r+0x6c2>
 8009cec:	4642      	mov	r2, r8
 8009cee:	464b      	mov	r3, r9
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 8009cf8:	b110      	cbz	r0, 8009d00 <_dtoa_r+0x6a0>
 8009cfa:	f01a 0f01 	tst.w	sl, #1
 8009cfe:	d110      	bne.n	8009d22 <_dtoa_r+0x6c2>
 8009d00:	4620      	mov	r0, r4
 8009d02:	ee18 1a10 	vmov	r1, s16
 8009d06:	f000 fb05 	bl	800a314 <_Bfree>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9800      	ldr	r0, [sp, #0]
 8009d0e:	702b      	strb	r3, [r5, #0]
 8009d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d12:	3001      	adds	r0, #1
 8009d14:	6018      	str	r0, [r3, #0]
 8009d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f43f acf1 	beq.w	8009700 <_dtoa_r+0xa0>
 8009d1e:	601d      	str	r5, [r3, #0]
 8009d20:	e4ee      	b.n	8009700 <_dtoa_r+0xa0>
 8009d22:	9f00      	ldr	r7, [sp, #0]
 8009d24:	462b      	mov	r3, r5
 8009d26:	461d      	mov	r5, r3
 8009d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d2c:	2a39      	cmp	r2, #57	; 0x39
 8009d2e:	d106      	bne.n	8009d3e <_dtoa_r+0x6de>
 8009d30:	9a01      	ldr	r2, [sp, #4]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d1f7      	bne.n	8009d26 <_dtoa_r+0x6c6>
 8009d36:	9901      	ldr	r1, [sp, #4]
 8009d38:	2230      	movs	r2, #48	; 0x30
 8009d3a:	3701      	adds	r7, #1
 8009d3c:	700a      	strb	r2, [r1, #0]
 8009d3e:	781a      	ldrb	r2, [r3, #0]
 8009d40:	3201      	adds	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	e790      	b.n	8009c68 <_dtoa_r+0x608>
 8009d46:	4ba6      	ldr	r3, [pc, #664]	; (8009fe0 <_dtoa_r+0x980>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f7f6 fc75 	bl	8000638 <__aeabi_dmul>
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2300      	movs	r3, #0
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	f7f6 fed7 	bl	8000b08 <__aeabi_dcmpeq>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d09d      	beq.n	8009c9a <_dtoa_r+0x63a>
 8009d5e:	e7cf      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009d60:	9a08      	ldr	r2, [sp, #32]
 8009d62:	2a00      	cmp	r2, #0
 8009d64:	f000 80d7 	beq.w	8009f16 <_dtoa_r+0x8b6>
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	2a01      	cmp	r2, #1
 8009d6c:	f300 80ba 	bgt.w	8009ee4 <_dtoa_r+0x884>
 8009d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	f000 80b2 	beq.w	8009edc <_dtoa_r+0x87c>
 8009d78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d7c:	9e07      	ldr	r6, [sp, #28]
 8009d7e:	9d04      	ldr	r5, [sp, #16]
 8009d80:	9a04      	ldr	r2, [sp, #16]
 8009d82:	441a      	add	r2, r3
 8009d84:	9204      	str	r2, [sp, #16]
 8009d86:	9a05      	ldr	r2, [sp, #20]
 8009d88:	2101      	movs	r1, #1
 8009d8a:	441a      	add	r2, r3
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	9205      	str	r2, [sp, #20]
 8009d90:	f000 fb78 	bl	800a484 <__i2b>
 8009d94:	4607      	mov	r7, r0
 8009d96:	2d00      	cmp	r5, #0
 8009d98:	dd0c      	ble.n	8009db4 <_dtoa_r+0x754>
 8009d9a:	9b05      	ldr	r3, [sp, #20]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	dd09      	ble.n	8009db4 <_dtoa_r+0x754>
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	9a04      	ldr	r2, [sp, #16]
 8009da4:	bfa8      	it	ge
 8009da6:	462b      	movge	r3, r5
 8009da8:	1ad2      	subs	r2, r2, r3
 8009daa:	9204      	str	r2, [sp, #16]
 8009dac:	9a05      	ldr	r2, [sp, #20]
 8009dae:	1aed      	subs	r5, r5, r3
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	b31b      	cbz	r3, 8009e00 <_dtoa_r+0x7a0>
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 80af 	beq.w	8009f1e <_dtoa_r+0x8be>
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	dd13      	ble.n	8009dec <_dtoa_r+0x78c>
 8009dc4:	4639      	mov	r1, r7
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 fc1b 	bl	800a604 <__pow5mult>
 8009dce:	ee18 2a10 	vmov	r2, s16
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f000 fb6a 	bl	800a4b0 <__multiply>
 8009ddc:	ee18 1a10 	vmov	r1, s16
 8009de0:	4680      	mov	r8, r0
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 fa96 	bl	800a314 <_Bfree>
 8009de8:	ee08 8a10 	vmov	s16, r8
 8009dec:	9b07      	ldr	r3, [sp, #28]
 8009dee:	1b9a      	subs	r2, r3, r6
 8009df0:	d006      	beq.n	8009e00 <_dtoa_r+0x7a0>
 8009df2:	ee18 1a10 	vmov	r1, s16
 8009df6:	4620      	mov	r0, r4
 8009df8:	f000 fc04 	bl	800a604 <__pow5mult>
 8009dfc:	ee08 0a10 	vmov	s16, r0
 8009e00:	2101      	movs	r1, #1
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 fb3e 	bl	800a484 <__i2b>
 8009e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	f340 8088 	ble.w	8009f22 <_dtoa_r+0x8c2>
 8009e12:	461a      	mov	r2, r3
 8009e14:	4601      	mov	r1, r0
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 fbf4 	bl	800a604 <__pow5mult>
 8009e1c:	9b06      	ldr	r3, [sp, #24]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	4606      	mov	r6, r0
 8009e22:	f340 8081 	ble.w	8009f28 <_dtoa_r+0x8c8>
 8009e26:	f04f 0800 	mov.w	r8, #0
 8009e2a:	6933      	ldr	r3, [r6, #16]
 8009e2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e30:	6918      	ldr	r0, [r3, #16]
 8009e32:	f000 fad7 	bl	800a3e4 <__hi0bits>
 8009e36:	f1c0 0020 	rsb	r0, r0, #32
 8009e3a:	9b05      	ldr	r3, [sp, #20]
 8009e3c:	4418      	add	r0, r3
 8009e3e:	f010 001f 	ands.w	r0, r0, #31
 8009e42:	f000 8092 	beq.w	8009f6a <_dtoa_r+0x90a>
 8009e46:	f1c0 0320 	rsb	r3, r0, #32
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	f340 808a 	ble.w	8009f64 <_dtoa_r+0x904>
 8009e50:	f1c0 001c 	rsb	r0, r0, #28
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	4403      	add	r3, r0
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	9b05      	ldr	r3, [sp, #20]
 8009e5c:	4403      	add	r3, r0
 8009e5e:	4405      	add	r5, r0
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd07      	ble.n	8009e78 <_dtoa_r+0x818>
 8009e68:	ee18 1a10 	vmov	r1, s16
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fc22 	bl	800a6b8 <__lshift>
 8009e74:	ee08 0a10 	vmov	s16, r0
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dd05      	ble.n	8009e8a <_dtoa_r+0x82a>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	461a      	mov	r2, r3
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fc18 	bl	800a6b8 <__lshift>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d06e      	beq.n	8009f6e <_dtoa_r+0x90e>
 8009e90:	ee18 0a10 	vmov	r0, s16
 8009e94:	4631      	mov	r1, r6
 8009e96:	f000 fc7f 	bl	800a798 <__mcmp>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	da67      	bge.n	8009f6e <_dtoa_r+0x90e>
 8009e9e:	9b00      	ldr	r3, [sp, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	ee18 1a10 	vmov	r1, s16
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	220a      	movs	r2, #10
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fa53 	bl	800a358 <__multadd>
 8009eb2:	9b08      	ldr	r3, [sp, #32]
 8009eb4:	ee08 0a10 	vmov	s16, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 81b1 	beq.w	800a220 <_dtoa_r+0xbc0>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	220a      	movs	r2, #10
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fa47 	bl	800a358 <__multadd>
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	4607      	mov	r7, r0
 8009ed0:	f300 808e 	bgt.w	8009ff0 <_dtoa_r+0x990>
 8009ed4:	9b06      	ldr	r3, [sp, #24]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	dc51      	bgt.n	8009f7e <_dtoa_r+0x91e>
 8009eda:	e089      	b.n	8009ff0 <_dtoa_r+0x990>
 8009edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ede:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ee2:	e74b      	b.n	8009d7c <_dtoa_r+0x71c>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1e5e      	subs	r6, r3, #1
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	42b3      	cmp	r3, r6
 8009eec:	bfbf      	itttt	lt
 8009eee:	9b07      	ldrlt	r3, [sp, #28]
 8009ef0:	9607      	strlt	r6, [sp, #28]
 8009ef2:	1af2      	sublt	r2, r6, r3
 8009ef4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ef6:	bfb6      	itet	lt
 8009ef8:	189b      	addlt	r3, r3, r2
 8009efa:	1b9e      	subge	r6, r3, r6
 8009efc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	bfb8      	it	lt
 8009f02:	2600      	movlt	r6, #0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb7      	itett	lt
 8009f08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f10:	1a9d      	sublt	r5, r3, r2
 8009f12:	2300      	movlt	r3, #0
 8009f14:	e734      	b.n	8009d80 <_dtoa_r+0x720>
 8009f16:	9e07      	ldr	r6, [sp, #28]
 8009f18:	9d04      	ldr	r5, [sp, #16]
 8009f1a:	9f08      	ldr	r7, [sp, #32]
 8009f1c:	e73b      	b.n	8009d96 <_dtoa_r+0x736>
 8009f1e:	9a07      	ldr	r2, [sp, #28]
 8009f20:	e767      	b.n	8009df2 <_dtoa_r+0x792>
 8009f22:	9b06      	ldr	r3, [sp, #24]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	dc18      	bgt.n	8009f5a <_dtoa_r+0x8fa>
 8009f28:	f1ba 0f00 	cmp.w	sl, #0
 8009f2c:	d115      	bne.n	8009f5a <_dtoa_r+0x8fa>
 8009f2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f32:	b993      	cbnz	r3, 8009f5a <_dtoa_r+0x8fa>
 8009f34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f38:	0d1b      	lsrs	r3, r3, #20
 8009f3a:	051b      	lsls	r3, r3, #20
 8009f3c:	b183      	cbz	r3, 8009f60 <_dtoa_r+0x900>
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	3301      	adds	r3, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9b05      	ldr	r3, [sp, #20]
 8009f46:	3301      	adds	r3, #1
 8009f48:	9305      	str	r3, [sp, #20]
 8009f4a:	f04f 0801 	mov.w	r8, #1
 8009f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f af6a 	bne.w	8009e2a <_dtoa_r+0x7ca>
 8009f56:	2001      	movs	r0, #1
 8009f58:	e76f      	b.n	8009e3a <_dtoa_r+0x7da>
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	e7f6      	b.n	8009f4e <_dtoa_r+0x8ee>
 8009f60:	4698      	mov	r8, r3
 8009f62:	e7f4      	b.n	8009f4e <_dtoa_r+0x8ee>
 8009f64:	f43f af7d 	beq.w	8009e62 <_dtoa_r+0x802>
 8009f68:	4618      	mov	r0, r3
 8009f6a:	301c      	adds	r0, #28
 8009f6c:	e772      	b.n	8009e54 <_dtoa_r+0x7f4>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	dc37      	bgt.n	8009fe4 <_dtoa_r+0x984>
 8009f74:	9b06      	ldr	r3, [sp, #24]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	dd34      	ble.n	8009fe4 <_dtoa_r+0x984>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	9302      	str	r3, [sp, #8]
 8009f7e:	9b02      	ldr	r3, [sp, #8]
 8009f80:	b96b      	cbnz	r3, 8009f9e <_dtoa_r+0x93e>
 8009f82:	4631      	mov	r1, r6
 8009f84:	2205      	movs	r2, #5
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f9e6 	bl	800a358 <__multadd>
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	4606      	mov	r6, r0
 8009f90:	ee18 0a10 	vmov	r0, s16
 8009f94:	f000 fc00 	bl	800a798 <__mcmp>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	f73f adbb 	bgt.w	8009b14 <_dtoa_r+0x4b4>
 8009f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa0:	9d01      	ldr	r5, [sp, #4]
 8009fa2:	43db      	mvns	r3, r3
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	4631      	mov	r1, r6
 8009fac:	4620      	mov	r0, r4
 8009fae:	f000 f9b1 	bl	800a314 <_Bfree>
 8009fb2:	2f00      	cmp	r7, #0
 8009fb4:	f43f aea4 	beq.w	8009d00 <_dtoa_r+0x6a0>
 8009fb8:	f1b8 0f00 	cmp.w	r8, #0
 8009fbc:	d005      	beq.n	8009fca <_dtoa_r+0x96a>
 8009fbe:	45b8      	cmp	r8, r7
 8009fc0:	d003      	beq.n	8009fca <_dtoa_r+0x96a>
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 f9a5 	bl	800a314 <_Bfree>
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 f9a1 	bl	800a314 <_Bfree>
 8009fd2:	e695      	b.n	8009d00 <_dtoa_r+0x6a0>
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4637      	mov	r7, r6
 8009fd8:	e7e1      	b.n	8009f9e <_dtoa_r+0x93e>
 8009fda:	9700      	str	r7, [sp, #0]
 8009fdc:	4637      	mov	r7, r6
 8009fde:	e599      	b.n	8009b14 <_dtoa_r+0x4b4>
 8009fe0:	40240000 	.word	0x40240000
 8009fe4:	9b08      	ldr	r3, [sp, #32]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	f000 80ca 	beq.w	800a180 <_dtoa_r+0xb20>
 8009fec:	9b03      	ldr	r3, [sp, #12]
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	dd05      	ble.n	800a000 <_dtoa_r+0x9a0>
 8009ff4:	4639      	mov	r1, r7
 8009ff6:	462a      	mov	r2, r5
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f000 fb5d 	bl	800a6b8 <__lshift>
 8009ffe:	4607      	mov	r7, r0
 800a000:	f1b8 0f00 	cmp.w	r8, #0
 800a004:	d05b      	beq.n	800a0be <_dtoa_r+0xa5e>
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 f943 	bl	800a294 <_Balloc>
 800a00e:	4605      	mov	r5, r0
 800a010:	b928      	cbnz	r0, 800a01e <_dtoa_r+0x9be>
 800a012:	4b87      	ldr	r3, [pc, #540]	; (800a230 <_dtoa_r+0xbd0>)
 800a014:	4602      	mov	r2, r0
 800a016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a01a:	f7ff bb3b 	b.w	8009694 <_dtoa_r+0x34>
 800a01e:	693a      	ldr	r2, [r7, #16]
 800a020:	3202      	adds	r2, #2
 800a022:	0092      	lsls	r2, r2, #2
 800a024:	f107 010c 	add.w	r1, r7, #12
 800a028:	300c      	adds	r0, #12
 800a02a:	f000 f925 	bl	800a278 <memcpy>
 800a02e:	2201      	movs	r2, #1
 800a030:	4629      	mov	r1, r5
 800a032:	4620      	mov	r0, r4
 800a034:	f000 fb40 	bl	800a6b8 <__lshift>
 800a038:	9b01      	ldr	r3, [sp, #4]
 800a03a:	f103 0901 	add.w	r9, r3, #1
 800a03e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a042:	4413      	add	r3, r2
 800a044:	9305      	str	r3, [sp, #20]
 800a046:	f00a 0301 	and.w	r3, sl, #1
 800a04a:	46b8      	mov	r8, r7
 800a04c:	9304      	str	r3, [sp, #16]
 800a04e:	4607      	mov	r7, r0
 800a050:	4631      	mov	r1, r6
 800a052:	ee18 0a10 	vmov	r0, s16
 800a056:	f7ff fa77 	bl	8009548 <quorem>
 800a05a:	4641      	mov	r1, r8
 800a05c:	9002      	str	r0, [sp, #8]
 800a05e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a062:	ee18 0a10 	vmov	r0, s16
 800a066:	f000 fb97 	bl	800a798 <__mcmp>
 800a06a:	463a      	mov	r2, r7
 800a06c:	9003      	str	r0, [sp, #12]
 800a06e:	4631      	mov	r1, r6
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fbad 	bl	800a7d0 <__mdiff>
 800a076:	68c2      	ldr	r2, [r0, #12]
 800a078:	f109 3bff 	add.w	fp, r9, #4294967295
 800a07c:	4605      	mov	r5, r0
 800a07e:	bb02      	cbnz	r2, 800a0c2 <_dtoa_r+0xa62>
 800a080:	4601      	mov	r1, r0
 800a082:	ee18 0a10 	vmov	r0, s16
 800a086:	f000 fb87 	bl	800a798 <__mcmp>
 800a08a:	4602      	mov	r2, r0
 800a08c:	4629      	mov	r1, r5
 800a08e:	4620      	mov	r0, r4
 800a090:	9207      	str	r2, [sp, #28]
 800a092:	f000 f93f 	bl	800a314 <_Bfree>
 800a096:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a09a:	ea43 0102 	orr.w	r1, r3, r2
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	430b      	orrs	r3, r1
 800a0a2:	464d      	mov	r5, r9
 800a0a4:	d10f      	bne.n	800a0c6 <_dtoa_r+0xa66>
 800a0a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0aa:	d02a      	beq.n	800a102 <_dtoa_r+0xaa2>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dd02      	ble.n	800a0b8 <_dtoa_r+0xa58>
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0b8:	f88b a000 	strb.w	sl, [fp]
 800a0bc:	e775      	b.n	8009faa <_dtoa_r+0x94a>
 800a0be:	4638      	mov	r0, r7
 800a0c0:	e7ba      	b.n	800a038 <_dtoa_r+0x9d8>
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	e7e2      	b.n	800a08c <_dtoa_r+0xa2c>
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	db04      	blt.n	800a0d6 <_dtoa_r+0xa76>
 800a0cc:	9906      	ldr	r1, [sp, #24]
 800a0ce:	430b      	orrs	r3, r1
 800a0d0:	9904      	ldr	r1, [sp, #16]
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	d122      	bne.n	800a11c <_dtoa_r+0xabc>
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	ddee      	ble.n	800a0b8 <_dtoa_r+0xa58>
 800a0da:	ee18 1a10 	vmov	r1, s16
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	f000 fae9 	bl	800a6b8 <__lshift>
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	ee08 0a10 	vmov	s16, r0
 800a0ec:	f000 fb54 	bl	800a798 <__mcmp>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dc03      	bgt.n	800a0fc <_dtoa_r+0xa9c>
 800a0f4:	d1e0      	bne.n	800a0b8 <_dtoa_r+0xa58>
 800a0f6:	f01a 0f01 	tst.w	sl, #1
 800a0fa:	d0dd      	beq.n	800a0b8 <_dtoa_r+0xa58>
 800a0fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a100:	d1d7      	bne.n	800a0b2 <_dtoa_r+0xa52>
 800a102:	2339      	movs	r3, #57	; 0x39
 800a104:	f88b 3000 	strb.w	r3, [fp]
 800a108:	462b      	mov	r3, r5
 800a10a:	461d      	mov	r5, r3
 800a10c:	3b01      	subs	r3, #1
 800a10e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a112:	2a39      	cmp	r2, #57	; 0x39
 800a114:	d071      	beq.n	800a1fa <_dtoa_r+0xb9a>
 800a116:	3201      	adds	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
 800a11a:	e746      	b.n	8009faa <_dtoa_r+0x94a>
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	dd07      	ble.n	800a130 <_dtoa_r+0xad0>
 800a120:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a124:	d0ed      	beq.n	800a102 <_dtoa_r+0xaa2>
 800a126:	f10a 0301 	add.w	r3, sl, #1
 800a12a:	f88b 3000 	strb.w	r3, [fp]
 800a12e:	e73c      	b.n	8009faa <_dtoa_r+0x94a>
 800a130:	9b05      	ldr	r3, [sp, #20]
 800a132:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a136:	4599      	cmp	r9, r3
 800a138:	d047      	beq.n	800a1ca <_dtoa_r+0xb6a>
 800a13a:	ee18 1a10 	vmov	r1, s16
 800a13e:	2300      	movs	r3, #0
 800a140:	220a      	movs	r2, #10
 800a142:	4620      	mov	r0, r4
 800a144:	f000 f908 	bl	800a358 <__multadd>
 800a148:	45b8      	cmp	r8, r7
 800a14a:	ee08 0a10 	vmov	s16, r0
 800a14e:	f04f 0300 	mov.w	r3, #0
 800a152:	f04f 020a 	mov.w	r2, #10
 800a156:	4641      	mov	r1, r8
 800a158:	4620      	mov	r0, r4
 800a15a:	d106      	bne.n	800a16a <_dtoa_r+0xb0a>
 800a15c:	f000 f8fc 	bl	800a358 <__multadd>
 800a160:	4680      	mov	r8, r0
 800a162:	4607      	mov	r7, r0
 800a164:	f109 0901 	add.w	r9, r9, #1
 800a168:	e772      	b.n	800a050 <_dtoa_r+0x9f0>
 800a16a:	f000 f8f5 	bl	800a358 <__multadd>
 800a16e:	4639      	mov	r1, r7
 800a170:	4680      	mov	r8, r0
 800a172:	2300      	movs	r3, #0
 800a174:	220a      	movs	r2, #10
 800a176:	4620      	mov	r0, r4
 800a178:	f000 f8ee 	bl	800a358 <__multadd>
 800a17c:	4607      	mov	r7, r0
 800a17e:	e7f1      	b.n	800a164 <_dtoa_r+0xb04>
 800a180:	9b03      	ldr	r3, [sp, #12]
 800a182:	9302      	str	r3, [sp, #8]
 800a184:	9d01      	ldr	r5, [sp, #4]
 800a186:	ee18 0a10 	vmov	r0, s16
 800a18a:	4631      	mov	r1, r6
 800a18c:	f7ff f9dc 	bl	8009548 <quorem>
 800a190:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	f805 ab01 	strb.w	sl, [r5], #1
 800a19a:	1aea      	subs	r2, r5, r3
 800a19c:	9b02      	ldr	r3, [sp, #8]
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	dd09      	ble.n	800a1b6 <_dtoa_r+0xb56>
 800a1a2:	ee18 1a10 	vmov	r1, s16
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	220a      	movs	r2, #10
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 f8d4 	bl	800a358 <__multadd>
 800a1b0:	ee08 0a10 	vmov	s16, r0
 800a1b4:	e7e7      	b.n	800a186 <_dtoa_r+0xb26>
 800a1b6:	9b02      	ldr	r3, [sp, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bfc8      	it	gt
 800a1bc:	461d      	movgt	r5, r3
 800a1be:	9b01      	ldr	r3, [sp, #4]
 800a1c0:	bfd8      	it	le
 800a1c2:	2501      	movle	r5, #1
 800a1c4:	441d      	add	r5, r3
 800a1c6:	f04f 0800 	mov.w	r8, #0
 800a1ca:	ee18 1a10 	vmov	r1, s16
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	f000 fa71 	bl	800a6b8 <__lshift>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	ee08 0a10 	vmov	s16, r0
 800a1dc:	f000 fadc 	bl	800a798 <__mcmp>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	dc91      	bgt.n	800a108 <_dtoa_r+0xaa8>
 800a1e4:	d102      	bne.n	800a1ec <_dtoa_r+0xb8c>
 800a1e6:	f01a 0f01 	tst.w	sl, #1
 800a1ea:	d18d      	bne.n	800a108 <_dtoa_r+0xaa8>
 800a1ec:	462b      	mov	r3, r5
 800a1ee:	461d      	mov	r5, r3
 800a1f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1f4:	2a30      	cmp	r2, #48	; 0x30
 800a1f6:	d0fa      	beq.n	800a1ee <_dtoa_r+0xb8e>
 800a1f8:	e6d7      	b.n	8009faa <_dtoa_r+0x94a>
 800a1fa:	9a01      	ldr	r2, [sp, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d184      	bne.n	800a10a <_dtoa_r+0xaaa>
 800a200:	9b00      	ldr	r3, [sp, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	2331      	movs	r3, #49	; 0x31
 800a208:	7013      	strb	r3, [r2, #0]
 800a20a:	e6ce      	b.n	8009faa <_dtoa_r+0x94a>
 800a20c:	4b09      	ldr	r3, [pc, #36]	; (800a234 <_dtoa_r+0xbd4>)
 800a20e:	f7ff ba95 	b.w	800973c <_dtoa_r+0xdc>
 800a212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a214:	2b00      	cmp	r3, #0
 800a216:	f47f aa6e 	bne.w	80096f6 <_dtoa_r+0x96>
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <_dtoa_r+0xbd8>)
 800a21c:	f7ff ba8e 	b.w	800973c <_dtoa_r+0xdc>
 800a220:	9b02      	ldr	r3, [sp, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dcae      	bgt.n	800a184 <_dtoa_r+0xb24>
 800a226:	9b06      	ldr	r3, [sp, #24]
 800a228:	2b02      	cmp	r3, #2
 800a22a:	f73f aea8 	bgt.w	8009f7e <_dtoa_r+0x91e>
 800a22e:	e7a9      	b.n	800a184 <_dtoa_r+0xb24>
 800a230:	0800c3a6 	.word	0x0800c3a6
 800a234:	0800c529 	.word	0x0800c529
 800a238:	0800c327 	.word	0x0800c327

0800a23c <_localeconv_r>:
 800a23c:	4800      	ldr	r0, [pc, #0]	; (800a240 <_localeconv_r+0x4>)
 800a23e:	4770      	bx	lr
 800a240:	20000164 	.word	0x20000164

0800a244 <_lseek_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4d07      	ldr	r5, [pc, #28]	; (800a264 <_lseek_r+0x20>)
 800a248:	4604      	mov	r4, r0
 800a24a:	4608      	mov	r0, r1
 800a24c:	4611      	mov	r1, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	602a      	str	r2, [r5, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	f7f7 ff62 	bl	800211c <_lseek>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_lseek_r+0x1e>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_lseek_r+0x1e>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000a68 	.word	0x20000a68

0800a268 <malloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <malloc+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 bc17 	b.w	800aaa0 <_malloc_r>
 800a272:	bf00      	nop
 800a274:	20000010 	.word	0x20000010

0800a278 <memcpy>:
 800a278:	440a      	add	r2, r1
 800a27a:	4291      	cmp	r1, r2
 800a27c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a280:	d100      	bne.n	800a284 <memcpy+0xc>
 800a282:	4770      	bx	lr
 800a284:	b510      	push	{r4, lr}
 800a286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a28a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a28e:	4291      	cmp	r1, r2
 800a290:	d1f9      	bne.n	800a286 <memcpy+0xe>
 800a292:	bd10      	pop	{r4, pc}

0800a294 <_Balloc>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a298:	4604      	mov	r4, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	b976      	cbnz	r6, 800a2bc <_Balloc+0x28>
 800a29e:	2010      	movs	r0, #16
 800a2a0:	f7ff ffe2 	bl	800a268 <malloc>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	6260      	str	r0, [r4, #36]	; 0x24
 800a2a8:	b920      	cbnz	r0, 800a2b4 <_Balloc+0x20>
 800a2aa:	4b18      	ldr	r3, [pc, #96]	; (800a30c <_Balloc+0x78>)
 800a2ac:	4818      	ldr	r0, [pc, #96]	; (800a310 <_Balloc+0x7c>)
 800a2ae:	2166      	movs	r1, #102	; 0x66
 800a2b0:	f001 f9f2 	bl	800b698 <__assert_func>
 800a2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b8:	6006      	str	r6, [r0, #0]
 800a2ba:	60c6      	str	r6, [r0, #12]
 800a2bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2be:	68f3      	ldr	r3, [r6, #12]
 800a2c0:	b183      	cbz	r3, 800a2e4 <_Balloc+0x50>
 800a2c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2ca:	b9b8      	cbnz	r0, 800a2fc <_Balloc+0x68>
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	fa01 f605 	lsl.w	r6, r1, r5
 800a2d2:	1d72      	adds	r2, r6, #5
 800a2d4:	0092      	lsls	r2, r2, #2
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 fb60 	bl	800a99c <_calloc_r>
 800a2dc:	b160      	cbz	r0, 800a2f8 <_Balloc+0x64>
 800a2de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2e2:	e00e      	b.n	800a302 <_Balloc+0x6e>
 800a2e4:	2221      	movs	r2, #33	; 0x21
 800a2e6:	2104      	movs	r1, #4
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 fb57 	bl	800a99c <_calloc_r>
 800a2ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f0:	60f0      	str	r0, [r6, #12]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e4      	bne.n	800a2c2 <_Balloc+0x2e>
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	6802      	ldr	r2, [r0, #0]
 800a2fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a302:	2300      	movs	r3, #0
 800a304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a308:	e7f7      	b.n	800a2fa <_Balloc+0x66>
 800a30a:	bf00      	nop
 800a30c:	0800c334 	.word	0x0800c334
 800a310:	0800c3b7 	.word	0x0800c3b7

0800a314 <_Bfree>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	b976      	cbnz	r6, 800a33c <_Bfree+0x28>
 800a31e:	2010      	movs	r0, #16
 800a320:	f7ff ffa2 	bl	800a268 <malloc>
 800a324:	4602      	mov	r2, r0
 800a326:	6268      	str	r0, [r5, #36]	; 0x24
 800a328:	b920      	cbnz	r0, 800a334 <_Bfree+0x20>
 800a32a:	4b09      	ldr	r3, [pc, #36]	; (800a350 <_Bfree+0x3c>)
 800a32c:	4809      	ldr	r0, [pc, #36]	; (800a354 <_Bfree+0x40>)
 800a32e:	218a      	movs	r1, #138	; 0x8a
 800a330:	f001 f9b2 	bl	800b698 <__assert_func>
 800a334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a338:	6006      	str	r6, [r0, #0]
 800a33a:	60c6      	str	r6, [r0, #12]
 800a33c:	b13c      	cbz	r4, 800a34e <_Bfree+0x3a>
 800a33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a340:	6862      	ldr	r2, [r4, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a348:	6021      	str	r1, [r4, #0]
 800a34a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a34e:	bd70      	pop	{r4, r5, r6, pc}
 800a350:	0800c334 	.word	0x0800c334
 800a354:	0800c3b7 	.word	0x0800c3b7

0800a358 <__multadd>:
 800a358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	690d      	ldr	r5, [r1, #16]
 800a35e:	4607      	mov	r7, r0
 800a360:	460c      	mov	r4, r1
 800a362:	461e      	mov	r6, r3
 800a364:	f101 0c14 	add.w	ip, r1, #20
 800a368:	2000      	movs	r0, #0
 800a36a:	f8dc 3000 	ldr.w	r3, [ip]
 800a36e:	b299      	uxth	r1, r3
 800a370:	fb02 6101 	mla	r1, r2, r1, r6
 800a374:	0c1e      	lsrs	r6, r3, #16
 800a376:	0c0b      	lsrs	r3, r1, #16
 800a378:	fb02 3306 	mla	r3, r2, r6, r3
 800a37c:	b289      	uxth	r1, r1
 800a37e:	3001      	adds	r0, #1
 800a380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a384:	4285      	cmp	r5, r0
 800a386:	f84c 1b04 	str.w	r1, [ip], #4
 800a38a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a38e:	dcec      	bgt.n	800a36a <__multadd+0x12>
 800a390:	b30e      	cbz	r6, 800a3d6 <__multadd+0x7e>
 800a392:	68a3      	ldr	r3, [r4, #8]
 800a394:	42ab      	cmp	r3, r5
 800a396:	dc19      	bgt.n	800a3cc <__multadd+0x74>
 800a398:	6861      	ldr	r1, [r4, #4]
 800a39a:	4638      	mov	r0, r7
 800a39c:	3101      	adds	r1, #1
 800a39e:	f7ff ff79 	bl	800a294 <_Balloc>
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	b928      	cbnz	r0, 800a3b2 <__multadd+0x5a>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	4b0c      	ldr	r3, [pc, #48]	; (800a3dc <__multadd+0x84>)
 800a3aa:	480d      	ldr	r0, [pc, #52]	; (800a3e0 <__multadd+0x88>)
 800a3ac:	21b5      	movs	r1, #181	; 0xb5
 800a3ae:	f001 f973 	bl	800b698 <__assert_func>
 800a3b2:	6922      	ldr	r2, [r4, #16]
 800a3b4:	3202      	adds	r2, #2
 800a3b6:	f104 010c 	add.w	r1, r4, #12
 800a3ba:	0092      	lsls	r2, r2, #2
 800a3bc:	300c      	adds	r0, #12
 800a3be:	f7ff ff5b 	bl	800a278 <memcpy>
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7ff ffa5 	bl	800a314 <_Bfree>
 800a3ca:	4644      	mov	r4, r8
 800a3cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	615e      	str	r6, [r3, #20]
 800a3d4:	6125      	str	r5, [r4, #16]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3dc:	0800c3a6 	.word	0x0800c3a6
 800a3e0:	0800c3b7 	.word	0x0800c3b7

0800a3e4 <__hi0bits>:
 800a3e4:	0c03      	lsrs	r3, r0, #16
 800a3e6:	041b      	lsls	r3, r3, #16
 800a3e8:	b9d3      	cbnz	r3, 800a420 <__hi0bits+0x3c>
 800a3ea:	0400      	lsls	r0, r0, #16
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3f2:	bf04      	itt	eq
 800a3f4:	0200      	lsleq	r0, r0, #8
 800a3f6:	3308      	addeq	r3, #8
 800a3f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3fc:	bf04      	itt	eq
 800a3fe:	0100      	lsleq	r0, r0, #4
 800a400:	3304      	addeq	r3, #4
 800a402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a406:	bf04      	itt	eq
 800a408:	0080      	lsleq	r0, r0, #2
 800a40a:	3302      	addeq	r3, #2
 800a40c:	2800      	cmp	r0, #0
 800a40e:	db05      	blt.n	800a41c <__hi0bits+0x38>
 800a410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a414:	f103 0301 	add.w	r3, r3, #1
 800a418:	bf08      	it	eq
 800a41a:	2320      	moveq	r3, #32
 800a41c:	4618      	mov	r0, r3
 800a41e:	4770      	bx	lr
 800a420:	2300      	movs	r3, #0
 800a422:	e7e4      	b.n	800a3ee <__hi0bits+0xa>

0800a424 <__lo0bits>:
 800a424:	6803      	ldr	r3, [r0, #0]
 800a426:	f013 0207 	ands.w	r2, r3, #7
 800a42a:	4601      	mov	r1, r0
 800a42c:	d00b      	beq.n	800a446 <__lo0bits+0x22>
 800a42e:	07da      	lsls	r2, r3, #31
 800a430:	d423      	bmi.n	800a47a <__lo0bits+0x56>
 800a432:	0798      	lsls	r0, r3, #30
 800a434:	bf49      	itett	mi
 800a436:	085b      	lsrmi	r3, r3, #1
 800a438:	089b      	lsrpl	r3, r3, #2
 800a43a:	2001      	movmi	r0, #1
 800a43c:	600b      	strmi	r3, [r1, #0]
 800a43e:	bf5c      	itt	pl
 800a440:	600b      	strpl	r3, [r1, #0]
 800a442:	2002      	movpl	r0, #2
 800a444:	4770      	bx	lr
 800a446:	b298      	uxth	r0, r3
 800a448:	b9a8      	cbnz	r0, 800a476 <__lo0bits+0x52>
 800a44a:	0c1b      	lsrs	r3, r3, #16
 800a44c:	2010      	movs	r0, #16
 800a44e:	b2da      	uxtb	r2, r3
 800a450:	b90a      	cbnz	r2, 800a456 <__lo0bits+0x32>
 800a452:	3008      	adds	r0, #8
 800a454:	0a1b      	lsrs	r3, r3, #8
 800a456:	071a      	lsls	r2, r3, #28
 800a458:	bf04      	itt	eq
 800a45a:	091b      	lsreq	r3, r3, #4
 800a45c:	3004      	addeq	r0, #4
 800a45e:	079a      	lsls	r2, r3, #30
 800a460:	bf04      	itt	eq
 800a462:	089b      	lsreq	r3, r3, #2
 800a464:	3002      	addeq	r0, #2
 800a466:	07da      	lsls	r2, r3, #31
 800a468:	d403      	bmi.n	800a472 <__lo0bits+0x4e>
 800a46a:	085b      	lsrs	r3, r3, #1
 800a46c:	f100 0001 	add.w	r0, r0, #1
 800a470:	d005      	beq.n	800a47e <__lo0bits+0x5a>
 800a472:	600b      	str	r3, [r1, #0]
 800a474:	4770      	bx	lr
 800a476:	4610      	mov	r0, r2
 800a478:	e7e9      	b.n	800a44e <__lo0bits+0x2a>
 800a47a:	2000      	movs	r0, #0
 800a47c:	4770      	bx	lr
 800a47e:	2020      	movs	r0, #32
 800a480:	4770      	bx	lr
	...

0800a484 <__i2b>:
 800a484:	b510      	push	{r4, lr}
 800a486:	460c      	mov	r4, r1
 800a488:	2101      	movs	r1, #1
 800a48a:	f7ff ff03 	bl	800a294 <_Balloc>
 800a48e:	4602      	mov	r2, r0
 800a490:	b928      	cbnz	r0, 800a49e <__i2b+0x1a>
 800a492:	4b05      	ldr	r3, [pc, #20]	; (800a4a8 <__i2b+0x24>)
 800a494:	4805      	ldr	r0, [pc, #20]	; (800a4ac <__i2b+0x28>)
 800a496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a49a:	f001 f8fd 	bl	800b698 <__assert_func>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	6144      	str	r4, [r0, #20]
 800a4a2:	6103      	str	r3, [r0, #16]
 800a4a4:	bd10      	pop	{r4, pc}
 800a4a6:	bf00      	nop
 800a4a8:	0800c3a6 	.word	0x0800c3a6
 800a4ac:	0800c3b7 	.word	0x0800c3b7

0800a4b0 <__multiply>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	4691      	mov	r9, r2
 800a4b6:	690a      	ldr	r2, [r1, #16]
 800a4b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	bfb8      	it	lt
 800a4c0:	460b      	movlt	r3, r1
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	bfbc      	itt	lt
 800a4c6:	464c      	movlt	r4, r9
 800a4c8:	4699      	movlt	r9, r3
 800a4ca:	6927      	ldr	r7, [r4, #16]
 800a4cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4d0:	68a3      	ldr	r3, [r4, #8]
 800a4d2:	6861      	ldr	r1, [r4, #4]
 800a4d4:	eb07 060a 	add.w	r6, r7, sl
 800a4d8:	42b3      	cmp	r3, r6
 800a4da:	b085      	sub	sp, #20
 800a4dc:	bfb8      	it	lt
 800a4de:	3101      	addlt	r1, #1
 800a4e0:	f7ff fed8 	bl	800a294 <_Balloc>
 800a4e4:	b930      	cbnz	r0, 800a4f4 <__multiply+0x44>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b44      	ldr	r3, [pc, #272]	; (800a5fc <__multiply+0x14c>)
 800a4ea:	4845      	ldr	r0, [pc, #276]	; (800a600 <__multiply+0x150>)
 800a4ec:	f240 115d 	movw	r1, #349	; 0x15d
 800a4f0:	f001 f8d2 	bl	800b698 <__assert_func>
 800a4f4:	f100 0514 	add.w	r5, r0, #20
 800a4f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	2200      	movs	r2, #0
 800a500:	4543      	cmp	r3, r8
 800a502:	d321      	bcc.n	800a548 <__multiply+0x98>
 800a504:	f104 0314 	add.w	r3, r4, #20
 800a508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a50c:	f109 0314 	add.w	r3, r9, #20
 800a510:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a514:	9202      	str	r2, [sp, #8]
 800a516:	1b3a      	subs	r2, r7, r4
 800a518:	3a15      	subs	r2, #21
 800a51a:	f022 0203 	bic.w	r2, r2, #3
 800a51e:	3204      	adds	r2, #4
 800a520:	f104 0115 	add.w	r1, r4, #21
 800a524:	428f      	cmp	r7, r1
 800a526:	bf38      	it	cc
 800a528:	2204      	movcc	r2, #4
 800a52a:	9201      	str	r2, [sp, #4]
 800a52c:	9a02      	ldr	r2, [sp, #8]
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	429a      	cmp	r2, r3
 800a532:	d80c      	bhi.n	800a54e <__multiply+0x9e>
 800a534:	2e00      	cmp	r6, #0
 800a536:	dd03      	ble.n	800a540 <__multiply+0x90>
 800a538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d05a      	beq.n	800a5f6 <__multiply+0x146>
 800a540:	6106      	str	r6, [r0, #16]
 800a542:	b005      	add	sp, #20
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	f843 2b04 	str.w	r2, [r3], #4
 800a54c:	e7d8      	b.n	800a500 <__multiply+0x50>
 800a54e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a552:	f1ba 0f00 	cmp.w	sl, #0
 800a556:	d024      	beq.n	800a5a2 <__multiply+0xf2>
 800a558:	f104 0e14 	add.w	lr, r4, #20
 800a55c:	46a9      	mov	r9, r5
 800a55e:	f04f 0c00 	mov.w	ip, #0
 800a562:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a566:	f8d9 1000 	ldr.w	r1, [r9]
 800a56a:	fa1f fb82 	uxth.w	fp, r2
 800a56e:	b289      	uxth	r1, r1
 800a570:	fb0a 110b 	mla	r1, sl, fp, r1
 800a574:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a578:	f8d9 2000 	ldr.w	r2, [r9]
 800a57c:	4461      	add	r1, ip
 800a57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a582:	fb0a c20b 	mla	r2, sl, fp, ip
 800a586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a58a:	b289      	uxth	r1, r1
 800a58c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a590:	4577      	cmp	r7, lr
 800a592:	f849 1b04 	str.w	r1, [r9], #4
 800a596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a59a:	d8e2      	bhi.n	800a562 <__multiply+0xb2>
 800a59c:	9a01      	ldr	r2, [sp, #4]
 800a59e:	f845 c002 	str.w	ip, [r5, r2]
 800a5a2:	9a03      	ldr	r2, [sp, #12]
 800a5a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	f1b9 0f00 	cmp.w	r9, #0
 800a5ae:	d020      	beq.n	800a5f2 <__multiply+0x142>
 800a5b0:	6829      	ldr	r1, [r5, #0]
 800a5b2:	f104 0c14 	add.w	ip, r4, #20
 800a5b6:	46ae      	mov	lr, r5
 800a5b8:	f04f 0a00 	mov.w	sl, #0
 800a5bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a5c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5c4:	fb09 220b 	mla	r2, r9, fp, r2
 800a5c8:	4492      	add	sl, r2
 800a5ca:	b289      	uxth	r1, r1
 800a5cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a5d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a5d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a5d8:	f8be 1000 	ldrh.w	r1, [lr]
 800a5dc:	0c12      	lsrs	r2, r2, #16
 800a5de:	fb09 1102 	mla	r1, r9, r2, r1
 800a5e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a5e6:	4567      	cmp	r7, ip
 800a5e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5ec:	d8e6      	bhi.n	800a5bc <__multiply+0x10c>
 800a5ee:	9a01      	ldr	r2, [sp, #4]
 800a5f0:	50a9      	str	r1, [r5, r2]
 800a5f2:	3504      	adds	r5, #4
 800a5f4:	e79a      	b.n	800a52c <__multiply+0x7c>
 800a5f6:	3e01      	subs	r6, #1
 800a5f8:	e79c      	b.n	800a534 <__multiply+0x84>
 800a5fa:	bf00      	nop
 800a5fc:	0800c3a6 	.word	0x0800c3a6
 800a600:	0800c3b7 	.word	0x0800c3b7

0800a604 <__pow5mult>:
 800a604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a608:	4615      	mov	r5, r2
 800a60a:	f012 0203 	ands.w	r2, r2, #3
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	d007      	beq.n	800a624 <__pow5mult+0x20>
 800a614:	4c25      	ldr	r4, [pc, #148]	; (800a6ac <__pow5mult+0xa8>)
 800a616:	3a01      	subs	r2, #1
 800a618:	2300      	movs	r3, #0
 800a61a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a61e:	f7ff fe9b 	bl	800a358 <__multadd>
 800a622:	4607      	mov	r7, r0
 800a624:	10ad      	asrs	r5, r5, #2
 800a626:	d03d      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a62a:	b97c      	cbnz	r4, 800a64c <__pow5mult+0x48>
 800a62c:	2010      	movs	r0, #16
 800a62e:	f7ff fe1b 	bl	800a268 <malloc>
 800a632:	4602      	mov	r2, r0
 800a634:	6270      	str	r0, [r6, #36]	; 0x24
 800a636:	b928      	cbnz	r0, 800a644 <__pow5mult+0x40>
 800a638:	4b1d      	ldr	r3, [pc, #116]	; (800a6b0 <__pow5mult+0xac>)
 800a63a:	481e      	ldr	r0, [pc, #120]	; (800a6b4 <__pow5mult+0xb0>)
 800a63c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a640:	f001 f82a 	bl	800b698 <__assert_func>
 800a644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a648:	6004      	str	r4, [r0, #0]
 800a64a:	60c4      	str	r4, [r0, #12]
 800a64c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a654:	b94c      	cbnz	r4, 800a66a <__pow5mult+0x66>
 800a656:	f240 2171 	movw	r1, #625	; 0x271
 800a65a:	4630      	mov	r0, r6
 800a65c:	f7ff ff12 	bl	800a484 <__i2b>
 800a660:	2300      	movs	r3, #0
 800a662:	f8c8 0008 	str.w	r0, [r8, #8]
 800a666:	4604      	mov	r4, r0
 800a668:	6003      	str	r3, [r0, #0]
 800a66a:	f04f 0900 	mov.w	r9, #0
 800a66e:	07eb      	lsls	r3, r5, #31
 800a670:	d50a      	bpl.n	800a688 <__pow5mult+0x84>
 800a672:	4639      	mov	r1, r7
 800a674:	4622      	mov	r2, r4
 800a676:	4630      	mov	r0, r6
 800a678:	f7ff ff1a 	bl	800a4b0 <__multiply>
 800a67c:	4639      	mov	r1, r7
 800a67e:	4680      	mov	r8, r0
 800a680:	4630      	mov	r0, r6
 800a682:	f7ff fe47 	bl	800a314 <_Bfree>
 800a686:	4647      	mov	r7, r8
 800a688:	106d      	asrs	r5, r5, #1
 800a68a:	d00b      	beq.n	800a6a4 <__pow5mult+0xa0>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	b938      	cbnz	r0, 800a6a0 <__pow5mult+0x9c>
 800a690:	4622      	mov	r2, r4
 800a692:	4621      	mov	r1, r4
 800a694:	4630      	mov	r0, r6
 800a696:	f7ff ff0b 	bl	800a4b0 <__multiply>
 800a69a:	6020      	str	r0, [r4, #0]
 800a69c:	f8c0 9000 	str.w	r9, [r0]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	e7e4      	b.n	800a66e <__pow5mult+0x6a>
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	bf00      	nop
 800a6ac:	0800c508 	.word	0x0800c508
 800a6b0:	0800c334 	.word	0x0800c334
 800a6b4:	0800c3b7 	.word	0x0800c3b7

0800a6b8 <__lshift>:
 800a6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	6849      	ldr	r1, [r1, #4]
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6c6:	68a3      	ldr	r3, [r4, #8]
 800a6c8:	4607      	mov	r7, r0
 800a6ca:	4691      	mov	r9, r2
 800a6cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d0:	f108 0601 	add.w	r6, r8, #1
 800a6d4:	42b3      	cmp	r3, r6
 800a6d6:	db0b      	blt.n	800a6f0 <__lshift+0x38>
 800a6d8:	4638      	mov	r0, r7
 800a6da:	f7ff fddb 	bl	800a294 <_Balloc>
 800a6de:	4605      	mov	r5, r0
 800a6e0:	b948      	cbnz	r0, 800a6f6 <__lshift+0x3e>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	4b2a      	ldr	r3, [pc, #168]	; (800a790 <__lshift+0xd8>)
 800a6e6:	482b      	ldr	r0, [pc, #172]	; (800a794 <__lshift+0xdc>)
 800a6e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6ec:	f000 ffd4 	bl	800b698 <__assert_func>
 800a6f0:	3101      	adds	r1, #1
 800a6f2:	005b      	lsls	r3, r3, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__lshift+0x1c>
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f100 0114 	add.w	r1, r0, #20
 800a6fc:	f100 0210 	add.w	r2, r0, #16
 800a700:	4618      	mov	r0, r3
 800a702:	4553      	cmp	r3, sl
 800a704:	db37      	blt.n	800a776 <__lshift+0xbe>
 800a706:	6920      	ldr	r0, [r4, #16]
 800a708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a70c:	f104 0314 	add.w	r3, r4, #20
 800a710:	f019 091f 	ands.w	r9, r9, #31
 800a714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a71c:	d02f      	beq.n	800a77e <__lshift+0xc6>
 800a71e:	f1c9 0e20 	rsb	lr, r9, #32
 800a722:	468a      	mov	sl, r1
 800a724:	f04f 0c00 	mov.w	ip, #0
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	fa02 f209 	lsl.w	r2, r2, r9
 800a72e:	ea42 020c 	orr.w	r2, r2, ip
 800a732:	f84a 2b04 	str.w	r2, [sl], #4
 800a736:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73a:	4298      	cmp	r0, r3
 800a73c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a740:	d8f2      	bhi.n	800a728 <__lshift+0x70>
 800a742:	1b03      	subs	r3, r0, r4
 800a744:	3b15      	subs	r3, #21
 800a746:	f023 0303 	bic.w	r3, r3, #3
 800a74a:	3304      	adds	r3, #4
 800a74c:	f104 0215 	add.w	r2, r4, #21
 800a750:	4290      	cmp	r0, r2
 800a752:	bf38      	it	cc
 800a754:	2304      	movcc	r3, #4
 800a756:	f841 c003 	str.w	ip, [r1, r3]
 800a75a:	f1bc 0f00 	cmp.w	ip, #0
 800a75e:	d001      	beq.n	800a764 <__lshift+0xac>
 800a760:	f108 0602 	add.w	r6, r8, #2
 800a764:	3e01      	subs	r6, #1
 800a766:	4638      	mov	r0, r7
 800a768:	612e      	str	r6, [r5, #16]
 800a76a:	4621      	mov	r1, r4
 800a76c:	f7ff fdd2 	bl	800a314 <_Bfree>
 800a770:	4628      	mov	r0, r5
 800a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a776:	f842 0f04 	str.w	r0, [r2, #4]!
 800a77a:	3301      	adds	r3, #1
 800a77c:	e7c1      	b.n	800a702 <__lshift+0x4a>
 800a77e:	3904      	subs	r1, #4
 800a780:	f853 2b04 	ldr.w	r2, [r3], #4
 800a784:	f841 2f04 	str.w	r2, [r1, #4]!
 800a788:	4298      	cmp	r0, r3
 800a78a:	d8f9      	bhi.n	800a780 <__lshift+0xc8>
 800a78c:	e7ea      	b.n	800a764 <__lshift+0xac>
 800a78e:	bf00      	nop
 800a790:	0800c3a6 	.word	0x0800c3a6
 800a794:	0800c3b7 	.word	0x0800c3b7

0800a798 <__mcmp>:
 800a798:	b530      	push	{r4, r5, lr}
 800a79a:	6902      	ldr	r2, [r0, #16]
 800a79c:	690c      	ldr	r4, [r1, #16]
 800a79e:	1b12      	subs	r2, r2, r4
 800a7a0:	d10e      	bne.n	800a7c0 <__mcmp+0x28>
 800a7a2:	f100 0314 	add.w	r3, r0, #20
 800a7a6:	3114      	adds	r1, #20
 800a7a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7b8:	42a5      	cmp	r5, r4
 800a7ba:	d003      	beq.n	800a7c4 <__mcmp+0x2c>
 800a7bc:	d305      	bcc.n	800a7ca <__mcmp+0x32>
 800a7be:	2201      	movs	r2, #1
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	d3f3      	bcc.n	800a7b0 <__mcmp+0x18>
 800a7c8:	e7fa      	b.n	800a7c0 <__mcmp+0x28>
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	e7f7      	b.n	800a7c0 <__mcmp+0x28>

0800a7d0 <__mdiff>:
 800a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4690      	mov	r8, r2
 800a7de:	f7ff ffdb 	bl	800a798 <__mcmp>
 800a7e2:	1e05      	subs	r5, r0, #0
 800a7e4:	d110      	bne.n	800a808 <__mdiff+0x38>
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f7ff fd53 	bl	800a294 <_Balloc>
 800a7ee:	b930      	cbnz	r0, 800a7fe <__mdiff+0x2e>
 800a7f0:	4b3a      	ldr	r3, [pc, #232]	; (800a8dc <__mdiff+0x10c>)
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	f240 2132 	movw	r1, #562	; 0x232
 800a7f8:	4839      	ldr	r0, [pc, #228]	; (800a8e0 <__mdiff+0x110>)
 800a7fa:	f000 ff4d 	bl	800b698 <__assert_func>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	bfa4      	itt	ge
 800a80a:	4643      	movge	r3, r8
 800a80c:	46a0      	movge	r8, r4
 800a80e:	4630      	mov	r0, r6
 800a810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a814:	bfa6      	itte	ge
 800a816:	461c      	movge	r4, r3
 800a818:	2500      	movge	r5, #0
 800a81a:	2501      	movlt	r5, #1
 800a81c:	f7ff fd3a 	bl	800a294 <_Balloc>
 800a820:	b920      	cbnz	r0, 800a82c <__mdiff+0x5c>
 800a822:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <__mdiff+0x10c>)
 800a824:	4602      	mov	r2, r0
 800a826:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a82a:	e7e5      	b.n	800a7f8 <__mdiff+0x28>
 800a82c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a830:	6926      	ldr	r6, [r4, #16]
 800a832:	60c5      	str	r5, [r0, #12]
 800a834:	f104 0914 	add.w	r9, r4, #20
 800a838:	f108 0514 	add.w	r5, r8, #20
 800a83c:	f100 0e14 	add.w	lr, r0, #20
 800a840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a848:	f108 0210 	add.w	r2, r8, #16
 800a84c:	46f2      	mov	sl, lr
 800a84e:	2100      	movs	r1, #0
 800a850:	f859 3b04 	ldr.w	r3, [r9], #4
 800a854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a858:	fa1f f883 	uxth.w	r8, r3
 800a85c:	fa11 f18b 	uxtah	r1, r1, fp
 800a860:	0c1b      	lsrs	r3, r3, #16
 800a862:	eba1 0808 	sub.w	r8, r1, r8
 800a866:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a86a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a86e:	fa1f f888 	uxth.w	r8, r8
 800a872:	1419      	asrs	r1, r3, #16
 800a874:	454e      	cmp	r6, r9
 800a876:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a87a:	f84a 3b04 	str.w	r3, [sl], #4
 800a87e:	d8e7      	bhi.n	800a850 <__mdiff+0x80>
 800a880:	1b33      	subs	r3, r6, r4
 800a882:	3b15      	subs	r3, #21
 800a884:	f023 0303 	bic.w	r3, r3, #3
 800a888:	3304      	adds	r3, #4
 800a88a:	3415      	adds	r4, #21
 800a88c:	42a6      	cmp	r6, r4
 800a88e:	bf38      	it	cc
 800a890:	2304      	movcc	r3, #4
 800a892:	441d      	add	r5, r3
 800a894:	4473      	add	r3, lr
 800a896:	469e      	mov	lr, r3
 800a898:	462e      	mov	r6, r5
 800a89a:	4566      	cmp	r6, ip
 800a89c:	d30e      	bcc.n	800a8bc <__mdiff+0xec>
 800a89e:	f10c 0203 	add.w	r2, ip, #3
 800a8a2:	1b52      	subs	r2, r2, r5
 800a8a4:	f022 0203 	bic.w	r2, r2, #3
 800a8a8:	3d03      	subs	r5, #3
 800a8aa:	45ac      	cmp	ip, r5
 800a8ac:	bf38      	it	cc
 800a8ae:	2200      	movcc	r2, #0
 800a8b0:	441a      	add	r2, r3
 800a8b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8b6:	b17b      	cbz	r3, 800a8d8 <__mdiff+0x108>
 800a8b8:	6107      	str	r7, [r0, #16]
 800a8ba:	e7a3      	b.n	800a804 <__mdiff+0x34>
 800a8bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8c0:	fa11 f288 	uxtah	r2, r1, r8
 800a8c4:	1414      	asrs	r4, r2, #16
 800a8c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8d0:	f84e 2b04 	str.w	r2, [lr], #4
 800a8d4:	1421      	asrs	r1, r4, #16
 800a8d6:	e7e0      	b.n	800a89a <__mdiff+0xca>
 800a8d8:	3f01      	subs	r7, #1
 800a8da:	e7ea      	b.n	800a8b2 <__mdiff+0xe2>
 800a8dc:	0800c3a6 	.word	0x0800c3a6
 800a8e0:	0800c3b7 	.word	0x0800c3b7

0800a8e4 <__d2b>:
 800a8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8e8:	4689      	mov	r9, r1
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	ec57 6b10 	vmov	r6, r7, d0
 800a8f0:	4690      	mov	r8, r2
 800a8f2:	f7ff fccf 	bl	800a294 <_Balloc>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	b930      	cbnz	r0, 800a908 <__d2b+0x24>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	4b25      	ldr	r3, [pc, #148]	; (800a994 <__d2b+0xb0>)
 800a8fe:	4826      	ldr	r0, [pc, #152]	; (800a998 <__d2b+0xb4>)
 800a900:	f240 310a 	movw	r1, #778	; 0x30a
 800a904:	f000 fec8 	bl	800b698 <__assert_func>
 800a908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a90c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a910:	bb35      	cbnz	r5, 800a960 <__d2b+0x7c>
 800a912:	2e00      	cmp	r6, #0
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	d028      	beq.n	800a96a <__d2b+0x86>
 800a918:	4668      	mov	r0, sp
 800a91a:	9600      	str	r6, [sp, #0]
 800a91c:	f7ff fd82 	bl	800a424 <__lo0bits>
 800a920:	9900      	ldr	r1, [sp, #0]
 800a922:	b300      	cbz	r0, 800a966 <__d2b+0x82>
 800a924:	9a01      	ldr	r2, [sp, #4]
 800a926:	f1c0 0320 	rsb	r3, r0, #32
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	430b      	orrs	r3, r1
 800a930:	40c2      	lsrs	r2, r0
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	9201      	str	r2, [sp, #4]
 800a936:	9b01      	ldr	r3, [sp, #4]
 800a938:	61a3      	str	r3, [r4, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	bf14      	ite	ne
 800a93e:	2202      	movne	r2, #2
 800a940:	2201      	moveq	r2, #1
 800a942:	6122      	str	r2, [r4, #16]
 800a944:	b1d5      	cbz	r5, 800a97c <__d2b+0x98>
 800a946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a94a:	4405      	add	r5, r0
 800a94c:	f8c9 5000 	str.w	r5, [r9]
 800a950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a954:	f8c8 0000 	str.w	r0, [r8]
 800a958:	4620      	mov	r0, r4
 800a95a:	b003      	add	sp, #12
 800a95c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a964:	e7d5      	b.n	800a912 <__d2b+0x2e>
 800a966:	6161      	str	r1, [r4, #20]
 800a968:	e7e5      	b.n	800a936 <__d2b+0x52>
 800a96a:	a801      	add	r0, sp, #4
 800a96c:	f7ff fd5a 	bl	800a424 <__lo0bits>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	6163      	str	r3, [r4, #20]
 800a974:	2201      	movs	r2, #1
 800a976:	6122      	str	r2, [r4, #16]
 800a978:	3020      	adds	r0, #32
 800a97a:	e7e3      	b.n	800a944 <__d2b+0x60>
 800a97c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a984:	f8c9 0000 	str.w	r0, [r9]
 800a988:	6918      	ldr	r0, [r3, #16]
 800a98a:	f7ff fd2b 	bl	800a3e4 <__hi0bits>
 800a98e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a992:	e7df      	b.n	800a954 <__d2b+0x70>
 800a994:	0800c3a6 	.word	0x0800c3a6
 800a998:	0800c3b7 	.word	0x0800c3b7

0800a99c <_calloc_r>:
 800a99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a99e:	fba1 2402 	umull	r2, r4, r1, r2
 800a9a2:	b94c      	cbnz	r4, 800a9b8 <_calloc_r+0x1c>
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	9201      	str	r2, [sp, #4]
 800a9a8:	f000 f87a 	bl	800aaa0 <_malloc_r>
 800a9ac:	9a01      	ldr	r2, [sp, #4]
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	b930      	cbnz	r0, 800a9c0 <_calloc_r+0x24>
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	b003      	add	sp, #12
 800a9b6:	bd30      	pop	{r4, r5, pc}
 800a9b8:	220c      	movs	r2, #12
 800a9ba:	6002      	str	r2, [r0, #0]
 800a9bc:	2500      	movs	r5, #0
 800a9be:	e7f8      	b.n	800a9b2 <_calloc_r+0x16>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	f7fe f80d 	bl	80089e0 <memset>
 800a9c6:	e7f4      	b.n	800a9b2 <_calloc_r+0x16>

0800a9c8 <_free_r>:
 800a9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ca:	2900      	cmp	r1, #0
 800a9cc:	d044      	beq.n	800aa58 <_free_r+0x90>
 800a9ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d2:	9001      	str	r0, [sp, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a9da:	bfb8      	it	lt
 800a9dc:	18e4      	addlt	r4, r4, r3
 800a9de:	f001 f871 	bl	800bac4 <__malloc_lock>
 800a9e2:	4a1e      	ldr	r2, [pc, #120]	; (800aa5c <_free_r+0x94>)
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x30>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	b003      	add	sp, #12
 800a9f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9f4:	f001 b86c 	b.w	800bad0 <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x46>
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1949      	addeq	r1, r1, r5
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x22>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x50>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x46>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1855      	adds	r5, r2, r1
 800aa1c:	42a5      	cmp	r5, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x70>
 800aa20:	6824      	ldr	r4, [r4, #0]
 800aa22:	4421      	add	r1, r4
 800aa24:	1854      	adds	r4, r2, r1
 800aa26:	42a3      	cmp	r3, r4
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x26>
 800aa2c:	681c      	ldr	r4, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	4421      	add	r1, r4
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x26>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x78>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	6003      	str	r3, [r0, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x26>
 800aa40:	6825      	ldr	r5, [r4, #0]
 800aa42:	1961      	adds	r1, r4, r5
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1949      	addeq	r1, r1, r5
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x26>
 800aa58:	b003      	add	sp, #12
 800aa5a:	bd30      	pop	{r4, r5, pc}
 800aa5c:	20000a60 	.word	0x20000a60

0800aa60 <sbrk_aligned>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4e0e      	ldr	r6, [pc, #56]	; (800aa9c <sbrk_aligned+0x3c>)
 800aa64:	460c      	mov	r4, r1
 800aa66:	6831      	ldr	r1, [r6, #0]
 800aa68:	4605      	mov	r5, r0
 800aa6a:	b911      	cbnz	r1, 800aa72 <sbrk_aligned+0x12>
 800aa6c:	f000 fd1e 	bl	800b4ac <_sbrk_r>
 800aa70:	6030      	str	r0, [r6, #0]
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f000 fd19 	bl	800b4ac <_sbrk_r>
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	d00a      	beq.n	800aa94 <sbrk_aligned+0x34>
 800aa7e:	1cc4      	adds	r4, r0, #3
 800aa80:	f024 0403 	bic.w	r4, r4, #3
 800aa84:	42a0      	cmp	r0, r4
 800aa86:	d007      	beq.n	800aa98 <sbrk_aligned+0x38>
 800aa88:	1a21      	subs	r1, r4, r0
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f000 fd0e 	bl	800b4ac <_sbrk_r>
 800aa90:	3001      	adds	r0, #1
 800aa92:	d101      	bne.n	800aa98 <sbrk_aligned+0x38>
 800aa94:	f04f 34ff 	mov.w	r4, #4294967295
 800aa98:	4620      	mov	r0, r4
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	20000a64 	.word	0x20000a64

0800aaa0 <_malloc_r>:
 800aaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	1ccd      	adds	r5, r1, #3
 800aaa6:	f025 0503 	bic.w	r5, r5, #3
 800aaaa:	3508      	adds	r5, #8
 800aaac:	2d0c      	cmp	r5, #12
 800aaae:	bf38      	it	cc
 800aab0:	250c      	movcc	r5, #12
 800aab2:	2d00      	cmp	r5, #0
 800aab4:	4607      	mov	r7, r0
 800aab6:	db01      	blt.n	800aabc <_malloc_r+0x1c>
 800aab8:	42a9      	cmp	r1, r5
 800aaba:	d905      	bls.n	800aac8 <_malloc_r+0x28>
 800aabc:	230c      	movs	r3, #12
 800aabe:	603b      	str	r3, [r7, #0]
 800aac0:	2600      	movs	r6, #0
 800aac2:	4630      	mov	r0, r6
 800aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac8:	4e2e      	ldr	r6, [pc, #184]	; (800ab84 <_malloc_r+0xe4>)
 800aaca:	f000 fffb 	bl	800bac4 <__malloc_lock>
 800aace:	6833      	ldr	r3, [r6, #0]
 800aad0:	461c      	mov	r4, r3
 800aad2:	bb34      	cbnz	r4, 800ab22 <_malloc_r+0x82>
 800aad4:	4629      	mov	r1, r5
 800aad6:	4638      	mov	r0, r7
 800aad8:	f7ff ffc2 	bl	800aa60 <sbrk_aligned>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	4604      	mov	r4, r0
 800aae0:	d14d      	bne.n	800ab7e <_malloc_r+0xde>
 800aae2:	6834      	ldr	r4, [r6, #0]
 800aae4:	4626      	mov	r6, r4
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	d140      	bne.n	800ab6c <_malloc_r+0xcc>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	4631      	mov	r1, r6
 800aaee:	4638      	mov	r0, r7
 800aaf0:	eb04 0803 	add.w	r8, r4, r3
 800aaf4:	f000 fcda 	bl	800b4ac <_sbrk_r>
 800aaf8:	4580      	cmp	r8, r0
 800aafa:	d13a      	bne.n	800ab72 <_malloc_r+0xd2>
 800aafc:	6821      	ldr	r1, [r4, #0]
 800aafe:	3503      	adds	r5, #3
 800ab00:	1a6d      	subs	r5, r5, r1
 800ab02:	f025 0503 	bic.w	r5, r5, #3
 800ab06:	3508      	adds	r5, #8
 800ab08:	2d0c      	cmp	r5, #12
 800ab0a:	bf38      	it	cc
 800ab0c:	250c      	movcc	r5, #12
 800ab0e:	4629      	mov	r1, r5
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ffa5 	bl	800aa60 <sbrk_aligned>
 800ab16:	3001      	adds	r0, #1
 800ab18:	d02b      	beq.n	800ab72 <_malloc_r+0xd2>
 800ab1a:	6823      	ldr	r3, [r4, #0]
 800ab1c:	442b      	add	r3, r5
 800ab1e:	6023      	str	r3, [r4, #0]
 800ab20:	e00e      	b.n	800ab40 <_malloc_r+0xa0>
 800ab22:	6822      	ldr	r2, [r4, #0]
 800ab24:	1b52      	subs	r2, r2, r5
 800ab26:	d41e      	bmi.n	800ab66 <_malloc_r+0xc6>
 800ab28:	2a0b      	cmp	r2, #11
 800ab2a:	d916      	bls.n	800ab5a <_malloc_r+0xba>
 800ab2c:	1961      	adds	r1, r4, r5
 800ab2e:	42a3      	cmp	r3, r4
 800ab30:	6025      	str	r5, [r4, #0]
 800ab32:	bf18      	it	ne
 800ab34:	6059      	strne	r1, [r3, #4]
 800ab36:	6863      	ldr	r3, [r4, #4]
 800ab38:	bf08      	it	eq
 800ab3a:	6031      	streq	r1, [r6, #0]
 800ab3c:	5162      	str	r2, [r4, r5]
 800ab3e:	604b      	str	r3, [r1, #4]
 800ab40:	4638      	mov	r0, r7
 800ab42:	f104 060b 	add.w	r6, r4, #11
 800ab46:	f000 ffc3 	bl	800bad0 <__malloc_unlock>
 800ab4a:	f026 0607 	bic.w	r6, r6, #7
 800ab4e:	1d23      	adds	r3, r4, #4
 800ab50:	1af2      	subs	r2, r6, r3
 800ab52:	d0b6      	beq.n	800aac2 <_malloc_r+0x22>
 800ab54:	1b9b      	subs	r3, r3, r6
 800ab56:	50a3      	str	r3, [r4, r2]
 800ab58:	e7b3      	b.n	800aac2 <_malloc_r+0x22>
 800ab5a:	6862      	ldr	r2, [r4, #4]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	bf0c      	ite	eq
 800ab60:	6032      	streq	r2, [r6, #0]
 800ab62:	605a      	strne	r2, [r3, #4]
 800ab64:	e7ec      	b.n	800ab40 <_malloc_r+0xa0>
 800ab66:	4623      	mov	r3, r4
 800ab68:	6864      	ldr	r4, [r4, #4]
 800ab6a:	e7b2      	b.n	800aad2 <_malloc_r+0x32>
 800ab6c:	4634      	mov	r4, r6
 800ab6e:	6876      	ldr	r6, [r6, #4]
 800ab70:	e7b9      	b.n	800aae6 <_malloc_r+0x46>
 800ab72:	230c      	movs	r3, #12
 800ab74:	603b      	str	r3, [r7, #0]
 800ab76:	4638      	mov	r0, r7
 800ab78:	f000 ffaa 	bl	800bad0 <__malloc_unlock>
 800ab7c:	e7a1      	b.n	800aac2 <_malloc_r+0x22>
 800ab7e:	6025      	str	r5, [r4, #0]
 800ab80:	e7de      	b.n	800ab40 <_malloc_r+0xa0>
 800ab82:	bf00      	nop
 800ab84:	20000a60 	.word	0x20000a60

0800ab88 <__ssputs_r>:
 800ab88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab8c:	688e      	ldr	r6, [r1, #8]
 800ab8e:	429e      	cmp	r6, r3
 800ab90:	4682      	mov	sl, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4690      	mov	r8, r2
 800ab96:	461f      	mov	r7, r3
 800ab98:	d838      	bhi.n	800ac0c <__ssputs_r+0x84>
 800ab9a:	898a      	ldrh	r2, [r1, #12]
 800ab9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aba0:	d032      	beq.n	800ac08 <__ssputs_r+0x80>
 800aba2:	6825      	ldr	r5, [r4, #0]
 800aba4:	6909      	ldr	r1, [r1, #16]
 800aba6:	eba5 0901 	sub.w	r9, r5, r1
 800abaa:	6965      	ldr	r5, [r4, #20]
 800abac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abb4:	3301      	adds	r3, #1
 800abb6:	444b      	add	r3, r9
 800abb8:	106d      	asrs	r5, r5, #1
 800abba:	429d      	cmp	r5, r3
 800abbc:	bf38      	it	cc
 800abbe:	461d      	movcc	r5, r3
 800abc0:	0553      	lsls	r3, r2, #21
 800abc2:	d531      	bpl.n	800ac28 <__ssputs_r+0xa0>
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7ff ff6b 	bl	800aaa0 <_malloc_r>
 800abca:	4606      	mov	r6, r0
 800abcc:	b950      	cbnz	r0, 800abe4 <__ssputs_r+0x5c>
 800abce:	230c      	movs	r3, #12
 800abd0:	f8ca 3000 	str.w	r3, [sl]
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	f04f 30ff 	mov.w	r0, #4294967295
 800abe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abe4:	6921      	ldr	r1, [r4, #16]
 800abe6:	464a      	mov	r2, r9
 800abe8:	f7ff fb46 	bl	800a278 <memcpy>
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	6126      	str	r6, [r4, #16]
 800abfa:	6165      	str	r5, [r4, #20]
 800abfc:	444e      	add	r6, r9
 800abfe:	eba5 0509 	sub.w	r5, r5, r9
 800ac02:	6026      	str	r6, [r4, #0]
 800ac04:	60a5      	str	r5, [r4, #8]
 800ac06:	463e      	mov	r6, r7
 800ac08:	42be      	cmp	r6, r7
 800ac0a:	d900      	bls.n	800ac0e <__ssputs_r+0x86>
 800ac0c:	463e      	mov	r6, r7
 800ac0e:	6820      	ldr	r0, [r4, #0]
 800ac10:	4632      	mov	r2, r6
 800ac12:	4641      	mov	r1, r8
 800ac14:	f000 ff3c 	bl	800ba90 <memmove>
 800ac18:	68a3      	ldr	r3, [r4, #8]
 800ac1a:	1b9b      	subs	r3, r3, r6
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	4433      	add	r3, r6
 800ac22:	6023      	str	r3, [r4, #0]
 800ac24:	2000      	movs	r0, #0
 800ac26:	e7db      	b.n	800abe0 <__ssputs_r+0x58>
 800ac28:	462a      	mov	r2, r5
 800ac2a:	f000 ff57 	bl	800badc <_realloc_r>
 800ac2e:	4606      	mov	r6, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d1e1      	bne.n	800abf8 <__ssputs_r+0x70>
 800ac34:	6921      	ldr	r1, [r4, #16]
 800ac36:	4650      	mov	r0, sl
 800ac38:	f7ff fec6 	bl	800a9c8 <_free_r>
 800ac3c:	e7c7      	b.n	800abce <__ssputs_r+0x46>
	...

0800ac40 <_svfiprintf_r>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	4698      	mov	r8, r3
 800ac46:	898b      	ldrh	r3, [r1, #12]
 800ac48:	061b      	lsls	r3, r3, #24
 800ac4a:	b09d      	sub	sp, #116	; 0x74
 800ac4c:	4607      	mov	r7, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	d50e      	bpl.n	800ac72 <_svfiprintf_r+0x32>
 800ac54:	690b      	ldr	r3, [r1, #16]
 800ac56:	b963      	cbnz	r3, 800ac72 <_svfiprintf_r+0x32>
 800ac58:	2140      	movs	r1, #64	; 0x40
 800ac5a:	f7ff ff21 	bl	800aaa0 <_malloc_r>
 800ac5e:	6028      	str	r0, [r5, #0]
 800ac60:	6128      	str	r0, [r5, #16]
 800ac62:	b920      	cbnz	r0, 800ac6e <_svfiprintf_r+0x2e>
 800ac64:	230c      	movs	r3, #12
 800ac66:	603b      	str	r3, [r7, #0]
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295
 800ac6c:	e0d1      	b.n	800ae12 <_svfiprintf_r+0x1d2>
 800ac6e:	2340      	movs	r3, #64	; 0x40
 800ac70:	616b      	str	r3, [r5, #20]
 800ac72:	2300      	movs	r3, #0
 800ac74:	9309      	str	r3, [sp, #36]	; 0x24
 800ac76:	2320      	movs	r3, #32
 800ac78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac80:	2330      	movs	r3, #48	; 0x30
 800ac82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae2c <_svfiprintf_r+0x1ec>
 800ac86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac8a:	f04f 0901 	mov.w	r9, #1
 800ac8e:	4623      	mov	r3, r4
 800ac90:	469a      	mov	sl, r3
 800ac92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac96:	b10a      	cbz	r2, 800ac9c <_svfiprintf_r+0x5c>
 800ac98:	2a25      	cmp	r2, #37	; 0x25
 800ac9a:	d1f9      	bne.n	800ac90 <_svfiprintf_r+0x50>
 800ac9c:	ebba 0b04 	subs.w	fp, sl, r4
 800aca0:	d00b      	beq.n	800acba <_svfiprintf_r+0x7a>
 800aca2:	465b      	mov	r3, fp
 800aca4:	4622      	mov	r2, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff ff6d 	bl	800ab88 <__ssputs_r>
 800acae:	3001      	adds	r0, #1
 800acb0:	f000 80aa 	beq.w	800ae08 <_svfiprintf_r+0x1c8>
 800acb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb6:	445a      	add	r2, fp
 800acb8:	9209      	str	r2, [sp, #36]	; 0x24
 800acba:	f89a 3000 	ldrb.w	r3, [sl]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 80a2 	beq.w	800ae08 <_svfiprintf_r+0x1c8>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f04f 32ff 	mov.w	r2, #4294967295
 800acca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acce:	f10a 0a01 	add.w	sl, sl, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	9307      	str	r3, [sp, #28]
 800acd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acda:	931a      	str	r3, [sp, #104]	; 0x68
 800acdc:	4654      	mov	r4, sl
 800acde:	2205      	movs	r2, #5
 800ace0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace4:	4851      	ldr	r0, [pc, #324]	; (800ae2c <_svfiprintf_r+0x1ec>)
 800ace6:	f7f5 fa9b 	bl	8000220 <memchr>
 800acea:	9a04      	ldr	r2, [sp, #16]
 800acec:	b9d8      	cbnz	r0, 800ad26 <_svfiprintf_r+0xe6>
 800acee:	06d0      	lsls	r0, r2, #27
 800acf0:	bf44      	itt	mi
 800acf2:	2320      	movmi	r3, #32
 800acf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf8:	0711      	lsls	r1, r2, #28
 800acfa:	bf44      	itt	mi
 800acfc:	232b      	movmi	r3, #43	; 0x2b
 800acfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad02:	f89a 3000 	ldrb.w	r3, [sl]
 800ad06:	2b2a      	cmp	r3, #42	; 0x2a
 800ad08:	d015      	beq.n	800ad36 <_svfiprintf_r+0xf6>
 800ad0a:	9a07      	ldr	r2, [sp, #28]
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2000      	movs	r0, #0
 800ad10:	f04f 0c0a 	mov.w	ip, #10
 800ad14:	4621      	mov	r1, r4
 800ad16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad1a:	3b30      	subs	r3, #48	; 0x30
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d94e      	bls.n	800adbe <_svfiprintf_r+0x17e>
 800ad20:	b1b0      	cbz	r0, 800ad50 <_svfiprintf_r+0x110>
 800ad22:	9207      	str	r2, [sp, #28]
 800ad24:	e014      	b.n	800ad50 <_svfiprintf_r+0x110>
 800ad26:	eba0 0308 	sub.w	r3, r0, r8
 800ad2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	46a2      	mov	sl, r4
 800ad34:	e7d2      	b.n	800acdc <_svfiprintf_r+0x9c>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	1d19      	adds	r1, r3, #4
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	9103      	str	r1, [sp, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfbb      	ittet	lt
 800ad42:	425b      	neglt	r3, r3
 800ad44:	f042 0202 	orrlt.w	r2, r2, #2
 800ad48:	9307      	strge	r3, [sp, #28]
 800ad4a:	9307      	strlt	r3, [sp, #28]
 800ad4c:	bfb8      	it	lt
 800ad4e:	9204      	strlt	r2, [sp, #16]
 800ad50:	7823      	ldrb	r3, [r4, #0]
 800ad52:	2b2e      	cmp	r3, #46	; 0x2e
 800ad54:	d10c      	bne.n	800ad70 <_svfiprintf_r+0x130>
 800ad56:	7863      	ldrb	r3, [r4, #1]
 800ad58:	2b2a      	cmp	r3, #42	; 0x2a
 800ad5a:	d135      	bne.n	800adc8 <_svfiprintf_r+0x188>
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	1d1a      	adds	r2, r3, #4
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	9203      	str	r2, [sp, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	bfb8      	it	lt
 800ad68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad6c:	3402      	adds	r4, #2
 800ad6e:	9305      	str	r3, [sp, #20]
 800ad70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae3c <_svfiprintf_r+0x1fc>
 800ad74:	7821      	ldrb	r1, [r4, #0]
 800ad76:	2203      	movs	r2, #3
 800ad78:	4650      	mov	r0, sl
 800ad7a:	f7f5 fa51 	bl	8000220 <memchr>
 800ad7e:	b140      	cbz	r0, 800ad92 <_svfiprintf_r+0x152>
 800ad80:	2340      	movs	r3, #64	; 0x40
 800ad82:	eba0 000a 	sub.w	r0, r0, sl
 800ad86:	fa03 f000 	lsl.w	r0, r3, r0
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	4303      	orrs	r3, r0
 800ad8e:	3401      	adds	r4, #1
 800ad90:	9304      	str	r3, [sp, #16]
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	4826      	ldr	r0, [pc, #152]	; (800ae30 <_svfiprintf_r+0x1f0>)
 800ad98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad9c:	2206      	movs	r2, #6
 800ad9e:	f7f5 fa3f 	bl	8000220 <memchr>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d038      	beq.n	800ae18 <_svfiprintf_r+0x1d8>
 800ada6:	4b23      	ldr	r3, [pc, #140]	; (800ae34 <_svfiprintf_r+0x1f4>)
 800ada8:	bb1b      	cbnz	r3, 800adf2 <_svfiprintf_r+0x1b2>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	3307      	adds	r3, #7
 800adae:	f023 0307 	bic.w	r3, r3, #7
 800adb2:	3308      	adds	r3, #8
 800adb4:	9303      	str	r3, [sp, #12]
 800adb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb8:	4433      	add	r3, r6
 800adba:	9309      	str	r3, [sp, #36]	; 0x24
 800adbc:	e767      	b.n	800ac8e <_svfiprintf_r+0x4e>
 800adbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800adc2:	460c      	mov	r4, r1
 800adc4:	2001      	movs	r0, #1
 800adc6:	e7a5      	b.n	800ad14 <_svfiprintf_r+0xd4>
 800adc8:	2300      	movs	r3, #0
 800adca:	3401      	adds	r4, #1
 800adcc:	9305      	str	r3, [sp, #20]
 800adce:	4619      	mov	r1, r3
 800add0:	f04f 0c0a 	mov.w	ip, #10
 800add4:	4620      	mov	r0, r4
 800add6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adda:	3a30      	subs	r2, #48	; 0x30
 800addc:	2a09      	cmp	r2, #9
 800adde:	d903      	bls.n	800ade8 <_svfiprintf_r+0x1a8>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0c5      	beq.n	800ad70 <_svfiprintf_r+0x130>
 800ade4:	9105      	str	r1, [sp, #20]
 800ade6:	e7c3      	b.n	800ad70 <_svfiprintf_r+0x130>
 800ade8:	fb0c 2101 	mla	r1, ip, r1, r2
 800adec:	4604      	mov	r4, r0
 800adee:	2301      	movs	r3, #1
 800adf0:	e7f0      	b.n	800add4 <_svfiprintf_r+0x194>
 800adf2:	ab03      	add	r3, sp, #12
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	462a      	mov	r2, r5
 800adf8:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <_svfiprintf_r+0x1f8>)
 800adfa:	a904      	add	r1, sp, #16
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7fd fe97 	bl	8008b30 <_printf_float>
 800ae02:	1c42      	adds	r2, r0, #1
 800ae04:	4606      	mov	r6, r0
 800ae06:	d1d6      	bne.n	800adb6 <_svfiprintf_r+0x176>
 800ae08:	89ab      	ldrh	r3, [r5, #12]
 800ae0a:	065b      	lsls	r3, r3, #25
 800ae0c:	f53f af2c 	bmi.w	800ac68 <_svfiprintf_r+0x28>
 800ae10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae12:	b01d      	add	sp, #116	; 0x74
 800ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae18:	ab03      	add	r3, sp, #12
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	4b06      	ldr	r3, [pc, #24]	; (800ae38 <_svfiprintf_r+0x1f8>)
 800ae20:	a904      	add	r1, sp, #16
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7fe f928 	bl	8009078 <_printf_i>
 800ae28:	e7eb      	b.n	800ae02 <_svfiprintf_r+0x1c2>
 800ae2a:	bf00      	nop
 800ae2c:	0800c514 	.word	0x0800c514
 800ae30:	0800c51e 	.word	0x0800c51e
 800ae34:	08008b31 	.word	0x08008b31
 800ae38:	0800ab89 	.word	0x0800ab89
 800ae3c:	0800c51a 	.word	0x0800c51a

0800ae40 <_sungetc_r>:
 800ae40:	b538      	push	{r3, r4, r5, lr}
 800ae42:	1c4b      	adds	r3, r1, #1
 800ae44:	4614      	mov	r4, r2
 800ae46:	d103      	bne.n	800ae50 <_sungetc_r+0x10>
 800ae48:	f04f 35ff 	mov.w	r5, #4294967295
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	bd38      	pop	{r3, r4, r5, pc}
 800ae50:	8993      	ldrh	r3, [r2, #12]
 800ae52:	f023 0320 	bic.w	r3, r3, #32
 800ae56:	8193      	strh	r3, [r2, #12]
 800ae58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae5a:	6852      	ldr	r2, [r2, #4]
 800ae5c:	b2cd      	uxtb	r5, r1
 800ae5e:	b18b      	cbz	r3, 800ae84 <_sungetc_r+0x44>
 800ae60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ae62:	4293      	cmp	r3, r2
 800ae64:	dd08      	ble.n	800ae78 <_sungetc_r+0x38>
 800ae66:	6823      	ldr	r3, [r4, #0]
 800ae68:	1e5a      	subs	r2, r3, #1
 800ae6a:	6022      	str	r2, [r4, #0]
 800ae6c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ae70:	6863      	ldr	r3, [r4, #4]
 800ae72:	3301      	adds	r3, #1
 800ae74:	6063      	str	r3, [r4, #4]
 800ae76:	e7e9      	b.n	800ae4c <_sungetc_r+0xc>
 800ae78:	4621      	mov	r1, r4
 800ae7a:	f000 fbd3 	bl	800b624 <__submore>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0f1      	beq.n	800ae66 <_sungetc_r+0x26>
 800ae82:	e7e1      	b.n	800ae48 <_sungetc_r+0x8>
 800ae84:	6921      	ldr	r1, [r4, #16]
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	b151      	cbz	r1, 800aea0 <_sungetc_r+0x60>
 800ae8a:	4299      	cmp	r1, r3
 800ae8c:	d208      	bcs.n	800aea0 <_sungetc_r+0x60>
 800ae8e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ae92:	42a9      	cmp	r1, r5
 800ae94:	d104      	bne.n	800aea0 <_sungetc_r+0x60>
 800ae96:	3b01      	subs	r3, #1
 800ae98:	3201      	adds	r2, #1
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	6062      	str	r2, [r4, #4]
 800ae9e:	e7d5      	b.n	800ae4c <_sungetc_r+0xc>
 800aea0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800aea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea8:	6363      	str	r3, [r4, #52]	; 0x34
 800aeaa:	2303      	movs	r3, #3
 800aeac:	63a3      	str	r3, [r4, #56]	; 0x38
 800aeae:	4623      	mov	r3, r4
 800aeb0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e7dc      	b.n	800ae74 <_sungetc_r+0x34>

0800aeba <__ssrefill_r>:
 800aeba:	b510      	push	{r4, lr}
 800aebc:	460c      	mov	r4, r1
 800aebe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aec0:	b169      	cbz	r1, 800aede <__ssrefill_r+0x24>
 800aec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec6:	4299      	cmp	r1, r3
 800aec8:	d001      	beq.n	800aece <__ssrefill_r+0x14>
 800aeca:	f7ff fd7d 	bl	800a9c8 <_free_r>
 800aece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	2000      	movs	r0, #0
 800aed4:	6360      	str	r0, [r4, #52]	; 0x34
 800aed6:	b113      	cbz	r3, 800aede <__ssrefill_r+0x24>
 800aed8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	6063      	str	r3, [r4, #4]
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0320 	orr.w	r3, r3, #32
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	e7f3      	b.n	800aedc <__ssrefill_r+0x22>

0800aef4 <__ssvfiscanf_r>:
 800aef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef8:	460c      	mov	r4, r1
 800aefa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800aefe:	2100      	movs	r1, #0
 800af00:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800af04:	49a6      	ldr	r1, [pc, #664]	; (800b1a0 <__ssvfiscanf_r+0x2ac>)
 800af06:	91a0      	str	r1, [sp, #640]	; 0x280
 800af08:	f10d 0804 	add.w	r8, sp, #4
 800af0c:	49a5      	ldr	r1, [pc, #660]	; (800b1a4 <__ssvfiscanf_r+0x2b0>)
 800af0e:	4fa6      	ldr	r7, [pc, #664]	; (800b1a8 <__ssvfiscanf_r+0x2b4>)
 800af10:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b1ac <__ssvfiscanf_r+0x2b8>
 800af14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800af18:	4606      	mov	r6, r0
 800af1a:	91a1      	str	r1, [sp, #644]	; 0x284
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	7813      	ldrb	r3, [r2, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 815a 	beq.w	800b1da <__ssvfiscanf_r+0x2e6>
 800af26:	5dd9      	ldrb	r1, [r3, r7]
 800af28:	f011 0108 	ands.w	r1, r1, #8
 800af2c:	f102 0501 	add.w	r5, r2, #1
 800af30:	d019      	beq.n	800af66 <__ssvfiscanf_r+0x72>
 800af32:	6863      	ldr	r3, [r4, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	dd0f      	ble.n	800af58 <__ssvfiscanf_r+0x64>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	5cba      	ldrb	r2, [r7, r2]
 800af3e:	0712      	lsls	r2, r2, #28
 800af40:	d401      	bmi.n	800af46 <__ssvfiscanf_r+0x52>
 800af42:	462a      	mov	r2, r5
 800af44:	e7eb      	b.n	800af1e <__ssvfiscanf_r+0x2a>
 800af46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800af48:	3201      	adds	r2, #1
 800af4a:	9245      	str	r2, [sp, #276]	; 0x114
 800af4c:	6862      	ldr	r2, [r4, #4]
 800af4e:	3301      	adds	r3, #1
 800af50:	3a01      	subs	r2, #1
 800af52:	6062      	str	r2, [r4, #4]
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	e7ec      	b.n	800af32 <__ssvfiscanf_r+0x3e>
 800af58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800af5a:	4621      	mov	r1, r4
 800af5c:	4630      	mov	r0, r6
 800af5e:	4798      	blx	r3
 800af60:	2800      	cmp	r0, #0
 800af62:	d0e9      	beq.n	800af38 <__ssvfiscanf_r+0x44>
 800af64:	e7ed      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800af66:	2b25      	cmp	r3, #37	; 0x25
 800af68:	d012      	beq.n	800af90 <__ssvfiscanf_r+0x9c>
 800af6a:	469a      	mov	sl, r3
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f340 8091 	ble.w	800b096 <__ssvfiscanf_r+0x1a2>
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	7813      	ldrb	r3, [r2, #0]
 800af78:	4553      	cmp	r3, sl
 800af7a:	f040 812e 	bne.w	800b1da <__ssvfiscanf_r+0x2e6>
 800af7e:	6863      	ldr	r3, [r4, #4]
 800af80:	3b01      	subs	r3, #1
 800af82:	6063      	str	r3, [r4, #4]
 800af84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800af86:	3201      	adds	r2, #1
 800af88:	3301      	adds	r3, #1
 800af8a:	6022      	str	r2, [r4, #0]
 800af8c:	9345      	str	r3, [sp, #276]	; 0x114
 800af8e:	e7d8      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800af90:	9141      	str	r1, [sp, #260]	; 0x104
 800af92:	9143      	str	r1, [sp, #268]	; 0x10c
 800af94:	7853      	ldrb	r3, [r2, #1]
 800af96:	2b2a      	cmp	r3, #42	; 0x2a
 800af98:	bf02      	ittt	eq
 800af9a:	2310      	moveq	r3, #16
 800af9c:	1c95      	addeq	r5, r2, #2
 800af9e:	9341      	streq	r3, [sp, #260]	; 0x104
 800afa0:	220a      	movs	r2, #10
 800afa2:	46aa      	mov	sl, r5
 800afa4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800afa8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800afac:	2b09      	cmp	r3, #9
 800afae:	d91d      	bls.n	800afec <__ssvfiscanf_r+0xf8>
 800afb0:	487e      	ldr	r0, [pc, #504]	; (800b1ac <__ssvfiscanf_r+0x2b8>)
 800afb2:	2203      	movs	r2, #3
 800afb4:	f7f5 f934 	bl	8000220 <memchr>
 800afb8:	b140      	cbz	r0, 800afcc <__ssvfiscanf_r+0xd8>
 800afba:	2301      	movs	r3, #1
 800afbc:	eba0 0009 	sub.w	r0, r0, r9
 800afc0:	fa03 f000 	lsl.w	r0, r3, r0
 800afc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800afc6:	4318      	orrs	r0, r3
 800afc8:	9041      	str	r0, [sp, #260]	; 0x104
 800afca:	4655      	mov	r5, sl
 800afcc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afd0:	2b78      	cmp	r3, #120	; 0x78
 800afd2:	d806      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800afd4:	2b57      	cmp	r3, #87	; 0x57
 800afd6:	d810      	bhi.n	800affa <__ssvfiscanf_r+0x106>
 800afd8:	2b25      	cmp	r3, #37	; 0x25
 800afda:	d0c6      	beq.n	800af6a <__ssvfiscanf_r+0x76>
 800afdc:	d856      	bhi.n	800b08c <__ssvfiscanf_r+0x198>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d064      	beq.n	800b0ac <__ssvfiscanf_r+0x1b8>
 800afe2:	2303      	movs	r3, #3
 800afe4:	9347      	str	r3, [sp, #284]	; 0x11c
 800afe6:	230a      	movs	r3, #10
 800afe8:	9342      	str	r3, [sp, #264]	; 0x108
 800afea:	e071      	b.n	800b0d0 <__ssvfiscanf_r+0x1dc>
 800afec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800afee:	fb02 1103 	mla	r1, r2, r3, r1
 800aff2:	3930      	subs	r1, #48	; 0x30
 800aff4:	9143      	str	r1, [sp, #268]	; 0x10c
 800aff6:	4655      	mov	r5, sl
 800aff8:	e7d3      	b.n	800afa2 <__ssvfiscanf_r+0xae>
 800affa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800affe:	2a20      	cmp	r2, #32
 800b000:	d8ef      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800b002:	a101      	add	r1, pc, #4	; (adr r1, 800b008 <__ssvfiscanf_r+0x114>)
 800b004:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b008:	0800b0bb 	.word	0x0800b0bb
 800b00c:	0800afe3 	.word	0x0800afe3
 800b010:	0800afe3 	.word	0x0800afe3
 800b014:	0800b119 	.word	0x0800b119
 800b018:	0800afe3 	.word	0x0800afe3
 800b01c:	0800afe3 	.word	0x0800afe3
 800b020:	0800afe3 	.word	0x0800afe3
 800b024:	0800afe3 	.word	0x0800afe3
 800b028:	0800afe3 	.word	0x0800afe3
 800b02c:	0800afe3 	.word	0x0800afe3
 800b030:	0800afe3 	.word	0x0800afe3
 800b034:	0800b12f 	.word	0x0800b12f
 800b038:	0800b105 	.word	0x0800b105
 800b03c:	0800b093 	.word	0x0800b093
 800b040:	0800b093 	.word	0x0800b093
 800b044:	0800b093 	.word	0x0800b093
 800b048:	0800afe3 	.word	0x0800afe3
 800b04c:	0800b109 	.word	0x0800b109
 800b050:	0800afe3 	.word	0x0800afe3
 800b054:	0800afe3 	.word	0x0800afe3
 800b058:	0800afe3 	.word	0x0800afe3
 800b05c:	0800afe3 	.word	0x0800afe3
 800b060:	0800b13f 	.word	0x0800b13f
 800b064:	0800b111 	.word	0x0800b111
 800b068:	0800b0b3 	.word	0x0800b0b3
 800b06c:	0800afe3 	.word	0x0800afe3
 800b070:	0800afe3 	.word	0x0800afe3
 800b074:	0800b13b 	.word	0x0800b13b
 800b078:	0800afe3 	.word	0x0800afe3
 800b07c:	0800b105 	.word	0x0800b105
 800b080:	0800afe3 	.word	0x0800afe3
 800b084:	0800afe3 	.word	0x0800afe3
 800b088:	0800b0bb 	.word	0x0800b0bb
 800b08c:	3b45      	subs	r3, #69	; 0x45
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d8a7      	bhi.n	800afe2 <__ssvfiscanf_r+0xee>
 800b092:	2305      	movs	r3, #5
 800b094:	e01b      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b096:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b098:	4621      	mov	r1, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	4798      	blx	r3
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f43f af68 	beq.w	800af74 <__ssvfiscanf_r+0x80>
 800b0a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	f040 808d 	bne.w	800b1c6 <__ssvfiscanf_r+0x2d2>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	e08f      	b.n	800b1d2 <__ssvfiscanf_r+0x2de>
 800b0b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0b4:	f042 0220 	orr.w	r2, r2, #32
 800b0b8:	9241      	str	r2, [sp, #260]	; 0x104
 800b0ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b0bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0c0:	9241      	str	r2, [sp, #260]	; 0x104
 800b0c2:	2210      	movs	r2, #16
 800b0c4:	2b6f      	cmp	r3, #111	; 0x6f
 800b0c6:	9242      	str	r2, [sp, #264]	; 0x108
 800b0c8:	bf34      	ite	cc
 800b0ca:	2303      	movcc	r3, #3
 800b0cc:	2304      	movcs	r3, #4
 800b0ce:	9347      	str	r3, [sp, #284]	; 0x11c
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	dd42      	ble.n	800b15c <__ssvfiscanf_r+0x268>
 800b0d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0d8:	0659      	lsls	r1, r3, #25
 800b0da:	d404      	bmi.n	800b0e6 <__ssvfiscanf_r+0x1f2>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	781a      	ldrb	r2, [r3, #0]
 800b0e0:	5cba      	ldrb	r2, [r7, r2]
 800b0e2:	0712      	lsls	r2, r2, #28
 800b0e4:	d441      	bmi.n	800b16a <__ssvfiscanf_r+0x276>
 800b0e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	dc50      	bgt.n	800b18e <__ssvfiscanf_r+0x29a>
 800b0ec:	466b      	mov	r3, sp
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	a941      	add	r1, sp, #260	; 0x104
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	f000 f876 	bl	800b1e4 <_scanf_chars>
 800b0f8:	2801      	cmp	r0, #1
 800b0fa:	d06e      	beq.n	800b1da <__ssvfiscanf_r+0x2e6>
 800b0fc:	2802      	cmp	r0, #2
 800b0fe:	f47f af20 	bne.w	800af42 <__ssvfiscanf_r+0x4e>
 800b102:	e7cf      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b104:	220a      	movs	r2, #10
 800b106:	e7dd      	b.n	800b0c4 <__ssvfiscanf_r+0x1d0>
 800b108:	2300      	movs	r3, #0
 800b10a:	9342      	str	r3, [sp, #264]	; 0x108
 800b10c:	2303      	movs	r3, #3
 800b10e:	e7de      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b110:	2308      	movs	r3, #8
 800b112:	9342      	str	r3, [sp, #264]	; 0x108
 800b114:	2304      	movs	r3, #4
 800b116:	e7da      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b118:	4629      	mov	r1, r5
 800b11a:	4640      	mov	r0, r8
 800b11c:	f000 f9d6 	bl	800b4cc <__sccl>
 800b120:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b126:	9341      	str	r3, [sp, #260]	; 0x104
 800b128:	4605      	mov	r5, r0
 800b12a:	2301      	movs	r3, #1
 800b12c:	e7cf      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b12e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b134:	9341      	str	r3, [sp, #260]	; 0x104
 800b136:	2300      	movs	r3, #0
 800b138:	e7c9      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e7c7      	b.n	800b0ce <__ssvfiscanf_r+0x1da>
 800b13e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b140:	06c3      	lsls	r3, r0, #27
 800b142:	f53f aefe 	bmi.w	800af42 <__ssvfiscanf_r+0x4e>
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b14a:	1d19      	adds	r1, r3, #4
 800b14c:	9100      	str	r1, [sp, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f010 0f01 	tst.w	r0, #1
 800b154:	bf14      	ite	ne
 800b156:	801a      	strhne	r2, [r3, #0]
 800b158:	601a      	streq	r2, [r3, #0]
 800b15a:	e6f2      	b.n	800af42 <__ssvfiscanf_r+0x4e>
 800b15c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b15e:	4621      	mov	r1, r4
 800b160:	4630      	mov	r0, r6
 800b162:	4798      	blx	r3
 800b164:	2800      	cmp	r0, #0
 800b166:	d0b6      	beq.n	800b0d6 <__ssvfiscanf_r+0x1e2>
 800b168:	e79c      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b16a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b16c:	3201      	adds	r2, #1
 800b16e:	9245      	str	r2, [sp, #276]	; 0x114
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	3a01      	subs	r2, #1
 800b174:	2a00      	cmp	r2, #0
 800b176:	6062      	str	r2, [r4, #4]
 800b178:	dd02      	ble.n	800b180 <__ssvfiscanf_r+0x28c>
 800b17a:	3301      	adds	r3, #1
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	e7ad      	b.n	800b0dc <__ssvfiscanf_r+0x1e8>
 800b180:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b182:	4621      	mov	r1, r4
 800b184:	4630      	mov	r0, r6
 800b186:	4798      	blx	r3
 800b188:	2800      	cmp	r0, #0
 800b18a:	d0a7      	beq.n	800b0dc <__ssvfiscanf_r+0x1e8>
 800b18c:	e78a      	b.n	800b0a4 <__ssvfiscanf_r+0x1b0>
 800b18e:	2b04      	cmp	r3, #4
 800b190:	dc0e      	bgt.n	800b1b0 <__ssvfiscanf_r+0x2bc>
 800b192:	466b      	mov	r3, sp
 800b194:	4622      	mov	r2, r4
 800b196:	a941      	add	r1, sp, #260	; 0x104
 800b198:	4630      	mov	r0, r6
 800b19a:	f000 f87d 	bl	800b298 <_scanf_i>
 800b19e:	e7ab      	b.n	800b0f8 <__ssvfiscanf_r+0x204>
 800b1a0:	0800ae41 	.word	0x0800ae41
 800b1a4:	0800aebb 	.word	0x0800aebb
 800b1a8:	0800c227 	.word	0x0800c227
 800b1ac:	0800c51a 	.word	0x0800c51a
 800b1b0:	4b0b      	ldr	r3, [pc, #44]	; (800b1e0 <__ssvfiscanf_r+0x2ec>)
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f43f aec5 	beq.w	800af42 <__ssvfiscanf_r+0x4e>
 800b1b8:	466b      	mov	r3, sp
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	a941      	add	r1, sp, #260	; 0x104
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f3af 8000 	nop.w
 800b1c4:	e798      	b.n	800b0f8 <__ssvfiscanf_r+0x204>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b1cc:	bf18      	it	ne
 800b1ce:	f04f 30ff 	movne.w	r0, #4294967295
 800b1d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1da:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1dc:	e7f9      	b.n	800b1d2 <__ssvfiscanf_r+0x2de>
 800b1de:	bf00      	nop
 800b1e0:	00000000 	.word	0x00000000

0800b1e4 <_scanf_chars>:
 800b1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e8:	4615      	mov	r5, r2
 800b1ea:	688a      	ldr	r2, [r1, #8]
 800b1ec:	4680      	mov	r8, r0
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	b932      	cbnz	r2, 800b200 <_scanf_chars+0x1c>
 800b1f2:	698a      	ldr	r2, [r1, #24]
 800b1f4:	2a00      	cmp	r2, #0
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2201      	moveq	r2, #1
 800b1fa:	f04f 32ff 	movne.w	r2, #4294967295
 800b1fe:	608a      	str	r2, [r1, #8]
 800b200:	6822      	ldr	r2, [r4, #0]
 800b202:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b294 <_scanf_chars+0xb0>
 800b206:	06d1      	lsls	r1, r2, #27
 800b208:	bf5f      	itttt	pl
 800b20a:	681a      	ldrpl	r2, [r3, #0]
 800b20c:	1d11      	addpl	r1, r2, #4
 800b20e:	6019      	strpl	r1, [r3, #0]
 800b210:	6816      	ldrpl	r6, [r2, #0]
 800b212:	2700      	movs	r7, #0
 800b214:	69a0      	ldr	r0, [r4, #24]
 800b216:	b188      	cbz	r0, 800b23c <_scanf_chars+0x58>
 800b218:	2801      	cmp	r0, #1
 800b21a:	d107      	bne.n	800b22c <_scanf_chars+0x48>
 800b21c:	682a      	ldr	r2, [r5, #0]
 800b21e:	7811      	ldrb	r1, [r2, #0]
 800b220:	6962      	ldr	r2, [r4, #20]
 800b222:	5c52      	ldrb	r2, [r2, r1]
 800b224:	b952      	cbnz	r2, 800b23c <_scanf_chars+0x58>
 800b226:	2f00      	cmp	r7, #0
 800b228:	d031      	beq.n	800b28e <_scanf_chars+0xaa>
 800b22a:	e022      	b.n	800b272 <_scanf_chars+0x8e>
 800b22c:	2802      	cmp	r0, #2
 800b22e:	d120      	bne.n	800b272 <_scanf_chars+0x8e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b238:	071b      	lsls	r3, r3, #28
 800b23a:	d41a      	bmi.n	800b272 <_scanf_chars+0x8e>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	06da      	lsls	r2, r3, #27
 800b240:	bf5e      	ittt	pl
 800b242:	682b      	ldrpl	r3, [r5, #0]
 800b244:	781b      	ldrbpl	r3, [r3, #0]
 800b246:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b24a:	682a      	ldr	r2, [r5, #0]
 800b24c:	686b      	ldr	r3, [r5, #4]
 800b24e:	3201      	adds	r2, #1
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	3b01      	subs	r3, #1
 800b256:	3a01      	subs	r2, #1
 800b258:	606b      	str	r3, [r5, #4]
 800b25a:	3701      	adds	r7, #1
 800b25c:	60a2      	str	r2, [r4, #8]
 800b25e:	b142      	cbz	r2, 800b272 <_scanf_chars+0x8e>
 800b260:	2b00      	cmp	r3, #0
 800b262:	dcd7      	bgt.n	800b214 <_scanf_chars+0x30>
 800b264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b268:	4629      	mov	r1, r5
 800b26a:	4640      	mov	r0, r8
 800b26c:	4798      	blx	r3
 800b26e:	2800      	cmp	r0, #0
 800b270:	d0d0      	beq.n	800b214 <_scanf_chars+0x30>
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	f013 0310 	ands.w	r3, r3, #16
 800b278:	d105      	bne.n	800b286 <_scanf_chars+0xa2>
 800b27a:	68e2      	ldr	r2, [r4, #12]
 800b27c:	3201      	adds	r2, #1
 800b27e:	60e2      	str	r2, [r4, #12]
 800b280:	69a2      	ldr	r2, [r4, #24]
 800b282:	b102      	cbz	r2, 800b286 <_scanf_chars+0xa2>
 800b284:	7033      	strb	r3, [r6, #0]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	443b      	add	r3, r7
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	2000      	movs	r0, #0
 800b28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b292:	bf00      	nop
 800b294:	0800c227 	.word	0x0800c227

0800b298 <_scanf_i>:
 800b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29c:	4698      	mov	r8, r3
 800b29e:	4b76      	ldr	r3, [pc, #472]	; (800b478 <_scanf_i+0x1e0>)
 800b2a0:	460c      	mov	r4, r1
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	4616      	mov	r6, r2
 800b2a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2aa:	b087      	sub	sp, #28
 800b2ac:	ab03      	add	r3, sp, #12
 800b2ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b2b2:	4b72      	ldr	r3, [pc, #456]	; (800b47c <_scanf_i+0x1e4>)
 800b2b4:	69a1      	ldr	r1, [r4, #24]
 800b2b6:	4a72      	ldr	r2, [pc, #456]	; (800b480 <_scanf_i+0x1e8>)
 800b2b8:	2903      	cmp	r1, #3
 800b2ba:	bf18      	it	ne
 800b2bc:	461a      	movne	r2, r3
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	9201      	str	r2, [sp, #4]
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b2c8:	bf88      	it	hi
 800b2ca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b2ce:	4627      	mov	r7, r4
 800b2d0:	bf82      	ittt	hi
 800b2d2:	eb03 0905 	addhi.w	r9, r3, r5
 800b2d6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b2da:	60a3      	strhi	r3, [r4, #8]
 800b2dc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b2e0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b2e4:	bf98      	it	ls
 800b2e6:	f04f 0900 	movls.w	r9, #0
 800b2ea:	6023      	str	r3, [r4, #0]
 800b2ec:	463d      	mov	r5, r7
 800b2ee:	f04f 0b00 	mov.w	fp, #0
 800b2f2:	6831      	ldr	r1, [r6, #0]
 800b2f4:	ab03      	add	r3, sp, #12
 800b2f6:	7809      	ldrb	r1, [r1, #0]
 800b2f8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	f7f4 ff8f 	bl	8000220 <memchr>
 800b302:	b328      	cbz	r0, 800b350 <_scanf_i+0xb8>
 800b304:	f1bb 0f01 	cmp.w	fp, #1
 800b308:	d159      	bne.n	800b3be <_scanf_i+0x126>
 800b30a:	6862      	ldr	r2, [r4, #4]
 800b30c:	b92a      	cbnz	r2, 800b31a <_scanf_i+0x82>
 800b30e:	6822      	ldr	r2, [r4, #0]
 800b310:	2308      	movs	r3, #8
 800b312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b316:	6063      	str	r3, [r4, #4]
 800b318:	6022      	str	r2, [r4, #0]
 800b31a:	6822      	ldr	r2, [r4, #0]
 800b31c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b320:	6022      	str	r2, [r4, #0]
 800b322:	68a2      	ldr	r2, [r4, #8]
 800b324:	1e51      	subs	r1, r2, #1
 800b326:	60a1      	str	r1, [r4, #8]
 800b328:	b192      	cbz	r2, 800b350 <_scanf_i+0xb8>
 800b32a:	6832      	ldr	r2, [r6, #0]
 800b32c:	1c51      	adds	r1, r2, #1
 800b32e:	6031      	str	r1, [r6, #0]
 800b330:	7812      	ldrb	r2, [r2, #0]
 800b332:	f805 2b01 	strb.w	r2, [r5], #1
 800b336:	6872      	ldr	r2, [r6, #4]
 800b338:	3a01      	subs	r2, #1
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	6072      	str	r2, [r6, #4]
 800b33e:	dc07      	bgt.n	800b350 <_scanf_i+0xb8>
 800b340:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b344:	4631      	mov	r1, r6
 800b346:	4650      	mov	r0, sl
 800b348:	4790      	blx	r2
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f040 8085 	bne.w	800b45a <_scanf_i+0x1c2>
 800b350:	f10b 0b01 	add.w	fp, fp, #1
 800b354:	f1bb 0f03 	cmp.w	fp, #3
 800b358:	d1cb      	bne.n	800b2f2 <_scanf_i+0x5a>
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	b90b      	cbnz	r3, 800b362 <_scanf_i+0xca>
 800b35e:	230a      	movs	r3, #10
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	6863      	ldr	r3, [r4, #4]
 800b364:	4947      	ldr	r1, [pc, #284]	; (800b484 <_scanf_i+0x1ec>)
 800b366:	6960      	ldr	r0, [r4, #20]
 800b368:	1ac9      	subs	r1, r1, r3
 800b36a:	f000 f8af 	bl	800b4cc <__sccl>
 800b36e:	f04f 0b00 	mov.w	fp, #0
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d03d      	beq.n	800b3f6 <_scanf_i+0x15e>
 800b37a:	6831      	ldr	r1, [r6, #0]
 800b37c:	6960      	ldr	r0, [r4, #20]
 800b37e:	f891 c000 	ldrb.w	ip, [r1]
 800b382:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b386:	2800      	cmp	r0, #0
 800b388:	d035      	beq.n	800b3f6 <_scanf_i+0x15e>
 800b38a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b38e:	d124      	bne.n	800b3da <_scanf_i+0x142>
 800b390:	0510      	lsls	r0, r2, #20
 800b392:	d522      	bpl.n	800b3da <_scanf_i+0x142>
 800b394:	f10b 0b01 	add.w	fp, fp, #1
 800b398:	f1b9 0f00 	cmp.w	r9, #0
 800b39c:	d003      	beq.n	800b3a6 <_scanf_i+0x10e>
 800b39e:	3301      	adds	r3, #1
 800b3a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3a4:	60a3      	str	r3, [r4, #8]
 800b3a6:	6873      	ldr	r3, [r6, #4]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	6073      	str	r3, [r6, #4]
 800b3ae:	dd1b      	ble.n	800b3e8 <_scanf_i+0x150>
 800b3b0:	6833      	ldr	r3, [r6, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	6033      	str	r3, [r6, #0]
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	60a3      	str	r3, [r4, #8]
 800b3bc:	e7d9      	b.n	800b372 <_scanf_i+0xda>
 800b3be:	f1bb 0f02 	cmp.w	fp, #2
 800b3c2:	d1ae      	bne.n	800b322 <_scanf_i+0x8a>
 800b3c4:	6822      	ldr	r2, [r4, #0]
 800b3c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b3ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b3ce:	d1bf      	bne.n	800b350 <_scanf_i+0xb8>
 800b3d0:	2310      	movs	r3, #16
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b3d8:	e7a2      	b.n	800b320 <_scanf_i+0x88>
 800b3da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b3de:	6022      	str	r2, [r4, #0]
 800b3e0:	780b      	ldrb	r3, [r1, #0]
 800b3e2:	f805 3b01 	strb.w	r3, [r5], #1
 800b3e6:	e7de      	b.n	800b3a6 <_scanf_i+0x10e>
 800b3e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	4798      	blx	r3
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d0df      	beq.n	800b3b6 <_scanf_i+0x11e>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	05db      	lsls	r3, r3, #23
 800b3fa:	d50d      	bpl.n	800b418 <_scanf_i+0x180>
 800b3fc:	42bd      	cmp	r5, r7
 800b3fe:	d909      	bls.n	800b414 <_scanf_i+0x17c>
 800b400:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b408:	4632      	mov	r2, r6
 800b40a:	4650      	mov	r0, sl
 800b40c:	4798      	blx	r3
 800b40e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b412:	464d      	mov	r5, r9
 800b414:	42bd      	cmp	r5, r7
 800b416:	d02d      	beq.n	800b474 <_scanf_i+0x1dc>
 800b418:	6822      	ldr	r2, [r4, #0]
 800b41a:	f012 0210 	ands.w	r2, r2, #16
 800b41e:	d113      	bne.n	800b448 <_scanf_i+0x1b0>
 800b420:	702a      	strb	r2, [r5, #0]
 800b422:	6863      	ldr	r3, [r4, #4]
 800b424:	9e01      	ldr	r6, [sp, #4]
 800b426:	4639      	mov	r1, r7
 800b428:	4650      	mov	r0, sl
 800b42a:	47b0      	blx	r6
 800b42c:	6821      	ldr	r1, [r4, #0]
 800b42e:	f8d8 3000 	ldr.w	r3, [r8]
 800b432:	f011 0f20 	tst.w	r1, #32
 800b436:	d013      	beq.n	800b460 <_scanf_i+0x1c8>
 800b438:	1d1a      	adds	r2, r3, #4
 800b43a:	f8c8 2000 	str.w	r2, [r8]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6018      	str	r0, [r3, #0]
 800b442:	68e3      	ldr	r3, [r4, #12]
 800b444:	3301      	adds	r3, #1
 800b446:	60e3      	str	r3, [r4, #12]
 800b448:	1bed      	subs	r5, r5, r7
 800b44a:	44ab      	add	fp, r5
 800b44c:	6925      	ldr	r5, [r4, #16]
 800b44e:	445d      	add	r5, fp
 800b450:	6125      	str	r5, [r4, #16]
 800b452:	2000      	movs	r0, #0
 800b454:	b007      	add	sp, #28
 800b456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b45a:	f04f 0b00 	mov.w	fp, #0
 800b45e:	e7ca      	b.n	800b3f6 <_scanf_i+0x15e>
 800b460:	1d1a      	adds	r2, r3, #4
 800b462:	f8c8 2000 	str.w	r2, [r8]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f011 0f01 	tst.w	r1, #1
 800b46c:	bf14      	ite	ne
 800b46e:	8018      	strhne	r0, [r3, #0]
 800b470:	6018      	streq	r0, [r3, #0]
 800b472:	e7e6      	b.n	800b442 <_scanf_i+0x1aa>
 800b474:	2001      	movs	r0, #1
 800b476:	e7ed      	b.n	800b454 <_scanf_i+0x1bc>
 800b478:	0800c198 	.word	0x0800c198
 800b47c:	0800b621 	.word	0x0800b621
 800b480:	080094ed 	.word	0x080094ed
 800b484:	0800c53e 	.word	0x0800c53e

0800b488 <_read_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	4d07      	ldr	r5, [pc, #28]	; (800b4a8 <_read_r+0x20>)
 800b48c:	4604      	mov	r4, r0
 800b48e:	4608      	mov	r0, r1
 800b490:	4611      	mov	r1, r2
 800b492:	2200      	movs	r2, #0
 800b494:	602a      	str	r2, [r5, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	f7f6 fde0 	bl	800205c <_read>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_read_r+0x1e>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_read_r+0x1e>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	20000a68 	.word	0x20000a68

0800b4ac <_sbrk_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_sbrk_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 fe3e 	bl	8002138 <_sbrk>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_sbrk_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_sbrk_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	20000a68 	.word	0x20000a68

0800b4cc <__sccl>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	780b      	ldrb	r3, [r1, #0]
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	2b5e      	cmp	r3, #94	; 0x5e
 800b4d4:	bf0b      	itete	eq
 800b4d6:	784b      	ldrbeq	r3, [r1, #1]
 800b4d8:	1c48      	addne	r0, r1, #1
 800b4da:	1c88      	addeq	r0, r1, #2
 800b4dc:	2200      	movne	r2, #0
 800b4de:	bf08      	it	eq
 800b4e0:	2201      	moveq	r2, #1
 800b4e2:	1e61      	subs	r1, r4, #1
 800b4e4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b4e8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b4ec:	42a9      	cmp	r1, r5
 800b4ee:	d1fb      	bne.n	800b4e8 <__sccl+0x1c>
 800b4f0:	b90b      	cbnz	r3, 800b4f6 <__sccl+0x2a>
 800b4f2:	3801      	subs	r0, #1
 800b4f4:	bd70      	pop	{r4, r5, r6, pc}
 800b4f6:	f082 0201 	eor.w	r2, r2, #1
 800b4fa:	54e2      	strb	r2, [r4, r3]
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	4628      	mov	r0, r5
 800b500:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b504:	292d      	cmp	r1, #45	; 0x2d
 800b506:	d006      	beq.n	800b516 <__sccl+0x4a>
 800b508:	295d      	cmp	r1, #93	; 0x5d
 800b50a:	d0f3      	beq.n	800b4f4 <__sccl+0x28>
 800b50c:	b909      	cbnz	r1, 800b512 <__sccl+0x46>
 800b50e:	4628      	mov	r0, r5
 800b510:	e7f0      	b.n	800b4f4 <__sccl+0x28>
 800b512:	460b      	mov	r3, r1
 800b514:	e7f1      	b.n	800b4fa <__sccl+0x2e>
 800b516:	786e      	ldrb	r6, [r5, #1]
 800b518:	2e5d      	cmp	r6, #93	; 0x5d
 800b51a:	d0fa      	beq.n	800b512 <__sccl+0x46>
 800b51c:	42b3      	cmp	r3, r6
 800b51e:	dcf8      	bgt.n	800b512 <__sccl+0x46>
 800b520:	3502      	adds	r5, #2
 800b522:	4619      	mov	r1, r3
 800b524:	3101      	adds	r1, #1
 800b526:	428e      	cmp	r6, r1
 800b528:	5462      	strb	r2, [r4, r1]
 800b52a:	dcfb      	bgt.n	800b524 <__sccl+0x58>
 800b52c:	1af1      	subs	r1, r6, r3
 800b52e:	3901      	subs	r1, #1
 800b530:	1c58      	adds	r0, r3, #1
 800b532:	42b3      	cmp	r3, r6
 800b534:	bfa8      	it	ge
 800b536:	2100      	movge	r1, #0
 800b538:	1843      	adds	r3, r0, r1
 800b53a:	e7e0      	b.n	800b4fe <__sccl+0x32>

0800b53c <_strtoul_l.constprop.0>:
 800b53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b540:	4f36      	ldr	r7, [pc, #216]	; (800b61c <_strtoul_l.constprop.0+0xe0>)
 800b542:	4686      	mov	lr, r0
 800b544:	460d      	mov	r5, r1
 800b546:	4628      	mov	r0, r5
 800b548:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b54c:	5de6      	ldrb	r6, [r4, r7]
 800b54e:	f016 0608 	ands.w	r6, r6, #8
 800b552:	d1f8      	bne.n	800b546 <_strtoul_l.constprop.0+0xa>
 800b554:	2c2d      	cmp	r4, #45	; 0x2d
 800b556:	d12f      	bne.n	800b5b8 <_strtoul_l.constprop.0+0x7c>
 800b558:	782c      	ldrb	r4, [r5, #0]
 800b55a:	2601      	movs	r6, #1
 800b55c:	1c85      	adds	r5, r0, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d057      	beq.n	800b612 <_strtoul_l.constprop.0+0xd6>
 800b562:	2b10      	cmp	r3, #16
 800b564:	d109      	bne.n	800b57a <_strtoul_l.constprop.0+0x3e>
 800b566:	2c30      	cmp	r4, #48	; 0x30
 800b568:	d107      	bne.n	800b57a <_strtoul_l.constprop.0+0x3e>
 800b56a:	7828      	ldrb	r0, [r5, #0]
 800b56c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b570:	2858      	cmp	r0, #88	; 0x58
 800b572:	d149      	bne.n	800b608 <_strtoul_l.constprop.0+0xcc>
 800b574:	786c      	ldrb	r4, [r5, #1]
 800b576:	2310      	movs	r3, #16
 800b578:	3502      	adds	r5, #2
 800b57a:	f04f 38ff 	mov.w	r8, #4294967295
 800b57e:	2700      	movs	r7, #0
 800b580:	fbb8 f8f3 	udiv	r8, r8, r3
 800b584:	fb03 f908 	mul.w	r9, r3, r8
 800b588:	ea6f 0909 	mvn.w	r9, r9
 800b58c:	4638      	mov	r0, r7
 800b58e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b592:	f1bc 0f09 	cmp.w	ip, #9
 800b596:	d814      	bhi.n	800b5c2 <_strtoul_l.constprop.0+0x86>
 800b598:	4664      	mov	r4, ip
 800b59a:	42a3      	cmp	r3, r4
 800b59c:	dd22      	ble.n	800b5e4 <_strtoul_l.constprop.0+0xa8>
 800b59e:	2f00      	cmp	r7, #0
 800b5a0:	db1d      	blt.n	800b5de <_strtoul_l.constprop.0+0xa2>
 800b5a2:	4580      	cmp	r8, r0
 800b5a4:	d31b      	bcc.n	800b5de <_strtoul_l.constprop.0+0xa2>
 800b5a6:	d101      	bne.n	800b5ac <_strtoul_l.constprop.0+0x70>
 800b5a8:	45a1      	cmp	r9, r4
 800b5aa:	db18      	blt.n	800b5de <_strtoul_l.constprop.0+0xa2>
 800b5ac:	fb00 4003 	mla	r0, r0, r3, r4
 800b5b0:	2701      	movs	r7, #1
 800b5b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5b6:	e7ea      	b.n	800b58e <_strtoul_l.constprop.0+0x52>
 800b5b8:	2c2b      	cmp	r4, #43	; 0x2b
 800b5ba:	bf04      	itt	eq
 800b5bc:	782c      	ldrbeq	r4, [r5, #0]
 800b5be:	1c85      	addeq	r5, r0, #2
 800b5c0:	e7cd      	b.n	800b55e <_strtoul_l.constprop.0+0x22>
 800b5c2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b5c6:	f1bc 0f19 	cmp.w	ip, #25
 800b5ca:	d801      	bhi.n	800b5d0 <_strtoul_l.constprop.0+0x94>
 800b5cc:	3c37      	subs	r4, #55	; 0x37
 800b5ce:	e7e4      	b.n	800b59a <_strtoul_l.constprop.0+0x5e>
 800b5d0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b5d4:	f1bc 0f19 	cmp.w	ip, #25
 800b5d8:	d804      	bhi.n	800b5e4 <_strtoul_l.constprop.0+0xa8>
 800b5da:	3c57      	subs	r4, #87	; 0x57
 800b5dc:	e7dd      	b.n	800b59a <_strtoul_l.constprop.0+0x5e>
 800b5de:	f04f 37ff 	mov.w	r7, #4294967295
 800b5e2:	e7e6      	b.n	800b5b2 <_strtoul_l.constprop.0+0x76>
 800b5e4:	2f00      	cmp	r7, #0
 800b5e6:	da07      	bge.n	800b5f8 <_strtoul_l.constprop.0+0xbc>
 800b5e8:	2322      	movs	r3, #34	; 0x22
 800b5ea:	f8ce 3000 	str.w	r3, [lr]
 800b5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f2:	b932      	cbnz	r2, 800b602 <_strtoul_l.constprop.0+0xc6>
 800b5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f8:	b106      	cbz	r6, 800b5fc <_strtoul_l.constprop.0+0xc0>
 800b5fa:	4240      	negs	r0, r0
 800b5fc:	2a00      	cmp	r2, #0
 800b5fe:	d0f9      	beq.n	800b5f4 <_strtoul_l.constprop.0+0xb8>
 800b600:	b107      	cbz	r7, 800b604 <_strtoul_l.constprop.0+0xc8>
 800b602:	1e69      	subs	r1, r5, #1
 800b604:	6011      	str	r1, [r2, #0]
 800b606:	e7f5      	b.n	800b5f4 <_strtoul_l.constprop.0+0xb8>
 800b608:	2430      	movs	r4, #48	; 0x30
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1b5      	bne.n	800b57a <_strtoul_l.constprop.0+0x3e>
 800b60e:	2308      	movs	r3, #8
 800b610:	e7b3      	b.n	800b57a <_strtoul_l.constprop.0+0x3e>
 800b612:	2c30      	cmp	r4, #48	; 0x30
 800b614:	d0a9      	beq.n	800b56a <_strtoul_l.constprop.0+0x2e>
 800b616:	230a      	movs	r3, #10
 800b618:	e7af      	b.n	800b57a <_strtoul_l.constprop.0+0x3e>
 800b61a:	bf00      	nop
 800b61c:	0800c227 	.word	0x0800c227

0800b620 <_strtoul_r>:
 800b620:	f7ff bf8c 	b.w	800b53c <_strtoul_l.constprop.0>

0800b624 <__submore>:
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	460c      	mov	r4, r1
 800b62a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b62c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b630:	4299      	cmp	r1, r3
 800b632:	d11d      	bne.n	800b670 <__submore+0x4c>
 800b634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b638:	f7ff fa32 	bl	800aaa0 <_malloc_r>
 800b63c:	b918      	cbnz	r0, 800b646 <__submore+0x22>
 800b63e:	f04f 30ff 	mov.w	r0, #4294967295
 800b642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b64a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b64c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b650:	6360      	str	r0, [r4, #52]	; 0x34
 800b652:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b656:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b65a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b65e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b662:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b666:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b66a:	6020      	str	r0, [r4, #0]
 800b66c:	2000      	movs	r0, #0
 800b66e:	e7e8      	b.n	800b642 <__submore+0x1e>
 800b670:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b672:	0077      	lsls	r7, r6, #1
 800b674:	463a      	mov	r2, r7
 800b676:	f000 fa31 	bl	800badc <_realloc_r>
 800b67a:	4605      	mov	r5, r0
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d0de      	beq.n	800b63e <__submore+0x1a>
 800b680:	eb00 0806 	add.w	r8, r0, r6
 800b684:	4601      	mov	r1, r0
 800b686:	4632      	mov	r2, r6
 800b688:	4640      	mov	r0, r8
 800b68a:	f7fe fdf5 	bl	800a278 <memcpy>
 800b68e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b692:	f8c4 8000 	str.w	r8, [r4]
 800b696:	e7e9      	b.n	800b66c <__submore+0x48>

0800b698 <__assert_func>:
 800b698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b69a:	4614      	mov	r4, r2
 800b69c:	461a      	mov	r2, r3
 800b69e:	4b09      	ldr	r3, [pc, #36]	; (800b6c4 <__assert_func+0x2c>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	68d8      	ldr	r0, [r3, #12]
 800b6a6:	b14c      	cbz	r4, 800b6bc <__assert_func+0x24>
 800b6a8:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <__assert_func+0x30>)
 800b6aa:	9100      	str	r1, [sp, #0]
 800b6ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6b0:	4906      	ldr	r1, [pc, #24]	; (800b6cc <__assert_func+0x34>)
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	f000 f9a6 	bl	800ba04 <fiprintf>
 800b6b8:	f000 fc66 	bl	800bf88 <abort>
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <__assert_func+0x38>)
 800b6be:	461c      	mov	r4, r3
 800b6c0:	e7f3      	b.n	800b6aa <__assert_func+0x12>
 800b6c2:	bf00      	nop
 800b6c4:	20000010 	.word	0x20000010
 800b6c8:	0800c540 	.word	0x0800c540
 800b6cc:	0800c54d 	.word	0x0800c54d
 800b6d0:	0800c57b 	.word	0x0800c57b

0800b6d4 <__sflush_r>:
 800b6d4:	898a      	ldrh	r2, [r1, #12]
 800b6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6da:	4605      	mov	r5, r0
 800b6dc:	0710      	lsls	r0, r2, #28
 800b6de:	460c      	mov	r4, r1
 800b6e0:	d458      	bmi.n	800b794 <__sflush_r+0xc0>
 800b6e2:	684b      	ldr	r3, [r1, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dc05      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dc02      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d0f9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b700:	682f      	ldr	r7, [r5, #0]
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	d032      	beq.n	800b76c <__sflush_r+0x98>
 800b706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	075a      	lsls	r2, r3, #29
 800b70c:	d505      	bpl.n	800b71a <__sflush_r+0x46>
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b714:	b10b      	cbz	r3, 800b71a <__sflush_r+0x46>
 800b716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b718:	1ac0      	subs	r0, r0, r3
 800b71a:	2300      	movs	r3, #0
 800b71c:	4602      	mov	r2, r0
 800b71e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	d106      	bne.n	800b73a <__sflush_r+0x66>
 800b72c:	6829      	ldr	r1, [r5, #0]
 800b72e:	291d      	cmp	r1, #29
 800b730:	d82c      	bhi.n	800b78c <__sflush_r+0xb8>
 800b732:	4a2a      	ldr	r2, [pc, #168]	; (800b7dc <__sflush_r+0x108>)
 800b734:	40ca      	lsrs	r2, r1
 800b736:	07d6      	lsls	r6, r2, #31
 800b738:	d528      	bpl.n	800b78c <__sflush_r+0xb8>
 800b73a:	2200      	movs	r2, #0
 800b73c:	6062      	str	r2, [r4, #4]
 800b73e:	04d9      	lsls	r1, r3, #19
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	d504      	bpl.n	800b750 <__sflush_r+0x7c>
 800b746:	1c42      	adds	r2, r0, #1
 800b748:	d101      	bne.n	800b74e <__sflush_r+0x7a>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b903      	cbnz	r3, 800b750 <__sflush_r+0x7c>
 800b74e:	6560      	str	r0, [r4, #84]	; 0x54
 800b750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b752:	602f      	str	r7, [r5, #0]
 800b754:	2900      	cmp	r1, #0
 800b756:	d0ca      	beq.n	800b6ee <__sflush_r+0x1a>
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__sflush_r+0x92>
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff f931 	bl	800a9c8 <_free_r>
 800b766:	2000      	movs	r0, #0
 800b768:	6360      	str	r0, [r4, #52]	; 0x34
 800b76a:	e7c1      	b.n	800b6f0 <__sflush_r+0x1c>
 800b76c:	6a21      	ldr	r1, [r4, #32]
 800b76e:	2301      	movs	r3, #1
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	1c41      	adds	r1, r0, #1
 800b776:	d1c7      	bne.n	800b708 <__sflush_r+0x34>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0c4      	beq.n	800b708 <__sflush_r+0x34>
 800b77e:	2b1d      	cmp	r3, #29
 800b780:	d001      	beq.n	800b786 <__sflush_r+0xb2>
 800b782:	2b16      	cmp	r3, #22
 800b784:	d101      	bne.n	800b78a <__sflush_r+0xb6>
 800b786:	602f      	str	r7, [r5, #0]
 800b788:	e7b1      	b.n	800b6ee <__sflush_r+0x1a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	e7ad      	b.n	800b6f0 <__sflush_r+0x1c>
 800b794:	690f      	ldr	r7, [r1, #16]
 800b796:	2f00      	cmp	r7, #0
 800b798:	d0a9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b79a:	0793      	lsls	r3, r2, #30
 800b79c:	680e      	ldr	r6, [r1, #0]
 800b79e:	bf08      	it	eq
 800b7a0:	694b      	ldreq	r3, [r1, #20]
 800b7a2:	600f      	str	r7, [r1, #0]
 800b7a4:	bf18      	it	ne
 800b7a6:	2300      	movne	r3, #0
 800b7a8:	eba6 0807 	sub.w	r8, r6, r7
 800b7ac:	608b      	str	r3, [r1, #8]
 800b7ae:	f1b8 0f00 	cmp.w	r8, #0
 800b7b2:	dd9c      	ble.n	800b6ee <__sflush_r+0x1a>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b8:	4643      	mov	r3, r8
 800b7ba:	463a      	mov	r2, r7
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b0      	blx	r6
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	dc06      	bgt.n	800b7d2 <__sflush_r+0xfe>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e78e      	b.n	800b6f0 <__sflush_r+0x1c>
 800b7d2:	4407      	add	r7, r0
 800b7d4:	eba8 0800 	sub.w	r8, r8, r0
 800b7d8:	e7e9      	b.n	800b7ae <__sflush_r+0xda>
 800b7da:	bf00      	nop
 800b7dc:	20400001 	.word	0x20400001

0800b7e0 <_fflush_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b913      	cbnz	r3, 800b7f0 <_fflush_r+0x10>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	b118      	cbz	r0, 800b7fa <_fflush_r+0x1a>
 800b7f2:	6983      	ldr	r3, [r0, #24]
 800b7f4:	b90b      	cbnz	r3, 800b7fa <_fflush_r+0x1a>
 800b7f6:	f000 f887 	bl	800b908 <__sinit>
 800b7fa:	4b14      	ldr	r3, [pc, #80]	; (800b84c <_fflush_r+0x6c>)
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	d11b      	bne.n	800b838 <_fflush_r+0x58>
 800b800:	686c      	ldr	r4, [r5, #4]
 800b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ef      	beq.n	800b7ea <_fflush_r+0xa>
 800b80a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d404      	bmi.n	800b81a <_fflush_r+0x3a>
 800b810:	0599      	lsls	r1, r3, #22
 800b812:	d402      	bmi.n	800b81a <_fflush_r+0x3a>
 800b814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b816:	f000 f927 	bl	800ba68 <__retarget_lock_acquire_recursive>
 800b81a:	4628      	mov	r0, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	f7ff ff59 	bl	800b6d4 <__sflush_r>
 800b822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b824:	07da      	lsls	r2, r3, #31
 800b826:	4605      	mov	r5, r0
 800b828:	d4e0      	bmi.n	800b7ec <_fflush_r+0xc>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	059b      	lsls	r3, r3, #22
 800b82e:	d4dd      	bmi.n	800b7ec <_fflush_r+0xc>
 800b830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b832:	f000 f91a 	bl	800ba6a <__retarget_lock_release_recursive>
 800b836:	e7d9      	b.n	800b7ec <_fflush_r+0xc>
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <_fflush_r+0x70>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d101      	bne.n	800b842 <_fflush_r+0x62>
 800b83e:	68ac      	ldr	r4, [r5, #8]
 800b840:	e7df      	b.n	800b802 <_fflush_r+0x22>
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <_fflush_r+0x74>)
 800b844:	429c      	cmp	r4, r3
 800b846:	bf08      	it	eq
 800b848:	68ec      	ldreq	r4, [r5, #12]
 800b84a:	e7da      	b.n	800b802 <_fflush_r+0x22>
 800b84c:	0800c59c 	.word	0x0800c59c
 800b850:	0800c5bc 	.word	0x0800c5bc
 800b854:	0800c57c 	.word	0x0800c57c

0800b858 <std>:
 800b858:	2300      	movs	r3, #0
 800b85a:	b510      	push	{r4, lr}
 800b85c:	4604      	mov	r4, r0
 800b85e:	e9c0 3300 	strd	r3, r3, [r0]
 800b862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b866:	6083      	str	r3, [r0, #8]
 800b868:	8181      	strh	r1, [r0, #12]
 800b86a:	6643      	str	r3, [r0, #100]	; 0x64
 800b86c:	81c2      	strh	r2, [r0, #14]
 800b86e:	6183      	str	r3, [r0, #24]
 800b870:	4619      	mov	r1, r3
 800b872:	2208      	movs	r2, #8
 800b874:	305c      	adds	r0, #92	; 0x5c
 800b876:	f7fd f8b3 	bl	80089e0 <memset>
 800b87a:	4b05      	ldr	r3, [pc, #20]	; (800b890 <std+0x38>)
 800b87c:	6263      	str	r3, [r4, #36]	; 0x24
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <std+0x3c>)
 800b880:	62a3      	str	r3, [r4, #40]	; 0x28
 800b882:	4b05      	ldr	r3, [pc, #20]	; (800b898 <std+0x40>)
 800b884:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <std+0x44>)
 800b888:	6224      	str	r4, [r4, #32]
 800b88a:	6323      	str	r3, [r4, #48]	; 0x30
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	0800935d 	.word	0x0800935d
 800b894:	08009383 	.word	0x08009383
 800b898:	080093bb 	.word	0x080093bb
 800b89c:	080093df 	.word	0x080093df

0800b8a0 <_cleanup_r>:
 800b8a0:	4901      	ldr	r1, [pc, #4]	; (800b8a8 <_cleanup_r+0x8>)
 800b8a2:	f000 b8c1 	b.w	800ba28 <_fwalk_reent>
 800b8a6:	bf00      	nop
 800b8a8:	0800b7e1 	.word	0x0800b7e1

0800b8ac <__sfmoreglue>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	2268      	movs	r2, #104	; 0x68
 800b8b0:	1e4d      	subs	r5, r1, #1
 800b8b2:	4355      	muls	r5, r2
 800b8b4:	460e      	mov	r6, r1
 800b8b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ba:	f7ff f8f1 	bl	800aaa0 <_malloc_r>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	b140      	cbz	r0, 800b8d4 <__sfmoreglue+0x28>
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8c8:	300c      	adds	r0, #12
 800b8ca:	60a0      	str	r0, [r4, #8]
 800b8cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b8d0:	f7fd f886 	bl	80089e0 <memset>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}

0800b8d8 <__sfp_lock_acquire>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sfp_lock_acquire+0x8>)
 800b8da:	f000 b8c5 	b.w	800ba68 <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20000a6d 	.word	0x20000a6d

0800b8e4 <__sfp_lock_release>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__sfp_lock_release+0x8>)
 800b8e6:	f000 b8c0 	b.w	800ba6a <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20000a6d 	.word	0x20000a6d

0800b8f0 <__sinit_lock_acquire>:
 800b8f0:	4801      	ldr	r0, [pc, #4]	; (800b8f8 <__sinit_lock_acquire+0x8>)
 800b8f2:	f000 b8b9 	b.w	800ba68 <__retarget_lock_acquire_recursive>
 800b8f6:	bf00      	nop
 800b8f8:	20000a6e 	.word	0x20000a6e

0800b8fc <__sinit_lock_release>:
 800b8fc:	4801      	ldr	r0, [pc, #4]	; (800b904 <__sinit_lock_release+0x8>)
 800b8fe:	f000 b8b4 	b.w	800ba6a <__retarget_lock_release_recursive>
 800b902:	bf00      	nop
 800b904:	20000a6e 	.word	0x20000a6e

0800b908 <__sinit>:
 800b908:	b510      	push	{r4, lr}
 800b90a:	4604      	mov	r4, r0
 800b90c:	f7ff fff0 	bl	800b8f0 <__sinit_lock_acquire>
 800b910:	69a3      	ldr	r3, [r4, #24]
 800b912:	b11b      	cbz	r3, 800b91c <__sinit+0x14>
 800b914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b918:	f7ff bff0 	b.w	800b8fc <__sinit_lock_release>
 800b91c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b920:	6523      	str	r3, [r4, #80]	; 0x50
 800b922:	4b13      	ldr	r3, [pc, #76]	; (800b970 <__sinit+0x68>)
 800b924:	4a13      	ldr	r2, [pc, #76]	; (800b974 <__sinit+0x6c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	62a2      	str	r2, [r4, #40]	; 0x28
 800b92a:	42a3      	cmp	r3, r4
 800b92c:	bf04      	itt	eq
 800b92e:	2301      	moveq	r3, #1
 800b930:	61a3      	streq	r3, [r4, #24]
 800b932:	4620      	mov	r0, r4
 800b934:	f000 f820 	bl	800b978 <__sfp>
 800b938:	6060      	str	r0, [r4, #4]
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f81c 	bl	800b978 <__sfp>
 800b940:	60a0      	str	r0, [r4, #8]
 800b942:	4620      	mov	r0, r4
 800b944:	f000 f818 	bl	800b978 <__sfp>
 800b948:	2200      	movs	r2, #0
 800b94a:	60e0      	str	r0, [r4, #12]
 800b94c:	2104      	movs	r1, #4
 800b94e:	6860      	ldr	r0, [r4, #4]
 800b950:	f7ff ff82 	bl	800b858 <std>
 800b954:	68a0      	ldr	r0, [r4, #8]
 800b956:	2201      	movs	r2, #1
 800b958:	2109      	movs	r1, #9
 800b95a:	f7ff ff7d 	bl	800b858 <std>
 800b95e:	68e0      	ldr	r0, [r4, #12]
 800b960:	2202      	movs	r2, #2
 800b962:	2112      	movs	r1, #18
 800b964:	f7ff ff78 	bl	800b858 <std>
 800b968:	2301      	movs	r3, #1
 800b96a:	61a3      	str	r3, [r4, #24]
 800b96c:	e7d2      	b.n	800b914 <__sinit+0xc>
 800b96e:	bf00      	nop
 800b970:	0800c1f0 	.word	0x0800c1f0
 800b974:	0800b8a1 	.word	0x0800b8a1

0800b978 <__sfp>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	4607      	mov	r7, r0
 800b97c:	f7ff ffac 	bl	800b8d8 <__sfp_lock_acquire>
 800b980:	4b1e      	ldr	r3, [pc, #120]	; (800b9fc <__sfp+0x84>)
 800b982:	681e      	ldr	r6, [r3, #0]
 800b984:	69b3      	ldr	r3, [r6, #24]
 800b986:	b913      	cbnz	r3, 800b98e <__sfp+0x16>
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff ffbd 	bl	800b908 <__sinit>
 800b98e:	3648      	adds	r6, #72	; 0x48
 800b990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b994:	3b01      	subs	r3, #1
 800b996:	d503      	bpl.n	800b9a0 <__sfp+0x28>
 800b998:	6833      	ldr	r3, [r6, #0]
 800b99a:	b30b      	cbz	r3, 800b9e0 <__sfp+0x68>
 800b99c:	6836      	ldr	r6, [r6, #0]
 800b99e:	e7f7      	b.n	800b990 <__sfp+0x18>
 800b9a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9a4:	b9d5      	cbnz	r5, 800b9dc <__sfp+0x64>
 800b9a6:	4b16      	ldr	r3, [pc, #88]	; (800ba00 <__sfp+0x88>)
 800b9a8:	60e3      	str	r3, [r4, #12]
 800b9aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b9b0:	f000 f859 	bl	800ba66 <__retarget_lock_init_recursive>
 800b9b4:	f7ff ff96 	bl	800b8e4 <__sfp_lock_release>
 800b9b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9c0:	6025      	str	r5, [r4, #0]
 800b9c2:	61a5      	str	r5, [r4, #24]
 800b9c4:	2208      	movs	r2, #8
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9cc:	f7fd f808 	bl	80089e0 <memset>
 800b9d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b9d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b9d8:	4620      	mov	r0, r4
 800b9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9dc:	3468      	adds	r4, #104	; 0x68
 800b9de:	e7d9      	b.n	800b994 <__sfp+0x1c>
 800b9e0:	2104      	movs	r1, #4
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f7ff ff62 	bl	800b8ac <__sfmoreglue>
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	6030      	str	r0, [r6, #0]
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	d1d5      	bne.n	800b99c <__sfp+0x24>
 800b9f0:	f7ff ff78 	bl	800b8e4 <__sfp_lock_release>
 800b9f4:	230c      	movs	r3, #12
 800b9f6:	603b      	str	r3, [r7, #0]
 800b9f8:	e7ee      	b.n	800b9d8 <__sfp+0x60>
 800b9fa:	bf00      	nop
 800b9fc:	0800c1f0 	.word	0x0800c1f0
 800ba00:	ffff0001 	.word	0xffff0001

0800ba04 <fiprintf>:
 800ba04:	b40e      	push	{r1, r2, r3}
 800ba06:	b503      	push	{r0, r1, lr}
 800ba08:	4601      	mov	r1, r0
 800ba0a:	ab03      	add	r3, sp, #12
 800ba0c:	4805      	ldr	r0, [pc, #20]	; (800ba24 <fiprintf+0x20>)
 800ba0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba12:	6800      	ldr	r0, [r0, #0]
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	f000 f8b9 	bl	800bb8c <_vfiprintf_r>
 800ba1a:	b002      	add	sp, #8
 800ba1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba20:	b003      	add	sp, #12
 800ba22:	4770      	bx	lr
 800ba24:	20000010 	.word	0x20000010

0800ba28 <_fwalk_reent>:
 800ba28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba2c:	4606      	mov	r6, r0
 800ba2e:	4688      	mov	r8, r1
 800ba30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba34:	2700      	movs	r7, #0
 800ba36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba3a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba3e:	d505      	bpl.n	800ba4c <_fwalk_reent+0x24>
 800ba40:	6824      	ldr	r4, [r4, #0]
 800ba42:	2c00      	cmp	r4, #0
 800ba44:	d1f7      	bne.n	800ba36 <_fwalk_reent+0xe>
 800ba46:	4638      	mov	r0, r7
 800ba48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba4c:	89ab      	ldrh	r3, [r5, #12]
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d907      	bls.n	800ba62 <_fwalk_reent+0x3a>
 800ba52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba56:	3301      	adds	r3, #1
 800ba58:	d003      	beq.n	800ba62 <_fwalk_reent+0x3a>
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	47c0      	blx	r8
 800ba60:	4307      	orrs	r7, r0
 800ba62:	3568      	adds	r5, #104	; 0x68
 800ba64:	e7e9      	b.n	800ba3a <_fwalk_reent+0x12>

0800ba66 <__retarget_lock_init_recursive>:
 800ba66:	4770      	bx	lr

0800ba68 <__retarget_lock_acquire_recursive>:
 800ba68:	4770      	bx	lr

0800ba6a <__retarget_lock_release_recursive>:
 800ba6a:	4770      	bx	lr

0800ba6c <__ascii_mbtowc>:
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	b901      	cbnz	r1, 800ba72 <__ascii_mbtowc+0x6>
 800ba70:	a901      	add	r1, sp, #4
 800ba72:	b142      	cbz	r2, 800ba86 <__ascii_mbtowc+0x1a>
 800ba74:	b14b      	cbz	r3, 800ba8a <__ascii_mbtowc+0x1e>
 800ba76:	7813      	ldrb	r3, [r2, #0]
 800ba78:	600b      	str	r3, [r1, #0]
 800ba7a:	7812      	ldrb	r2, [r2, #0]
 800ba7c:	1e10      	subs	r0, r2, #0
 800ba7e:	bf18      	it	ne
 800ba80:	2001      	movne	r0, #1
 800ba82:	b002      	add	sp, #8
 800ba84:	4770      	bx	lr
 800ba86:	4610      	mov	r0, r2
 800ba88:	e7fb      	b.n	800ba82 <__ascii_mbtowc+0x16>
 800ba8a:	f06f 0001 	mvn.w	r0, #1
 800ba8e:	e7f8      	b.n	800ba82 <__ascii_mbtowc+0x16>

0800ba90 <memmove>:
 800ba90:	4288      	cmp	r0, r1
 800ba92:	b510      	push	{r4, lr}
 800ba94:	eb01 0402 	add.w	r4, r1, r2
 800ba98:	d902      	bls.n	800baa0 <memmove+0x10>
 800ba9a:	4284      	cmp	r4, r0
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	d807      	bhi.n	800bab0 <memmove+0x20>
 800baa0:	1e43      	subs	r3, r0, #1
 800baa2:	42a1      	cmp	r1, r4
 800baa4:	d008      	beq.n	800bab8 <memmove+0x28>
 800baa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baae:	e7f8      	b.n	800baa2 <memmove+0x12>
 800bab0:	4402      	add	r2, r0
 800bab2:	4601      	mov	r1, r0
 800bab4:	428a      	cmp	r2, r1
 800bab6:	d100      	bne.n	800baba <memmove+0x2a>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800babe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac2:	e7f7      	b.n	800bab4 <memmove+0x24>

0800bac4 <__malloc_lock>:
 800bac4:	4801      	ldr	r0, [pc, #4]	; (800bacc <__malloc_lock+0x8>)
 800bac6:	f7ff bfcf 	b.w	800ba68 <__retarget_lock_acquire_recursive>
 800baca:	bf00      	nop
 800bacc:	20000a6c 	.word	0x20000a6c

0800bad0 <__malloc_unlock>:
 800bad0:	4801      	ldr	r0, [pc, #4]	; (800bad8 <__malloc_unlock+0x8>)
 800bad2:	f7ff bfca 	b.w	800ba6a <__retarget_lock_release_recursive>
 800bad6:	bf00      	nop
 800bad8:	20000a6c 	.word	0x20000a6c

0800badc <_realloc_r>:
 800badc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae0:	4680      	mov	r8, r0
 800bae2:	4614      	mov	r4, r2
 800bae4:	460e      	mov	r6, r1
 800bae6:	b921      	cbnz	r1, 800baf2 <_realloc_r+0x16>
 800bae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baec:	4611      	mov	r1, r2
 800baee:	f7fe bfd7 	b.w	800aaa0 <_malloc_r>
 800baf2:	b92a      	cbnz	r2, 800bb00 <_realloc_r+0x24>
 800baf4:	f7fe ff68 	bl	800a9c8 <_free_r>
 800baf8:	4625      	mov	r5, r4
 800bafa:	4628      	mov	r0, r5
 800bafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb00:	f000 faae 	bl	800c060 <_malloc_usable_size_r>
 800bb04:	4284      	cmp	r4, r0
 800bb06:	4607      	mov	r7, r0
 800bb08:	d802      	bhi.n	800bb10 <_realloc_r+0x34>
 800bb0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb0e:	d812      	bhi.n	800bb36 <_realloc_r+0x5a>
 800bb10:	4621      	mov	r1, r4
 800bb12:	4640      	mov	r0, r8
 800bb14:	f7fe ffc4 	bl	800aaa0 <_malloc_r>
 800bb18:	4605      	mov	r5, r0
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0ed      	beq.n	800bafa <_realloc_r+0x1e>
 800bb1e:	42bc      	cmp	r4, r7
 800bb20:	4622      	mov	r2, r4
 800bb22:	4631      	mov	r1, r6
 800bb24:	bf28      	it	cs
 800bb26:	463a      	movcs	r2, r7
 800bb28:	f7fe fba6 	bl	800a278 <memcpy>
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4640      	mov	r0, r8
 800bb30:	f7fe ff4a 	bl	800a9c8 <_free_r>
 800bb34:	e7e1      	b.n	800bafa <_realloc_r+0x1e>
 800bb36:	4635      	mov	r5, r6
 800bb38:	e7df      	b.n	800bafa <_realloc_r+0x1e>

0800bb3a <__sfputc_r>:
 800bb3a:	6893      	ldr	r3, [r2, #8]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	b410      	push	{r4}
 800bb42:	6093      	str	r3, [r2, #8]
 800bb44:	da08      	bge.n	800bb58 <__sfputc_r+0x1e>
 800bb46:	6994      	ldr	r4, [r2, #24]
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	db01      	blt.n	800bb50 <__sfputc_r+0x16>
 800bb4c:	290a      	cmp	r1, #10
 800bb4e:	d103      	bne.n	800bb58 <__sfputc_r+0x1e>
 800bb50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb54:	f000 b94a 	b.w	800bdec <__swbuf_r>
 800bb58:	6813      	ldr	r3, [r2, #0]
 800bb5a:	1c58      	adds	r0, r3, #1
 800bb5c:	6010      	str	r0, [r2, #0]
 800bb5e:	7019      	strb	r1, [r3, #0]
 800bb60:	4608      	mov	r0, r1
 800bb62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <__sfputs_r>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	4614      	mov	r4, r2
 800bb70:	18d5      	adds	r5, r2, r3
 800bb72:	42ac      	cmp	r4, r5
 800bb74:	d101      	bne.n	800bb7a <__sfputs_r+0x12>
 800bb76:	2000      	movs	r0, #0
 800bb78:	e007      	b.n	800bb8a <__sfputs_r+0x22>
 800bb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7e:	463a      	mov	r2, r7
 800bb80:	4630      	mov	r0, r6
 800bb82:	f7ff ffda 	bl	800bb3a <__sfputc_r>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d1f3      	bne.n	800bb72 <__sfputs_r+0xa>
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb8c <_vfiprintf_r>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	460d      	mov	r5, r1
 800bb92:	b09d      	sub	sp, #116	; 0x74
 800bb94:	4614      	mov	r4, r2
 800bb96:	4698      	mov	r8, r3
 800bb98:	4606      	mov	r6, r0
 800bb9a:	b118      	cbz	r0, 800bba4 <_vfiprintf_r+0x18>
 800bb9c:	6983      	ldr	r3, [r0, #24]
 800bb9e:	b90b      	cbnz	r3, 800bba4 <_vfiprintf_r+0x18>
 800bba0:	f7ff feb2 	bl	800b908 <__sinit>
 800bba4:	4b89      	ldr	r3, [pc, #548]	; (800bdcc <_vfiprintf_r+0x240>)
 800bba6:	429d      	cmp	r5, r3
 800bba8:	d11b      	bne.n	800bbe2 <_vfiprintf_r+0x56>
 800bbaa:	6875      	ldr	r5, [r6, #4]
 800bbac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbae:	07d9      	lsls	r1, r3, #31
 800bbb0:	d405      	bmi.n	800bbbe <_vfiprintf_r+0x32>
 800bbb2:	89ab      	ldrh	r3, [r5, #12]
 800bbb4:	059a      	lsls	r2, r3, #22
 800bbb6:	d402      	bmi.n	800bbbe <_vfiprintf_r+0x32>
 800bbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbba:	f7ff ff55 	bl	800ba68 <__retarget_lock_acquire_recursive>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	071b      	lsls	r3, r3, #28
 800bbc2:	d501      	bpl.n	800bbc8 <_vfiprintf_r+0x3c>
 800bbc4:	692b      	ldr	r3, [r5, #16]
 800bbc6:	b9eb      	cbnz	r3, 800bc04 <_vfiprintf_r+0x78>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 f96e 	bl	800beac <__swsetup_r>
 800bbd0:	b1c0      	cbz	r0, 800bc04 <_vfiprintf_r+0x78>
 800bbd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd4:	07dc      	lsls	r4, r3, #31
 800bbd6:	d50e      	bpl.n	800bbf6 <_vfiprintf_r+0x6a>
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbdc:	b01d      	add	sp, #116	; 0x74
 800bbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe2:	4b7b      	ldr	r3, [pc, #492]	; (800bdd0 <_vfiprintf_r+0x244>)
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	d101      	bne.n	800bbec <_vfiprintf_r+0x60>
 800bbe8:	68b5      	ldr	r5, [r6, #8]
 800bbea:	e7df      	b.n	800bbac <_vfiprintf_r+0x20>
 800bbec:	4b79      	ldr	r3, [pc, #484]	; (800bdd4 <_vfiprintf_r+0x248>)
 800bbee:	429d      	cmp	r5, r3
 800bbf0:	bf08      	it	eq
 800bbf2:	68f5      	ldreq	r5, [r6, #12]
 800bbf4:	e7da      	b.n	800bbac <_vfiprintf_r+0x20>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	0598      	lsls	r0, r3, #22
 800bbfa:	d4ed      	bmi.n	800bbd8 <_vfiprintf_r+0x4c>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbfe:	f7ff ff34 	bl	800ba6a <__retarget_lock_release_recursive>
 800bc02:	e7e9      	b.n	800bbd8 <_vfiprintf_r+0x4c>
 800bc04:	2300      	movs	r3, #0
 800bc06:	9309      	str	r3, [sp, #36]	; 0x24
 800bc08:	2320      	movs	r3, #32
 800bc0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc12:	2330      	movs	r3, #48	; 0x30
 800bc14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdd8 <_vfiprintf_r+0x24c>
 800bc18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc1c:	f04f 0901 	mov.w	r9, #1
 800bc20:	4623      	mov	r3, r4
 800bc22:	469a      	mov	sl, r3
 800bc24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc28:	b10a      	cbz	r2, 800bc2e <_vfiprintf_r+0xa2>
 800bc2a:	2a25      	cmp	r2, #37	; 0x25
 800bc2c:	d1f9      	bne.n	800bc22 <_vfiprintf_r+0x96>
 800bc2e:	ebba 0b04 	subs.w	fp, sl, r4
 800bc32:	d00b      	beq.n	800bc4c <_vfiprintf_r+0xc0>
 800bc34:	465b      	mov	r3, fp
 800bc36:	4622      	mov	r2, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f7ff ff94 	bl	800bb68 <__sfputs_r>
 800bc40:	3001      	adds	r0, #1
 800bc42:	f000 80aa 	beq.w	800bd9a <_vfiprintf_r+0x20e>
 800bc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc48:	445a      	add	r2, fp
 800bc4a:	9209      	str	r2, [sp, #36]	; 0x24
 800bc4c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 80a2 	beq.w	800bd9a <_vfiprintf_r+0x20e>
 800bc56:	2300      	movs	r3, #0
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc60:	f10a 0a01 	add.w	sl, sl, #1
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	9307      	str	r3, [sp, #28]
 800bc68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc6c:	931a      	str	r3, [sp, #104]	; 0x68
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2205      	movs	r2, #5
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4858      	ldr	r0, [pc, #352]	; (800bdd8 <_vfiprintf_r+0x24c>)
 800bc78:	f7f4 fad2 	bl	8000220 <memchr>
 800bc7c:	9a04      	ldr	r2, [sp, #16]
 800bc7e:	b9d8      	cbnz	r0, 800bcb8 <_vfiprintf_r+0x12c>
 800bc80:	06d1      	lsls	r1, r2, #27
 800bc82:	bf44      	itt	mi
 800bc84:	2320      	movmi	r3, #32
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8a:	0713      	lsls	r3, r2, #28
 800bc8c:	bf44      	itt	mi
 800bc8e:	232b      	movmi	r3, #43	; 0x2b
 800bc90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc94:	f89a 3000 	ldrb.w	r3, [sl]
 800bc98:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9a:	d015      	beq.n	800bcc8 <_vfiprintf_r+0x13c>
 800bc9c:	9a07      	ldr	r2, [sp, #28]
 800bc9e:	4654      	mov	r4, sl
 800bca0:	2000      	movs	r0, #0
 800bca2:	f04f 0c0a 	mov.w	ip, #10
 800bca6:	4621      	mov	r1, r4
 800bca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcac:	3b30      	subs	r3, #48	; 0x30
 800bcae:	2b09      	cmp	r3, #9
 800bcb0:	d94e      	bls.n	800bd50 <_vfiprintf_r+0x1c4>
 800bcb2:	b1b0      	cbz	r0, 800bce2 <_vfiprintf_r+0x156>
 800bcb4:	9207      	str	r2, [sp, #28]
 800bcb6:	e014      	b.n	800bce2 <_vfiprintf_r+0x156>
 800bcb8:	eba0 0308 	sub.w	r3, r0, r8
 800bcbc:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	46a2      	mov	sl, r4
 800bcc6:	e7d2      	b.n	800bc6e <_vfiprintf_r+0xe2>
 800bcc8:	9b03      	ldr	r3, [sp, #12]
 800bcca:	1d19      	adds	r1, r3, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	9103      	str	r1, [sp, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	bfbb      	ittet	lt
 800bcd4:	425b      	neglt	r3, r3
 800bcd6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcda:	9307      	strge	r3, [sp, #28]
 800bcdc:	9307      	strlt	r3, [sp, #28]
 800bcde:	bfb8      	it	lt
 800bce0:	9204      	strlt	r2, [sp, #16]
 800bce2:	7823      	ldrb	r3, [r4, #0]
 800bce4:	2b2e      	cmp	r3, #46	; 0x2e
 800bce6:	d10c      	bne.n	800bd02 <_vfiprintf_r+0x176>
 800bce8:	7863      	ldrb	r3, [r4, #1]
 800bcea:	2b2a      	cmp	r3, #42	; 0x2a
 800bcec:	d135      	bne.n	800bd5a <_vfiprintf_r+0x1ce>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	1d1a      	adds	r2, r3, #4
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	9203      	str	r2, [sp, #12]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	bfb8      	it	lt
 800bcfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcfe:	3402      	adds	r4, #2
 800bd00:	9305      	str	r3, [sp, #20]
 800bd02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde8 <_vfiprintf_r+0x25c>
 800bd06:	7821      	ldrb	r1, [r4, #0]
 800bd08:	2203      	movs	r2, #3
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	f7f4 fa88 	bl	8000220 <memchr>
 800bd10:	b140      	cbz	r0, 800bd24 <_vfiprintf_r+0x198>
 800bd12:	2340      	movs	r3, #64	; 0x40
 800bd14:	eba0 000a 	sub.w	r0, r0, sl
 800bd18:	fa03 f000 	lsl.w	r0, r3, r0
 800bd1c:	9b04      	ldr	r3, [sp, #16]
 800bd1e:	4303      	orrs	r3, r0
 800bd20:	3401      	adds	r4, #1
 800bd22:	9304      	str	r3, [sp, #16]
 800bd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd28:	482c      	ldr	r0, [pc, #176]	; (800bddc <_vfiprintf_r+0x250>)
 800bd2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd2e:	2206      	movs	r2, #6
 800bd30:	f7f4 fa76 	bl	8000220 <memchr>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d03f      	beq.n	800bdb8 <_vfiprintf_r+0x22c>
 800bd38:	4b29      	ldr	r3, [pc, #164]	; (800bde0 <_vfiprintf_r+0x254>)
 800bd3a:	bb1b      	cbnz	r3, 800bd84 <_vfiprintf_r+0x1f8>
 800bd3c:	9b03      	ldr	r3, [sp, #12]
 800bd3e:	3307      	adds	r3, #7
 800bd40:	f023 0307 	bic.w	r3, r3, #7
 800bd44:	3308      	adds	r3, #8
 800bd46:	9303      	str	r3, [sp, #12]
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	443b      	add	r3, r7
 800bd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4e:	e767      	b.n	800bc20 <_vfiprintf_r+0x94>
 800bd50:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd54:	460c      	mov	r4, r1
 800bd56:	2001      	movs	r0, #1
 800bd58:	e7a5      	b.n	800bca6 <_vfiprintf_r+0x11a>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	3401      	adds	r4, #1
 800bd5e:	9305      	str	r3, [sp, #20]
 800bd60:	4619      	mov	r1, r3
 800bd62:	f04f 0c0a 	mov.w	ip, #10
 800bd66:	4620      	mov	r0, r4
 800bd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd6c:	3a30      	subs	r2, #48	; 0x30
 800bd6e:	2a09      	cmp	r2, #9
 800bd70:	d903      	bls.n	800bd7a <_vfiprintf_r+0x1ee>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0c5      	beq.n	800bd02 <_vfiprintf_r+0x176>
 800bd76:	9105      	str	r1, [sp, #20]
 800bd78:	e7c3      	b.n	800bd02 <_vfiprintf_r+0x176>
 800bd7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd7e:	4604      	mov	r4, r0
 800bd80:	2301      	movs	r3, #1
 800bd82:	e7f0      	b.n	800bd66 <_vfiprintf_r+0x1da>
 800bd84:	ab03      	add	r3, sp, #12
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	462a      	mov	r2, r5
 800bd8a:	4b16      	ldr	r3, [pc, #88]	; (800bde4 <_vfiprintf_r+0x258>)
 800bd8c:	a904      	add	r1, sp, #16
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7fc fece 	bl	8008b30 <_printf_float>
 800bd94:	4607      	mov	r7, r0
 800bd96:	1c78      	adds	r0, r7, #1
 800bd98:	d1d6      	bne.n	800bd48 <_vfiprintf_r+0x1bc>
 800bd9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9c:	07d9      	lsls	r1, r3, #31
 800bd9e:	d405      	bmi.n	800bdac <_vfiprintf_r+0x220>
 800bda0:	89ab      	ldrh	r3, [r5, #12]
 800bda2:	059a      	lsls	r2, r3, #22
 800bda4:	d402      	bmi.n	800bdac <_vfiprintf_r+0x220>
 800bda6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda8:	f7ff fe5f 	bl	800ba6a <__retarget_lock_release_recursive>
 800bdac:	89ab      	ldrh	r3, [r5, #12]
 800bdae:	065b      	lsls	r3, r3, #25
 800bdb0:	f53f af12 	bmi.w	800bbd8 <_vfiprintf_r+0x4c>
 800bdb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb6:	e711      	b.n	800bbdc <_vfiprintf_r+0x50>
 800bdb8:	ab03      	add	r3, sp, #12
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	462a      	mov	r2, r5
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <_vfiprintf_r+0x258>)
 800bdc0:	a904      	add	r1, sp, #16
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f7fd f958 	bl	8009078 <_printf_i>
 800bdc8:	e7e4      	b.n	800bd94 <_vfiprintf_r+0x208>
 800bdca:	bf00      	nop
 800bdcc:	0800c59c 	.word	0x0800c59c
 800bdd0:	0800c5bc 	.word	0x0800c5bc
 800bdd4:	0800c57c 	.word	0x0800c57c
 800bdd8:	0800c514 	.word	0x0800c514
 800bddc:	0800c51e 	.word	0x0800c51e
 800bde0:	08008b31 	.word	0x08008b31
 800bde4:	0800bb69 	.word	0x0800bb69
 800bde8:	0800c51a 	.word	0x0800c51a

0800bdec <__swbuf_r>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	460e      	mov	r6, r1
 800bdf0:	4614      	mov	r4, r2
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	b118      	cbz	r0, 800bdfe <__swbuf_r+0x12>
 800bdf6:	6983      	ldr	r3, [r0, #24]
 800bdf8:	b90b      	cbnz	r3, 800bdfe <__swbuf_r+0x12>
 800bdfa:	f7ff fd85 	bl	800b908 <__sinit>
 800bdfe:	4b21      	ldr	r3, [pc, #132]	; (800be84 <__swbuf_r+0x98>)
 800be00:	429c      	cmp	r4, r3
 800be02:	d12b      	bne.n	800be5c <__swbuf_r+0x70>
 800be04:	686c      	ldr	r4, [r5, #4]
 800be06:	69a3      	ldr	r3, [r4, #24]
 800be08:	60a3      	str	r3, [r4, #8]
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	071a      	lsls	r2, r3, #28
 800be0e:	d52f      	bpl.n	800be70 <__swbuf_r+0x84>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	b36b      	cbz	r3, 800be70 <__swbuf_r+0x84>
 800be14:	6923      	ldr	r3, [r4, #16]
 800be16:	6820      	ldr	r0, [r4, #0]
 800be18:	1ac0      	subs	r0, r0, r3
 800be1a:	6963      	ldr	r3, [r4, #20]
 800be1c:	b2f6      	uxtb	r6, r6
 800be1e:	4283      	cmp	r3, r0
 800be20:	4637      	mov	r7, r6
 800be22:	dc04      	bgt.n	800be2e <__swbuf_r+0x42>
 800be24:	4621      	mov	r1, r4
 800be26:	4628      	mov	r0, r5
 800be28:	f7ff fcda 	bl	800b7e0 <_fflush_r>
 800be2c:	bb30      	cbnz	r0, 800be7c <__swbuf_r+0x90>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	1c5a      	adds	r2, r3, #1
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	701e      	strb	r6, [r3, #0]
 800be3c:	6963      	ldr	r3, [r4, #20]
 800be3e:	3001      	adds	r0, #1
 800be40:	4283      	cmp	r3, r0
 800be42:	d004      	beq.n	800be4e <__swbuf_r+0x62>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	07db      	lsls	r3, r3, #31
 800be48:	d506      	bpl.n	800be58 <__swbuf_r+0x6c>
 800be4a:	2e0a      	cmp	r6, #10
 800be4c:	d104      	bne.n	800be58 <__swbuf_r+0x6c>
 800be4e:	4621      	mov	r1, r4
 800be50:	4628      	mov	r0, r5
 800be52:	f7ff fcc5 	bl	800b7e0 <_fflush_r>
 800be56:	b988      	cbnz	r0, 800be7c <__swbuf_r+0x90>
 800be58:	4638      	mov	r0, r7
 800be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <__swbuf_r+0x9c>)
 800be5e:	429c      	cmp	r4, r3
 800be60:	d101      	bne.n	800be66 <__swbuf_r+0x7a>
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	e7cf      	b.n	800be06 <__swbuf_r+0x1a>
 800be66:	4b09      	ldr	r3, [pc, #36]	; (800be8c <__swbuf_r+0xa0>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf08      	it	eq
 800be6c:	68ec      	ldreq	r4, [r5, #12]
 800be6e:	e7ca      	b.n	800be06 <__swbuf_r+0x1a>
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f81a 	bl	800beac <__swsetup_r>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0cb      	beq.n	800be14 <__swbuf_r+0x28>
 800be7c:	f04f 37ff 	mov.w	r7, #4294967295
 800be80:	e7ea      	b.n	800be58 <__swbuf_r+0x6c>
 800be82:	bf00      	nop
 800be84:	0800c59c 	.word	0x0800c59c
 800be88:	0800c5bc 	.word	0x0800c5bc
 800be8c:	0800c57c 	.word	0x0800c57c

0800be90 <__ascii_wctomb>:
 800be90:	b149      	cbz	r1, 800bea6 <__ascii_wctomb+0x16>
 800be92:	2aff      	cmp	r2, #255	; 0xff
 800be94:	bf85      	ittet	hi
 800be96:	238a      	movhi	r3, #138	; 0x8a
 800be98:	6003      	strhi	r3, [r0, #0]
 800be9a:	700a      	strbls	r2, [r1, #0]
 800be9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bea0:	bf98      	it	ls
 800bea2:	2001      	movls	r0, #1
 800bea4:	4770      	bx	lr
 800bea6:	4608      	mov	r0, r1
 800bea8:	4770      	bx	lr
	...

0800beac <__swsetup_r>:
 800beac:	4b32      	ldr	r3, [pc, #200]	; (800bf78 <__swsetup_r+0xcc>)
 800beae:	b570      	push	{r4, r5, r6, lr}
 800beb0:	681d      	ldr	r5, [r3, #0]
 800beb2:	4606      	mov	r6, r0
 800beb4:	460c      	mov	r4, r1
 800beb6:	b125      	cbz	r5, 800bec2 <__swsetup_r+0x16>
 800beb8:	69ab      	ldr	r3, [r5, #24]
 800beba:	b913      	cbnz	r3, 800bec2 <__swsetup_r+0x16>
 800bebc:	4628      	mov	r0, r5
 800bebe:	f7ff fd23 	bl	800b908 <__sinit>
 800bec2:	4b2e      	ldr	r3, [pc, #184]	; (800bf7c <__swsetup_r+0xd0>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	d10f      	bne.n	800bee8 <__swsetup_r+0x3c>
 800bec8:	686c      	ldr	r4, [r5, #4]
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed0:	0719      	lsls	r1, r3, #28
 800bed2:	d42c      	bmi.n	800bf2e <__swsetup_r+0x82>
 800bed4:	06dd      	lsls	r5, r3, #27
 800bed6:	d411      	bmi.n	800befc <__swsetup_r+0x50>
 800bed8:	2309      	movs	r3, #9
 800beda:	6033      	str	r3, [r6, #0]
 800bedc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bee0:	81a3      	strh	r3, [r4, #12]
 800bee2:	f04f 30ff 	mov.w	r0, #4294967295
 800bee6:	e03e      	b.n	800bf66 <__swsetup_r+0xba>
 800bee8:	4b25      	ldr	r3, [pc, #148]	; (800bf80 <__swsetup_r+0xd4>)
 800beea:	429c      	cmp	r4, r3
 800beec:	d101      	bne.n	800bef2 <__swsetup_r+0x46>
 800beee:	68ac      	ldr	r4, [r5, #8]
 800bef0:	e7eb      	b.n	800beca <__swsetup_r+0x1e>
 800bef2:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <__swsetup_r+0xd8>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	bf08      	it	eq
 800bef8:	68ec      	ldreq	r4, [r5, #12]
 800befa:	e7e6      	b.n	800beca <__swsetup_r+0x1e>
 800befc:	0758      	lsls	r0, r3, #29
 800befe:	d512      	bpl.n	800bf26 <__swsetup_r+0x7a>
 800bf00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf02:	b141      	cbz	r1, 800bf16 <__swsetup_r+0x6a>
 800bf04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d002      	beq.n	800bf12 <__swsetup_r+0x66>
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	f7fe fd5b 	bl	800a9c8 <_free_r>
 800bf12:	2300      	movs	r3, #0
 800bf14:	6363      	str	r3, [r4, #52]	; 0x34
 800bf16:	89a3      	ldrh	r3, [r4, #12]
 800bf18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf1c:	81a3      	strh	r3, [r4, #12]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	6063      	str	r3, [r4, #4]
 800bf22:	6923      	ldr	r3, [r4, #16]
 800bf24:	6023      	str	r3, [r4, #0]
 800bf26:	89a3      	ldrh	r3, [r4, #12]
 800bf28:	f043 0308 	orr.w	r3, r3, #8
 800bf2c:	81a3      	strh	r3, [r4, #12]
 800bf2e:	6923      	ldr	r3, [r4, #16]
 800bf30:	b94b      	cbnz	r3, 800bf46 <__swsetup_r+0x9a>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf3c:	d003      	beq.n	800bf46 <__swsetup_r+0x9a>
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4630      	mov	r0, r6
 800bf42:	f000 f84d 	bl	800bfe0 <__smakebuf_r>
 800bf46:	89a0      	ldrh	r0, [r4, #12]
 800bf48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf4c:	f010 0301 	ands.w	r3, r0, #1
 800bf50:	d00a      	beq.n	800bf68 <__swsetup_r+0xbc>
 800bf52:	2300      	movs	r3, #0
 800bf54:	60a3      	str	r3, [r4, #8]
 800bf56:	6963      	ldr	r3, [r4, #20]
 800bf58:	425b      	negs	r3, r3
 800bf5a:	61a3      	str	r3, [r4, #24]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	b943      	cbnz	r3, 800bf72 <__swsetup_r+0xc6>
 800bf60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf64:	d1ba      	bne.n	800bedc <__swsetup_r+0x30>
 800bf66:	bd70      	pop	{r4, r5, r6, pc}
 800bf68:	0781      	lsls	r1, r0, #30
 800bf6a:	bf58      	it	pl
 800bf6c:	6963      	ldrpl	r3, [r4, #20]
 800bf6e:	60a3      	str	r3, [r4, #8]
 800bf70:	e7f4      	b.n	800bf5c <__swsetup_r+0xb0>
 800bf72:	2000      	movs	r0, #0
 800bf74:	e7f7      	b.n	800bf66 <__swsetup_r+0xba>
 800bf76:	bf00      	nop
 800bf78:	20000010 	.word	0x20000010
 800bf7c:	0800c59c 	.word	0x0800c59c
 800bf80:	0800c5bc 	.word	0x0800c5bc
 800bf84:	0800c57c 	.word	0x0800c57c

0800bf88 <abort>:
 800bf88:	b508      	push	{r3, lr}
 800bf8a:	2006      	movs	r0, #6
 800bf8c:	f000 f898 	bl	800c0c0 <raise>
 800bf90:	2001      	movs	r0, #1
 800bf92:	f7f6 f859 	bl	8002048 <_exit>

0800bf96 <__swhatbuf_r>:
 800bf96:	b570      	push	{r4, r5, r6, lr}
 800bf98:	460e      	mov	r6, r1
 800bf9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf9e:	2900      	cmp	r1, #0
 800bfa0:	b096      	sub	sp, #88	; 0x58
 800bfa2:	4614      	mov	r4, r2
 800bfa4:	461d      	mov	r5, r3
 800bfa6:	da08      	bge.n	800bfba <__swhatbuf_r+0x24>
 800bfa8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfac:	2200      	movs	r2, #0
 800bfae:	602a      	str	r2, [r5, #0]
 800bfb0:	061a      	lsls	r2, r3, #24
 800bfb2:	d410      	bmi.n	800bfd6 <__swhatbuf_r+0x40>
 800bfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfb8:	e00e      	b.n	800bfd8 <__swhatbuf_r+0x42>
 800bfba:	466a      	mov	r2, sp
 800bfbc:	f000 f89c 	bl	800c0f8 <_fstat_r>
 800bfc0:	2800      	cmp	r0, #0
 800bfc2:	dbf1      	blt.n	800bfa8 <__swhatbuf_r+0x12>
 800bfc4:	9a01      	ldr	r2, [sp, #4]
 800bfc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfce:	425a      	negs	r2, r3
 800bfd0:	415a      	adcs	r2, r3
 800bfd2:	602a      	str	r2, [r5, #0]
 800bfd4:	e7ee      	b.n	800bfb4 <__swhatbuf_r+0x1e>
 800bfd6:	2340      	movs	r3, #64	; 0x40
 800bfd8:	2000      	movs	r0, #0
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	b016      	add	sp, #88	; 0x58
 800bfde:	bd70      	pop	{r4, r5, r6, pc}

0800bfe0 <__smakebuf_r>:
 800bfe0:	898b      	ldrh	r3, [r1, #12]
 800bfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfe4:	079d      	lsls	r5, r3, #30
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460c      	mov	r4, r1
 800bfea:	d507      	bpl.n	800bffc <__smakebuf_r+0x1c>
 800bfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	6123      	str	r3, [r4, #16]
 800bff4:	2301      	movs	r3, #1
 800bff6:	6163      	str	r3, [r4, #20]
 800bff8:	b002      	add	sp, #8
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	ab01      	add	r3, sp, #4
 800bffe:	466a      	mov	r2, sp
 800c000:	f7ff ffc9 	bl	800bf96 <__swhatbuf_r>
 800c004:	9900      	ldr	r1, [sp, #0]
 800c006:	4605      	mov	r5, r0
 800c008:	4630      	mov	r0, r6
 800c00a:	f7fe fd49 	bl	800aaa0 <_malloc_r>
 800c00e:	b948      	cbnz	r0, 800c024 <__smakebuf_r+0x44>
 800c010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c014:	059a      	lsls	r2, r3, #22
 800c016:	d4ef      	bmi.n	800bff8 <__smakebuf_r+0x18>
 800c018:	f023 0303 	bic.w	r3, r3, #3
 800c01c:	f043 0302 	orr.w	r3, r3, #2
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	e7e3      	b.n	800bfec <__smakebuf_r+0xc>
 800c024:	4b0d      	ldr	r3, [pc, #52]	; (800c05c <__smakebuf_r+0x7c>)
 800c026:	62b3      	str	r3, [r6, #40]	; 0x28
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	6020      	str	r0, [r4, #0]
 800c02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	9b00      	ldr	r3, [sp, #0]
 800c034:	6163      	str	r3, [r4, #20]
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	6120      	str	r0, [r4, #16]
 800c03a:	b15b      	cbz	r3, 800c054 <__smakebuf_r+0x74>
 800c03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c040:	4630      	mov	r0, r6
 800c042:	f000 f86b 	bl	800c11c <_isatty_r>
 800c046:	b128      	cbz	r0, 800c054 <__smakebuf_r+0x74>
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	f023 0303 	bic.w	r3, r3, #3
 800c04e:	f043 0301 	orr.w	r3, r3, #1
 800c052:	81a3      	strh	r3, [r4, #12]
 800c054:	89a0      	ldrh	r0, [r4, #12]
 800c056:	4305      	orrs	r5, r0
 800c058:	81a5      	strh	r5, [r4, #12]
 800c05a:	e7cd      	b.n	800bff8 <__smakebuf_r+0x18>
 800c05c:	0800b8a1 	.word	0x0800b8a1

0800c060 <_malloc_usable_size_r>:
 800c060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c064:	1f18      	subs	r0, r3, #4
 800c066:	2b00      	cmp	r3, #0
 800c068:	bfbc      	itt	lt
 800c06a:	580b      	ldrlt	r3, [r1, r0]
 800c06c:	18c0      	addlt	r0, r0, r3
 800c06e:	4770      	bx	lr

0800c070 <_raise_r>:
 800c070:	291f      	cmp	r1, #31
 800c072:	b538      	push	{r3, r4, r5, lr}
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	d904      	bls.n	800c084 <_raise_r+0x14>
 800c07a:	2316      	movs	r3, #22
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c086:	b112      	cbz	r2, 800c08e <_raise_r+0x1e>
 800c088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c08c:	b94b      	cbnz	r3, 800c0a2 <_raise_r+0x32>
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f830 	bl	800c0f4 <_getpid_r>
 800c094:	462a      	mov	r2, r5
 800c096:	4601      	mov	r1, r0
 800c098:	4620      	mov	r0, r4
 800c09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c09e:	f000 b817 	b.w	800c0d0 <_kill_r>
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d00a      	beq.n	800c0bc <_raise_r+0x4c>
 800c0a6:	1c59      	adds	r1, r3, #1
 800c0a8:	d103      	bne.n	800c0b2 <_raise_r+0x42>
 800c0aa:	2316      	movs	r3, #22
 800c0ac:	6003      	str	r3, [r0, #0]
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	e7e7      	b.n	800c082 <_raise_r+0x12>
 800c0b2:	2400      	movs	r4, #0
 800c0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	4798      	blx	r3
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e7e0      	b.n	800c082 <_raise_r+0x12>

0800c0c0 <raise>:
 800c0c0:	4b02      	ldr	r3, [pc, #8]	; (800c0cc <raise+0xc>)
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	6818      	ldr	r0, [r3, #0]
 800c0c6:	f7ff bfd3 	b.w	800c070 <_raise_r>
 800c0ca:	bf00      	nop
 800c0cc:	20000010 	.word	0x20000010

0800c0d0 <_kill_r>:
 800c0d0:	b538      	push	{r3, r4, r5, lr}
 800c0d2:	4d07      	ldr	r5, [pc, #28]	; (800c0f0 <_kill_r+0x20>)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	f7f5 ffa3 	bl	8002028 <_kill>
 800c0e2:	1c43      	adds	r3, r0, #1
 800c0e4:	d102      	bne.n	800c0ec <_kill_r+0x1c>
 800c0e6:	682b      	ldr	r3, [r5, #0]
 800c0e8:	b103      	cbz	r3, 800c0ec <_kill_r+0x1c>
 800c0ea:	6023      	str	r3, [r4, #0]
 800c0ec:	bd38      	pop	{r3, r4, r5, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000a68 	.word	0x20000a68

0800c0f4 <_getpid_r>:
 800c0f4:	f7f5 bf90 	b.w	8002018 <_getpid>

0800c0f8 <_fstat_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d07      	ldr	r5, [pc, #28]	; (800c118 <_fstat_r+0x20>)
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	4604      	mov	r4, r0
 800c100:	4608      	mov	r0, r1
 800c102:	4611      	mov	r1, r2
 800c104:	602b      	str	r3, [r5, #0]
 800c106:	f7f5 ffee 	bl	80020e6 <_fstat>
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	d102      	bne.n	800c114 <_fstat_r+0x1c>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	b103      	cbz	r3, 800c114 <_fstat_r+0x1c>
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	bd38      	pop	{r3, r4, r5, pc}
 800c116:	bf00      	nop
 800c118:	20000a68 	.word	0x20000a68

0800c11c <_isatty_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d06      	ldr	r5, [pc, #24]	; (800c138 <_isatty_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f7f5 ffed 	bl	8002106 <_isatty>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_isatty_r+0x1a>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_isatty_r+0x1a>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	20000a68 	.word	0x20000a68

0800c13c <_init>:
 800c13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c13e:	bf00      	nop
 800c140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c142:	bc08      	pop	{r3}
 800c144:	469e      	mov	lr, r3
 800c146:	4770      	bx	lr

0800c148 <_fini>:
 800c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14a:	bf00      	nop
 800c14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c14e:	bc08      	pop	{r3}
 800c150:	469e      	mov	lr, r3
 800c152:	4770      	bx	lr
